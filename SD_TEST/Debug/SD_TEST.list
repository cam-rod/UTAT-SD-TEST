
SD_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a170  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800a410  0800a410  0001a410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a4e4  0800a4e4  0001a4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a4ec  0800a4ec  0001a4ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a4f0  0800a4f0  0001a4f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800a4f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000074  0800a568  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d4  0800a5c8  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000614  24000134  0800a628  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000748  0800a628  00020748  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002831c  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b9c  00000000  00000000  0004847e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  0004c020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f8  00000000  00000000  0004d330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039960  00000000  00000000  0004e528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018008  00000000  00000000  00087e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00166d07  00000000  00000000  0009fe90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00206b97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058cc  00000000  00000000  00206bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000134 	.word	0x24000134
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a3f8 	.word	0x0800a3f8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000138 	.word	0x24000138
 80002dc:	0800a3f8 	.word	0x0800a3f8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 800067e:	f000 fea9 	bl	80013d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000682:	f000 f83b 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000686:	f000 f9a7 	bl	80009d8 <MX_GPIO_Init>
  MX_ETH_Init();
 800068a:	f000 f8b7 	bl	80007fc <MX_ETH_Init>
  MX_USART3_UART_Init();
 800068e:	f000 f925 	bl	80008dc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000692:	f000 f96f 	bl	8000974 <MX_USB_OTG_FS_PCD_Init>
  MX_SDMMC2_SD_Init();
 8000696:	f000 f8fd 	bl	8000894 <MX_SDMMC2_SD_Init>
  /* USER CODE BEGIN 2 */
  uint32_t sd_tx_buffer = 3;
 800069a:	2303      	movs	r3, #3
 800069c:	60bb      	str	r3, [r7, #8]
  uint32_t status = HAL_SD_WriteBlocks(&hsd2, &sd_tx_buffer, 0x20000, 1, 500);
 800069e:	f107 0108 	add.w	r1, r7, #8
 80006a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	2301      	movs	r3, #1
 80006aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80006ae:	4811      	ldr	r0, [pc, #68]	; (80006f4 <main+0x7c>)
 80006b0:	f005 fb9e 	bl	8005df0 <HAL_SD_WriteBlocks>
 80006b4:	4603      	mov	r3, r0
 80006b6:	60fb      	str	r3, [r7, #12]

  uint32_t sd_rx_buffer = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
  status = HAL_SD_ReadBlocks (&hsd2, &sd_rx_buffer, 0x20000, 1, 500);
 80006bc:	1d39      	adds	r1, r7, #4
 80006be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2301      	movs	r3, #1
 80006c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80006ca:	480a      	ldr	r0, [pc, #40]	; (80006f4 <main+0x7c>)
 80006cc:	f005 fa06 	bl	8005adc <HAL_SD_ReadBlocks>
 80006d0:	4603      	mov	r3, r0
 80006d2:	60fb      	str	r3, [r7, #12]
  if (status != HAL_OK) {
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d002      	beq.n	80006e0 <main+0x68>
	  return -1;
 80006da:	f04f 33ff 	mov.w	r3, #4294967295
 80006de:	e005      	b.n	80006ec <main+0x74>
  }

  printf("%lx", sd_rx_buffer);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4619      	mov	r1, r3
 80006e4:	4804      	ldr	r0, [pc, #16]	; (80006f8 <main+0x80>)
 80006e6:	f008 ff31 	bl	800954c <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <main+0x72>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	240005fc 	.word	0x240005fc
 80006f8:	0800a410 	.word	0x0800a410

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b09c      	sub	sp, #112	; 0x70
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000706:	224c      	movs	r2, #76	; 0x4c
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f008 ff16 	bl	800953c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2220      	movs	r2, #32
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f008 ff10 	bl	800953c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800071c:	2002      	movs	r0, #2
 800071e:	f001 ff3b 	bl	8002598 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000722:	2300      	movs	r3, #0
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	4b33      	ldr	r3, [pc, #204]	; (80007f4 <SystemClock_Config+0xf8>)
 8000728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800072a:	4a32      	ldr	r2, [pc, #200]	; (80007f4 <SystemClock_Config+0xf8>)
 800072c:	f023 0301 	bic.w	r3, r3, #1
 8000730:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000732:	4b30      	ldr	r3, [pc, #192]	; (80007f4 <SystemClock_Config+0xf8>)
 8000734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	4b2e      	ldr	r3, [pc, #184]	; (80007f8 <SystemClock_Config+0xfc>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000744:	4a2c      	ldr	r2, [pc, #176]	; (80007f8 <SystemClock_Config+0xfc>)
 8000746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b2a      	ldr	r3, [pc, #168]	; (80007f8 <SystemClock_Config+0xfc>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000758:	bf00      	nop
 800075a:	4b27      	ldr	r3, [pc, #156]	; (80007f8 <SystemClock_Config+0xfc>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000766:	d1f8      	bne.n	800075a <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000768:	2303      	movs	r3, #3
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800076c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000770:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000772:	2301      	movs	r3, #1
 8000774:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000776:	2340      	movs	r3, #64	; 0x40
 8000778:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077a:	2302      	movs	r3, #2
 800077c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077e:	2302      	movs	r3, #2
 8000780:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000782:	2301      	movs	r3, #1
 8000784:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000786:	2318      	movs	r3, #24
 8000788:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800078a:	2302      	movs	r3, #2
 800078c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800078e:	2304      	movs	r3, #4
 8000790:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000792:	2302      	movs	r3, #2
 8000794:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000796:	230c      	movs	r3, #12
 8000798:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800079a:	2300      	movs	r3, #0
 800079c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a6:	4618      	mov	r0, r3
 80007a8:	f001 ff40 	bl	800262c <HAL_RCC_OscConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80007b2:	f000 fa0f 	bl	8000bd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b6:	233f      	movs	r3, #63	; 0x3f
 80007b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2101      	movs	r1, #1
 80007da:	4618      	mov	r0, r3
 80007dc:	f002 fb52 	bl	8002e84 <HAL_RCC_ClockConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0xee>
  {
    Error_Handler();
 80007e6:	f000 f9f5 	bl	8000bd4 <Error_Handler>
  }
}
 80007ea:	bf00      	nop
 80007ec:	3770      	adds	r7, #112	; 0x70
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	58000400 	.word	0x58000400
 80007f8:	58024800 	.word	0x58024800

080007fc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000800:	4b1e      	ldr	r3, [pc, #120]	; (800087c <MX_ETH_Init+0x80>)
 8000802:	4a1f      	ldr	r2, [pc, #124]	; (8000880 <MX_ETH_Init+0x84>)
 8000804:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000806:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <MX_ETH_Init+0x88>)
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800080c:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <MX_ETH_Init+0x88>)
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MX_ETH_Init+0x88>)
 8000814:	22e1      	movs	r2, #225	; 0xe1
 8000816:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_ETH_Init+0x88>)
 800081a:	2200      	movs	r2, #0
 800081c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800081e:	4b19      	ldr	r3, [pc, #100]	; (8000884 <MX_ETH_Init+0x88>)
 8000820:	2200      	movs	r2, #0
 8000822:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000824:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_ETH_Init+0x88>)
 8000826:	2200      	movs	r2, #0
 8000828:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_ETH_Init+0x80>)
 800082c:	4a15      	ldr	r2, [pc, #84]	; (8000884 <MX_ETH_Init+0x88>)
 800082e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_ETH_Init+0x80>)
 8000832:	2201      	movs	r2, #1
 8000834:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_ETH_Init+0x80>)
 8000838:	4a13      	ldr	r2, [pc, #76]	; (8000888 <MX_ETH_Init+0x8c>)
 800083a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_ETH_Init+0x80>)
 800083e:	4a13      	ldr	r2, [pc, #76]	; (800088c <MX_ETH_Init+0x90>)
 8000840:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_ETH_Init+0x80>)
 8000844:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000848:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800084a:	480c      	ldr	r0, [pc, #48]	; (800087c <MX_ETH_Init+0x80>)
 800084c:	f000 ff7c 	bl	8001748 <HAL_ETH_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000856:	f000 f9bd 	bl	8000bd4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800085a:	2234      	movs	r2, #52	; 0x34
 800085c:	2100      	movs	r1, #0
 800085e:	480c      	ldr	r0, [pc, #48]	; (8000890 <MX_ETH_Init+0x94>)
 8000860:	f008 fe6c 	bl	800953c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000864:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <MX_ETH_Init+0x94>)
 8000866:	2221      	movs	r2, #33	; 0x21
 8000868:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_ETH_Init+0x94>)
 800086c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000870:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000872:	4b07      	ldr	r3, [pc, #28]	; (8000890 <MX_ETH_Init+0x94>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	24000678 	.word	0x24000678
 8000880:	40028000 	.word	0x40028000
 8000884:	24000150 	.word	0x24000150
 8000888:	240000d4 	.word	0x240000d4
 800088c:	24000074 	.word	0x24000074
 8000890:	24000700 	.word	0x24000700

08000894 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8000898:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_SDMMC2_SD_Init+0x40>)
 800089a:	4a0f      	ldr	r2, [pc, #60]	; (80008d8 <MX_SDMMC2_SD_Init+0x44>)
 800089c:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800089e:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <MX_SDMMC2_SD_Init+0x40>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80008a4:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <MX_SDMMC2_SD_Init+0x40>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <MX_SDMMC2_SD_Init+0x40>)
 80008ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008b0:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MX_SDMMC2_SD_Init+0x40>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_SDMMC2_SD_Init+0x40>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd2) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_SDMMC2_SD_Init+0x40>)
 80008c0:	f004 fff2 	bl	80058a8 <HAL_SD_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_SDMMC2_SD_Init+0x3a>
  {
    Error_Handler();
 80008ca:	f000 f983 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	240005fc 	.word	0x240005fc
 80008d8:	48022400 	.word	0x48022400

080008dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008e0:	4b22      	ldr	r3, [pc, #136]	; (800096c <MX_USART3_UART_Init+0x90>)
 80008e2:	4a23      	ldr	r2, [pc, #140]	; (8000970 <MX_USART3_UART_Init+0x94>)
 80008e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008e6:	4b21      	ldr	r3, [pc, #132]	; (800096c <MX_USART3_UART_Init+0x90>)
 80008e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ee:	4b1f      	ldr	r3, [pc, #124]	; (800096c <MX_USART3_UART_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008f4:	4b1d      	ldr	r3, [pc, #116]	; (800096c <MX_USART3_UART_Init+0x90>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008fa:	4b1c      	ldr	r3, [pc, #112]	; (800096c <MX_USART3_UART_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000900:	4b1a      	ldr	r3, [pc, #104]	; (800096c <MX_USART3_UART_Init+0x90>)
 8000902:	220c      	movs	r2, #12
 8000904:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000906:	4b19      	ldr	r3, [pc, #100]	; (800096c <MX_USART3_UART_Init+0x90>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <MX_USART3_UART_Init+0x90>)
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_USART3_UART_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_USART3_UART_Init+0x90>)
 800091a:	2200      	movs	r2, #0
 800091c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <MX_USART3_UART_Init+0x90>)
 8000920:	2200      	movs	r2, #0
 8000922:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000924:	4811      	ldr	r0, [pc, #68]	; (800096c <MX_USART3_UART_Init+0x90>)
 8000926:	f006 fb3f 	bl	8006fa8 <HAL_UART_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000930:	f000 f950 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000934:	2100      	movs	r1, #0
 8000936:	480d      	ldr	r0, [pc, #52]	; (800096c <MX_USART3_UART_Init+0x90>)
 8000938:	f007 fc3e 	bl	80081b8 <HAL_UARTEx_SetTxFifoThreshold>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000942:	f000 f947 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000946:	2100      	movs	r1, #0
 8000948:	4808      	ldr	r0, [pc, #32]	; (800096c <MX_USART3_UART_Init+0x90>)
 800094a:	f007 fc73 	bl	8008234 <HAL_UARTEx_SetRxFifoThreshold>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000954:	f000 f93e 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_USART3_UART_Init+0x90>)
 800095a:	f007 fbf4 	bl	8008146 <HAL_UARTEx_DisableFifoMode>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000964:	f000 f936 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	24000164 	.word	0x24000164
 8000970:	40004800 	.word	0x40004800

08000974 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000978:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800097a:	4a16      	ldr	r2, [pc, #88]	; (80009d4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800097c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000980:	2209      	movs	r2, #9
 8000982:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000986:	2202      	movs	r2, #2
 8000988:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000992:	2202      	movs	r2, #2
 8000994:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000998:	2201      	movs	r2, #1
 800099a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009bc:	f001 fca3 	bl	8002306 <HAL_PCD_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80009c6:	f000 f905 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	240001f4 	.word	0x240001f4
 80009d4:	40080000 	.word	0x40080000

080009d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08c      	sub	sp, #48	; 0x30
 80009dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	4b61      	ldr	r3, [pc, #388]	; (8000b74 <MX_GPIO_Init+0x19c>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f4:	4a5f      	ldr	r2, [pc, #380]	; (8000b74 <MX_GPIO_Init+0x19c>)
 80009f6:	f043 0304 	orr.w	r3, r3, #4
 80009fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fe:	4b5d      	ldr	r3, [pc, #372]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a04:	f003 0304 	and.w	r3, r3, #4
 8000a08:	61bb      	str	r3, [r7, #24]
 8000a0a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0c:	4b59      	ldr	r3, [pc, #356]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a12:	4a58      	ldr	r2, [pc, #352]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1c:	4b55      	ldr	r3, [pc, #340]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	4b52      	ldr	r3, [pc, #328]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a30:	4a50      	ldr	r2, [pc, #320]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3a:	4b4e      	ldr	r3, [pc, #312]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a48:	4b4a      	ldr	r3, [pc, #296]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4e:	4a49      	ldr	r2, [pc, #292]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a58:	4b46      	ldr	r3, [pc, #280]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a66:	4b43      	ldr	r3, [pc, #268]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6c:	4a41      	ldr	r2, [pc, #260]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000a6e:	f043 0308 	orr.w	r3, r3, #8
 8000a72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a76:	4b3f      	ldr	r3, [pc, #252]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7c:	f003 0308 	and.w	r3, r3, #8
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a84:	4b3b      	ldr	r3, [pc, #236]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8a:	4a3a      	ldr	r2, [pc, #232]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a94:	4b37      	ldr	r3, [pc, #220]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aa2:	4b34      	ldr	r3, [pc, #208]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa8:	4a32      	ldr	r2, [pc, #200]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000aaa:	f043 0310 	orr.w	r3, r3, #16
 8000aae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab2:	4b30      	ldr	r3, [pc, #192]	; (8000b74 <MX_GPIO_Init+0x19c>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab8:	f003 0310 	and.w	r3, r3, #16
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	482c      	ldr	r0, [pc, #176]	; (8000b78 <MX_GPIO_Init+0x1a0>)
 8000ac6:	f001 fc05 	bl	80022d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad0:	482a      	ldr	r0, [pc, #168]	; (8000b7c <MX_GPIO_Init+0x1a4>)
 8000ad2:	f001 fbff 	bl	80022d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2102      	movs	r1, #2
 8000ada:	4829      	ldr	r0, [pc, #164]	; (8000b80 <MX_GPIO_Init+0x1a8>)
 8000adc:	f001 fbfa 	bl	80022d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ae0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	4823      	ldr	r0, [pc, #140]	; (8000b84 <MX_GPIO_Init+0x1ac>)
 8000af6:	f001 fa3d 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000afa:	2301      	movs	r3, #1
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4819      	ldr	r0, [pc, #100]	; (8000b78 <MX_GPIO_Init+0x1a0>)
 8000b12:	f001 fa2f 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4813      	ldr	r0, [pc, #76]	; (8000b7c <MX_GPIO_Init+0x1a4>)
 8000b30:	f001 fa20 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b34:	2380      	movs	r3, #128	; 0x80
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b38:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	4619      	mov	r1, r3
 8000b48:	480f      	ldr	r0, [pc, #60]	; (8000b88 <MX_GPIO_Init+0x1b0>)
 8000b4a:	f001 fa13 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b52:	2301      	movs	r3, #1
 8000b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	4619      	mov	r1, r3
 8000b64:	4806      	ldr	r0, [pc, #24]	; (8000b80 <MX_GPIO_Init+0x1a8>)
 8000b66:	f001 fa05 	bl	8001f74 <HAL_GPIO_Init>

}
 8000b6a:	bf00      	nop
 8000b6c:	3730      	adds	r7, #48	; 0x30
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	58024400 	.word	0x58024400
 8000b78:	58020400 	.word	0x58020400
 8000b7c:	58020c00 	.word	0x58020c00
 8000b80:	58021000 	.word	0x58021000
 8000b84:	58020800 	.word	0x58020800
 8000b88:	58021800 	.word	0x58021800

08000b8c <__io_putchar>:
  * @param  None
  * @retval None
  */

PUTCHAR_PROTOTYPE
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the LPUART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000b94:	1d39      	adds	r1, r7, #4
 8000b96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	4803      	ldr	r0, [pc, #12]	; (8000bac <__io_putchar+0x20>)
 8000b9e:	f006 fa53 	bl	8007048 <HAL_UART_Transmit>

  return ch;
 8000ba2:	687b      	ldr	r3, [r7, #4]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	24000164 	.word	0x24000164

08000bb0 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_UART_Receive(&huart3, &ch, 1, 0xFFFF);
 8000bb6:	1df9      	adds	r1, r7, #7
 8000bb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <__io_getchar+0x20>)
 8000bc0:	f006 fad8 	bl	8007174 <HAL_UART_Receive>

	return ch;
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	24000164 	.word	0x24000164

08000bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd8:	b672      	cpsid	i
}
 8000bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <Error_Handler+0x8>
	...

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_MspInit+0x30>)
 8000be8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bec:	4a08      	ldr	r2, [pc, #32]	; (8000c10 <HAL_MspInit+0x30>)
 8000bee:	f043 0302 	orr.w	r3, r3, #2
 8000bf2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_MspInit+0x30>)
 8000bf8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bfc:	f003 0302 	and.w	r3, r3, #2
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	58024400 	.word	0x58024400

08000c14 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08e      	sub	sp, #56	; 0x38
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a59      	ldr	r2, [pc, #356]	; (8000d98 <HAL_ETH_MspInit+0x184>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	f040 80ab 	bne.w	8000d8e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000c38:	4b58      	ldr	r3, [pc, #352]	; (8000d9c <HAL_ETH_MspInit+0x188>)
 8000c3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c3e:	4a57      	ldr	r2, [pc, #348]	; (8000d9c <HAL_ETH_MspInit+0x188>)
 8000c40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c44:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c48:	4b54      	ldr	r3, [pc, #336]	; (8000d9c <HAL_ETH_MspInit+0x188>)
 8000c4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c52:	623b      	str	r3, [r7, #32]
 8000c54:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000c56:	4b51      	ldr	r3, [pc, #324]	; (8000d9c <HAL_ETH_MspInit+0x188>)
 8000c58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c5c:	4a4f      	ldr	r2, [pc, #316]	; (8000d9c <HAL_ETH_MspInit+0x188>)
 8000c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c62:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c66:	4b4d      	ldr	r3, [pc, #308]	; (8000d9c <HAL_ETH_MspInit+0x188>)
 8000c68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c70:	61fb      	str	r3, [r7, #28]
 8000c72:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000c74:	4b49      	ldr	r3, [pc, #292]	; (8000d9c <HAL_ETH_MspInit+0x188>)
 8000c76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c7a:	4a48      	ldr	r2, [pc, #288]	; (8000d9c <HAL_ETH_MspInit+0x188>)
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c80:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c84:	4b45      	ldr	r3, [pc, #276]	; (8000d9c <HAL_ETH_MspInit+0x188>)
 8000c86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8e:	61bb      	str	r3, [r7, #24]
 8000c90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c92:	4b42      	ldr	r3, [pc, #264]	; (8000d9c <HAL_ETH_MspInit+0x188>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c98:	4a40      	ldr	r2, [pc, #256]	; (8000d9c <HAL_ETH_MspInit+0x188>)
 8000c9a:	f043 0304 	orr.w	r3, r3, #4
 8000c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca2:	4b3e      	ldr	r3, [pc, #248]	; (8000d9c <HAL_ETH_MspInit+0x188>)
 8000ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca8:	f003 0304 	and.w	r3, r3, #4
 8000cac:	617b      	str	r3, [r7, #20]
 8000cae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb0:	4b3a      	ldr	r3, [pc, #232]	; (8000d9c <HAL_ETH_MspInit+0x188>)
 8000cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb6:	4a39      	ldr	r2, [pc, #228]	; (8000d9c <HAL_ETH_MspInit+0x188>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc0:	4b36      	ldr	r3, [pc, #216]	; (8000d9c <HAL_ETH_MspInit+0x188>)
 8000cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	4b33      	ldr	r3, [pc, #204]	; (8000d9c <HAL_ETH_MspInit+0x188>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd4:	4a31      	ldr	r2, [pc, #196]	; (8000d9c <HAL_ETH_MspInit+0x188>)
 8000cd6:	f043 0302 	orr.w	r3, r3, #2
 8000cda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cde:	4b2f      	ldr	r3, [pc, #188]	; (8000d9c <HAL_ETH_MspInit+0x188>)
 8000ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce4:	f003 0302 	and.w	r3, r3, #2
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cec:	4b2b      	ldr	r3, [pc, #172]	; (8000d9c <HAL_ETH_MspInit+0x188>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf2:	4a2a      	ldr	r2, [pc, #168]	; (8000d9c <HAL_ETH_MspInit+0x188>)
 8000cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cfc:	4b27      	ldr	r3, [pc, #156]	; (8000d9c <HAL_ETH_MspInit+0x188>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000d0a:	2332      	movs	r3, #50	; 0x32
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d1a:	230b      	movs	r3, #11
 8000d1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d22:	4619      	mov	r1, r3
 8000d24:	481e      	ldr	r0, [pc, #120]	; (8000da0 <HAL_ETH_MspInit+0x18c>)
 8000d26:	f001 f925 	bl	8001f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000d2a:	2386      	movs	r3, #134	; 0x86
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d3a:	230b      	movs	r3, #11
 8000d3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d42:	4619      	mov	r1, r3
 8000d44:	4817      	ldr	r0, [pc, #92]	; (8000da4 <HAL_ETH_MspInit+0x190>)
 8000d46:	f001 f915 	bl	8001f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d5c:	230b      	movs	r3, #11
 8000d5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d64:	4619      	mov	r1, r3
 8000d66:	4810      	ldr	r0, [pc, #64]	; (8000da8 <HAL_ETH_MspInit+0x194>)
 8000d68:	f001 f904 	bl	8001f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d6c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d7e:	230b      	movs	r3, #11
 8000d80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d86:	4619      	mov	r1, r3
 8000d88:	4808      	ldr	r0, [pc, #32]	; (8000dac <HAL_ETH_MspInit+0x198>)
 8000d8a:	f001 f8f3 	bl	8001f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d8e:	bf00      	nop
 8000d90:	3738      	adds	r7, #56	; 0x38
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40028000 	.word	0x40028000
 8000d9c:	58024400 	.word	0x58024400
 8000da0:	58020800 	.word	0x58020800
 8000da4:	58020000 	.word	0x58020000
 8000da8:	58020400 	.word	0x58020400
 8000dac:	58021800 	.word	0x58021800

08000db0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b0ba      	sub	sp, #232	; 0xe8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc8:	f107 0318 	add.w	r3, r7, #24
 8000dcc:	22bc      	movs	r2, #188	; 0xbc
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f008 fbb3 	bl	800953c <memset>
  if(hsd->Instance==SDMMC2)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a49      	ldr	r2, [pc, #292]	; (8000f00 <HAL_SD_MspInit+0x150>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	f040 808b 	bne.w	8000ef8 <HAL_SD_MspInit+0x148>
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000de2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dec:	f107 0318 	add.w	r3, r7, #24
 8000df0:	4618      	mov	r0, r3
 8000df2:	f002 fbd3 	bl	800359c <HAL_RCCEx_PeriphCLKConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8000dfc:	f7ff feea 	bl	8000bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8000e00:	4b40      	ldr	r3, [pc, #256]	; (8000f04 <HAL_SD_MspInit+0x154>)
 8000e02:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000e06:	4a3f      	ldr	r2, [pc, #252]	; (8000f04 <HAL_SD_MspInit+0x154>)
 8000e08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e0c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000e10:	4b3c      	ldr	r3, [pc, #240]	; (8000f04 <HAL_SD_MspInit+0x154>)
 8000e12:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000e16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	4b39      	ldr	r3, [pc, #228]	; (8000f04 <HAL_SD_MspInit+0x154>)
 8000e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e24:	4a37      	ldr	r2, [pc, #220]	; (8000f04 <HAL_SD_MspInit+0x154>)
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2e:	4b35      	ldr	r3, [pc, #212]	; (8000f04 <HAL_SD_MspInit+0x154>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3c:	4b31      	ldr	r3, [pc, #196]	; (8000f04 <HAL_SD_MspInit+0x154>)
 8000e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e42:	4a30      	ldr	r2, [pc, #192]	; (8000f04 <HAL_SD_MspInit+0x154>)
 8000e44:	f043 0302 	orr.w	r3, r3, #2
 8000e48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e4c:	4b2d      	ldr	r3, [pc, #180]	; (8000f04 <HAL_SD_MspInit+0x154>)
 8000e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e5a:	4b2a      	ldr	r3, [pc, #168]	; (8000f04 <HAL_SD_MspInit+0x154>)
 8000e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e60:	4a28      	ldr	r2, [pc, #160]	; (8000f04 <HAL_SD_MspInit+0x154>)
 8000e62:	f043 0308 	orr.w	r3, r3, #8
 8000e66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e6a:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <HAL_SD_MspInit+0x154>)
 8000e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e70:	f003 0308 	and.w	r3, r3, #8
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	68bb      	ldr	r3, [r7, #8]
    PB15     ------> SDMMC2_D1
    PD6     ------> SDMMC2_CK
    PB3 (JTDO/TRACESWO)     ------> SDMMC2_D2
    PB4 (NJTRST)     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 8000e90:	2309      	movs	r3, #9
 8000e92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	481a      	ldr	r0, [pc, #104]	; (8000f08 <HAL_SD_MspInit+0x158>)
 8000e9e:	f001 f869 	bl	8001f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4;
 8000ea2:	f24c 0318 	movw	r3, #49176	; 0xc018
 8000ea6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 8000ebc:	2309      	movs	r3, #9
 8000ebe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4810      	ldr	r0, [pc, #64]	; (8000f0c <HAL_SD_MspInit+0x15c>)
 8000eca:	f001 f853 	bl	8001f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ece:	2340      	movs	r3, #64	; 0x40
 8000ed0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDIO2;
 8000ee6:	230b      	movs	r3, #11
 8000ee8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4807      	ldr	r0, [pc, #28]	; (8000f10 <HAL_SD_MspInit+0x160>)
 8000ef4:	f001 f83e 	bl	8001f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8000ef8:	bf00      	nop
 8000efa:	37e8      	adds	r7, #232	; 0xe8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	48022400 	.word	0x48022400
 8000f04:	58024400 	.word	0x58024400
 8000f08:	58020000 	.word	0x58020000
 8000f0c:	58020400 	.word	0x58020400
 8000f10:	58020c00 	.word	0x58020c00

08000f14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b0b8      	sub	sp, #224	; 0xe0
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	22bc      	movs	r2, #188	; 0xbc
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f008 fb01 	bl	800953c <memset>
  if(huart->Instance==USART3)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a25      	ldr	r2, [pc, #148]	; (8000fd4 <HAL_UART_MspInit+0xc0>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d142      	bne.n	8000fca <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f44:	2302      	movs	r3, #2
 8000f46:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f4e:	f107 0310 	add.w	r3, r7, #16
 8000f52:	4618      	mov	r0, r3
 8000f54:	f002 fb22 	bl	800359c <HAL_RCCEx_PeriphCLKConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f5e:	f7ff fe39 	bl	8000bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f62:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <HAL_UART_MspInit+0xc4>)
 8000f64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f68:	4a1b      	ldr	r2, [pc, #108]	; (8000fd8 <HAL_UART_MspInit+0xc4>)
 8000f6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f72:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <HAL_UART_MspInit+0xc4>)
 8000f74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <HAL_UART_MspInit+0xc4>)
 8000f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f86:	4a14      	ldr	r2, [pc, #80]	; (8000fd8 <HAL_UART_MspInit+0xc4>)
 8000f88:	f043 0308 	orr.w	r3, r3, #8
 8000f8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <HAL_UART_MspInit+0xc4>)
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f96:	f003 0308 	and.w	r3, r3, #8
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fa2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fb8:	2307      	movs	r3, #7
 8000fba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fbe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4805      	ldr	r0, [pc, #20]	; (8000fdc <HAL_UART_MspInit+0xc8>)
 8000fc6:	f000 ffd5 	bl	8001f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fca:	bf00      	nop
 8000fcc:	37e0      	adds	r7, #224	; 0xe0
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40004800 	.word	0x40004800
 8000fd8:	58024400 	.word	0x58024400
 8000fdc:	58020c00 	.word	0x58020c00

08000fe0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b0b8      	sub	sp, #224	; 0xe0
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ff8:	f107 0310 	add.w	r3, r7, #16
 8000ffc:	22bc      	movs	r2, #188	; 0xbc
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f008 fa9b 	bl	800953c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a2f      	ldr	r2, [pc, #188]	; (80010c8 <HAL_PCD_MspInit+0xe8>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d156      	bne.n	80010be <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001010:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001014:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001016:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800101a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800101e:	f107 0310 	add.w	r3, r7, #16
 8001022:	4618      	mov	r0, r3
 8001024:	f002 faba 	bl	800359c <HAL_RCCEx_PeriphCLKConfig>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800102e:	f7ff fdd1 	bl	8000bd4 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001032:	f001 faeb 	bl	800260c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	4b25      	ldr	r3, [pc, #148]	; (80010cc <HAL_PCD_MspInit+0xec>)
 8001038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103c:	4a23      	ldr	r2, [pc, #140]	; (80010cc <HAL_PCD_MspInit+0xec>)
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001046:	4b21      	ldr	r3, [pc, #132]	; (80010cc <HAL_PCD_MspInit+0xec>)
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001054:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001058:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800106e:	230a      	movs	r3, #10
 8001070:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001078:	4619      	mov	r1, r3
 800107a:	4815      	ldr	r0, [pc, #84]	; (80010d0 <HAL_PCD_MspInit+0xf0>)
 800107c:	f000 ff7a 	bl	8001f74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001080:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001084:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001088:	2300      	movs	r3, #0
 800108a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001098:	4619      	mov	r1, r3
 800109a:	480d      	ldr	r0, [pc, #52]	; (80010d0 <HAL_PCD_MspInit+0xf0>)
 800109c:	f000 ff6a 	bl	8001f74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010a0:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_PCD_MspInit+0xec>)
 80010a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010a6:	4a09      	ldr	r2, [pc, #36]	; (80010cc <HAL_PCD_MspInit+0xec>)
 80010a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80010ac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_PCD_MspInit+0xec>)
 80010b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80010be:	bf00      	nop
 80010c0:	37e0      	adds	r7, #224	; 0xe0
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40080000 	.word	0x40080000
 80010cc:	58024400 	.word	0x58024400
 80010d0:	58020000 	.word	0x58020000

080010d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <NMI_Handler+0x4>

080010da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010de:	e7fe      	b.n	80010de <HardFault_Handler+0x4>

080010e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <MemManage_Handler+0x4>

080010e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ea:	e7fe      	b.n	80010ea <BusFault_Handler+0x4>

080010ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <UsageFault_Handler+0x4>

080010f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001120:	f000 f9ca 	bl	80014b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}

08001128 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	e00a      	b.n	8001150 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800113a:	f7ff fd39 	bl	8000bb0 <__io_getchar>
 800113e:	4601      	mov	r1, r0
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	1c5a      	adds	r2, r3, #1
 8001144:	60ba      	str	r2, [r7, #8]
 8001146:	b2ca      	uxtb	r2, r1
 8001148:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	3301      	adds	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	697a      	ldr	r2, [r7, #20]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	429a      	cmp	r2, r3
 8001156:	dbf0      	blt.n	800113a <_read+0x12>
	}

return len;
 8001158:	687b      	ldr	r3, [r7, #4]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	af00      	add	r7, sp, #0
 8001168:	60f8      	str	r0, [r7, #12]
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	e009      	b.n	8001188 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	1c5a      	adds	r2, r3, #1
 8001178:	60ba      	str	r2, [r7, #8]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fd05 	bl	8000b8c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	3301      	adds	r3, #1
 8001186:	617b      	str	r3, [r7, #20]
 8001188:	697a      	ldr	r2, [r7, #20]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	429a      	cmp	r2, r3
 800118e:	dbf1      	blt.n	8001174 <_write+0x12>
	}
	return len;
 8001190:	687b      	ldr	r3, [r7, #4]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <_close>:

int _close(int file)
{
 800119a:	b480      	push	{r7}
 800119c:	b083      	sub	sp, #12
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
	return -1;
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011c2:	605a      	str	r2, [r3, #4]
	return 0;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <_isatty>:

int _isatty(int file)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
	return 1;
 80011da:	2301      	movs	r3, #1
}
 80011dc:	4618      	mov	r0, r3
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
	return 0;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800120c:	4a14      	ldr	r2, [pc, #80]	; (8001260 <_sbrk+0x5c>)
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <_sbrk+0x60>)
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001218:	4b13      	ldr	r3, [pc, #76]	; (8001268 <_sbrk+0x64>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d102      	bne.n	8001226 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <_sbrk+0x64>)
 8001222:	4a12      	ldr	r2, [pc, #72]	; (800126c <_sbrk+0x68>)
 8001224:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <_sbrk+0x64>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	429a      	cmp	r2, r3
 8001232:	d207      	bcs.n	8001244 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001234:	f008 f958 	bl	80094e8 <__errno>
 8001238:	4603      	mov	r3, r0
 800123a:	220c      	movs	r2, #12
 800123c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800123e:	f04f 33ff 	mov.w	r3, #4294967295
 8001242:	e009      	b.n	8001258 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <_sbrk+0x64>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800124a:	4b07      	ldr	r3, [pc, #28]	; (8001268 <_sbrk+0x64>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <_sbrk+0x64>)
 8001254:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001256:	68fb      	ldr	r3, [r7, #12]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	24080000 	.word	0x24080000
 8001264:	00000400 	.word	0x00000400
 8001268:	24000158 	.word	0x24000158
 800126c:	24000748 	.word	0x24000748

08001270 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001274:	4b37      	ldr	r3, [pc, #220]	; (8001354 <SystemInit+0xe4>)
 8001276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800127a:	4a36      	ldr	r2, [pc, #216]	; (8001354 <SystemInit+0xe4>)
 800127c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001280:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001284:	4b34      	ldr	r3, [pc, #208]	; (8001358 <SystemInit+0xe8>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 030f 	and.w	r3, r3, #15
 800128c:	2b06      	cmp	r3, #6
 800128e:	d807      	bhi.n	80012a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001290:	4b31      	ldr	r3, [pc, #196]	; (8001358 <SystemInit+0xe8>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f023 030f 	bic.w	r3, r3, #15
 8001298:	4a2f      	ldr	r2, [pc, #188]	; (8001358 <SystemInit+0xe8>)
 800129a:	f043 0307 	orr.w	r3, r3, #7
 800129e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012a0:	4b2e      	ldr	r3, [pc, #184]	; (800135c <SystemInit+0xec>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a2d      	ldr	r2, [pc, #180]	; (800135c <SystemInit+0xec>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012ac:	4b2b      	ldr	r3, [pc, #172]	; (800135c <SystemInit+0xec>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012b2:	4b2a      	ldr	r3, [pc, #168]	; (800135c <SystemInit+0xec>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	4929      	ldr	r1, [pc, #164]	; (800135c <SystemInit+0xec>)
 80012b8:	4b29      	ldr	r3, [pc, #164]	; (8001360 <SystemInit+0xf0>)
 80012ba:	4013      	ands	r3, r2
 80012bc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012be:	4b26      	ldr	r3, [pc, #152]	; (8001358 <SystemInit+0xe8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d007      	beq.n	80012da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012ca:	4b23      	ldr	r3, [pc, #140]	; (8001358 <SystemInit+0xe8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f023 030f 	bic.w	r3, r3, #15
 80012d2:	4a21      	ldr	r2, [pc, #132]	; (8001358 <SystemInit+0xe8>)
 80012d4:	f043 0307 	orr.w	r3, r3, #7
 80012d8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <SystemInit+0xec>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80012e0:	4b1e      	ldr	r3, [pc, #120]	; (800135c <SystemInit+0xec>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80012e6:	4b1d      	ldr	r3, [pc, #116]	; (800135c <SystemInit+0xec>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80012ec:	4b1b      	ldr	r3, [pc, #108]	; (800135c <SystemInit+0xec>)
 80012ee:	4a1d      	ldr	r2, [pc, #116]	; (8001364 <SystemInit+0xf4>)
 80012f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80012f2:	4b1a      	ldr	r3, [pc, #104]	; (800135c <SystemInit+0xec>)
 80012f4:	4a1c      	ldr	r2, [pc, #112]	; (8001368 <SystemInit+0xf8>)
 80012f6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012f8:	4b18      	ldr	r3, [pc, #96]	; (800135c <SystemInit+0xec>)
 80012fa:	4a1c      	ldr	r2, [pc, #112]	; (800136c <SystemInit+0xfc>)
 80012fc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012fe:	4b17      	ldr	r3, [pc, #92]	; (800135c <SystemInit+0xec>)
 8001300:	2200      	movs	r2, #0
 8001302:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001304:	4b15      	ldr	r3, [pc, #84]	; (800135c <SystemInit+0xec>)
 8001306:	4a19      	ldr	r2, [pc, #100]	; (800136c <SystemInit+0xfc>)
 8001308:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800130a:	4b14      	ldr	r3, [pc, #80]	; (800135c <SystemInit+0xec>)
 800130c:	2200      	movs	r2, #0
 800130e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <SystemInit+0xec>)
 8001312:	4a16      	ldr	r2, [pc, #88]	; (800136c <SystemInit+0xfc>)
 8001314:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <SystemInit+0xec>)
 8001318:	2200      	movs	r2, #0
 800131a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <SystemInit+0xec>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0e      	ldr	r2, [pc, #56]	; (800135c <SystemInit+0xec>)
 8001322:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001326:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <SystemInit+0xec>)
 800132a:	2200      	movs	r2, #0
 800132c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <SystemInit+0x100>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <SystemInit+0x104>)
 8001334:	4013      	ands	r3, r2
 8001336:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800133a:	d202      	bcs.n	8001342 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <SystemInit+0x108>)
 800133e:	2201      	movs	r2, #1
 8001340:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <SystemInit+0x10c>)
 8001344:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001348:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00
 8001358:	52002000 	.word	0x52002000
 800135c:	58024400 	.word	0x58024400
 8001360:	eaf6ed7f 	.word	0xeaf6ed7f
 8001364:	02020200 	.word	0x02020200
 8001368:	01ff0000 	.word	0x01ff0000
 800136c:	01010280 	.word	0x01010280
 8001370:	5c001000 	.word	0x5c001000
 8001374:	ffff0000 	.word	0xffff0000
 8001378:	51008108 	.word	0x51008108
 800137c:	52004000 	.word	0x52004000

08001380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001380:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001384:	f7ff ff74 	bl	8001270 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001388:	480c      	ldr	r0, [pc, #48]	; (80013bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800138a:	490d      	ldr	r1, [pc, #52]	; (80013c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800138c:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001390:	e002      	b.n	8001398 <LoopCopyDataInit>

08001392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001396:	3304      	adds	r3, #4

08001398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800139c:	d3f9      	bcc.n	8001392 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139e:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013a0:	4c0a      	ldr	r4, [pc, #40]	; (80013cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a4:	e001      	b.n	80013aa <LoopFillZerobss>

080013a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a8:	3204      	adds	r2, #4

080013aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ac:	d3fb      	bcc.n	80013a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ae:	f008 f8a1 	bl	80094f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013b2:	f7ff f961 	bl	8000678 <main>
  bx  lr
 80013b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013b8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80013bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013c0:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80013c4:	0800a4f4 	.word	0x0800a4f4
  ldr r2, =_sbss
 80013c8:	24000134 	.word	0x24000134
  ldr r4, =_ebss
 80013cc:	24000748 	.word	0x24000748

080013d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013d0:	e7fe      	b.n	80013d0 <ADC3_IRQHandler>
	...

080013d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013da:	2003      	movs	r0, #3
 80013dc:	f000 f982 	bl	80016e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013e0:	f001 ff06 	bl	80031f0 <HAL_RCC_GetSysClockFreq>
 80013e4:	4602      	mov	r2, r0
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <HAL_Init+0x68>)
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	0a1b      	lsrs	r3, r3, #8
 80013ec:	f003 030f 	and.w	r3, r3, #15
 80013f0:	4913      	ldr	r1, [pc, #76]	; (8001440 <HAL_Init+0x6c>)
 80013f2:	5ccb      	ldrb	r3, [r1, r3]
 80013f4:	f003 031f 	and.w	r3, r3, #31
 80013f8:	fa22 f303 	lsr.w	r3, r2, r3
 80013fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013fe:	4b0f      	ldr	r3, [pc, #60]	; (800143c <HAL_Init+0x68>)
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	4a0e      	ldr	r2, [pc, #56]	; (8001440 <HAL_Init+0x6c>)
 8001408:	5cd3      	ldrb	r3, [r2, r3]
 800140a:	f003 031f 	and.w	r3, r3, #31
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	fa22 f303 	lsr.w	r3, r2, r3
 8001414:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <HAL_Init+0x70>)
 8001416:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001418:	4a0b      	ldr	r2, [pc, #44]	; (8001448 <HAL_Init+0x74>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800141e:	2000      	movs	r0, #0
 8001420:	f000 f814 	bl	800144c <HAL_InitTick>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e002      	b.n	8001434 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800142e:	f7ff fbd7 	bl	8000be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	58024400 	.word	0x58024400
 8001440:	0800a414 	.word	0x0800a414
 8001444:	24000004 	.word	0x24000004
 8001448:	24000000 	.word	0x24000000

0800144c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <HAL_InitTick+0x60>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e021      	b.n	80014a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <HAL_InitTick+0x64>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <HAL_InitTick+0x60>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	4619      	mov	r1, r3
 800146a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001472:	fbb2 f3f3 	udiv	r3, r2, r3
 8001476:	4618      	mov	r0, r3
 8001478:	f000 f959 	bl	800172e <HAL_SYSTICK_Config>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e00e      	b.n	80014a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b0f      	cmp	r3, #15
 800148a:	d80a      	bhi.n	80014a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800148c:	2200      	movs	r2, #0
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	f04f 30ff 	mov.w	r0, #4294967295
 8001494:	f000 f931 	bl	80016fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001498:	4a06      	ldr	r2, [pc, #24]	; (80014b4 <HAL_InitTick+0x68>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	e000      	b.n	80014a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	2400000c 	.word	0x2400000c
 80014b0:	24000000 	.word	0x24000000
 80014b4:	24000008 	.word	0x24000008

080014b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_IncTick+0x20>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_IncTick+0x24>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4413      	add	r3, r2
 80014c8:	4a04      	ldr	r2, [pc, #16]	; (80014dc <HAL_IncTick+0x24>)
 80014ca:	6013      	str	r3, [r2, #0]
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	2400000c 	.word	0x2400000c
 80014dc:	24000734 	.word	0x24000734

080014e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return uwTick;
 80014e4:	4b03      	ldr	r3, [pc, #12]	; (80014f4 <HAL_GetTick+0x14>)
 80014e6:	681b      	ldr	r3, [r3, #0]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	24000734 	.word	0x24000734

080014f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001500:	f7ff ffee 	bl	80014e0 <HAL_GetTick>
 8001504:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001510:	d005      	beq.n	800151e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <HAL_Delay+0x44>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	461a      	mov	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4413      	add	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800151e:	bf00      	nop
 8001520:	f7ff ffde 	bl	80014e0 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	429a      	cmp	r2, r3
 800152e:	d8f7      	bhi.n	8001520 <HAL_Delay+0x28>
  {
  }
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	2400000c 	.word	0x2400000c

08001540 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <HAL_GetREVID+0x14>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	0c1b      	lsrs	r3, r3, #16
}
 800154a:	4618      	mov	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	5c001000 	.word	0x5c001000

08001558 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001568:	4904      	ldr	r1, [pc, #16]	; (800157c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4313      	orrs	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	58000400 	.word	0x58000400

08001580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800159c:	4013      	ands	r3, r2
 800159e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <__NVIC_SetPriorityGrouping+0x44>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ae:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <__NVIC_SetPriorityGrouping+0x40>)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	60d3      	str	r3, [r2, #12]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00
 80015c4:	05fa0000 	.word	0x05fa0000

080015c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <__NVIC_GetPriorityGrouping+0x18>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	f003 0307 	and.w	r3, r3, #7
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	6039      	str	r1, [r7, #0]
 80015ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	db0a      	blt.n	800160e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	490c      	ldr	r1, [pc, #48]	; (8001630 <__NVIC_SetPriority+0x4c>)
 80015fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001602:	0112      	lsls	r2, r2, #4
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	440b      	add	r3, r1
 8001608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800160c:	e00a      	b.n	8001624 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4908      	ldr	r1, [pc, #32]	; (8001634 <__NVIC_SetPriority+0x50>)
 8001614:	88fb      	ldrh	r3, [r7, #6]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	3b04      	subs	r3, #4
 800161c:	0112      	lsls	r2, r2, #4
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	440b      	add	r3, r1
 8001622:	761a      	strb	r2, [r3, #24]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000e100 	.word	0xe000e100
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001638:	b480      	push	{r7}
 800163a:	b089      	sub	sp, #36	; 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f1c3 0307 	rsb	r3, r3, #7
 8001652:	2b04      	cmp	r3, #4
 8001654:	bf28      	it	cs
 8001656:	2304      	movcs	r3, #4
 8001658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3304      	adds	r3, #4
 800165e:	2b06      	cmp	r3, #6
 8001660:	d902      	bls.n	8001668 <NVIC_EncodePriority+0x30>
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3b03      	subs	r3, #3
 8001666:	e000      	b.n	800166a <NVIC_EncodePriority+0x32>
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	f04f 32ff 	mov.w	r2, #4294967295
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43da      	mvns	r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	401a      	ands	r2, r3
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001680:	f04f 31ff 	mov.w	r1, #4294967295
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	43d9      	mvns	r1, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	4313      	orrs	r3, r2
         );
}
 8001692:	4618      	mov	r0, r3
 8001694:	3724      	adds	r7, #36	; 0x24
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b0:	d301      	bcc.n	80016b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00f      	b.n	80016d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b6:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <SysTick_Config+0x40>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016be:	210f      	movs	r1, #15
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f7ff ff8e 	bl	80015e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <SysTick_Config+0x40>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ce:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <SysTick_Config+0x40>)
 80016d0:	2207      	movs	r2, #7
 80016d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	e000e010 	.word	0xe000e010

080016e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff47 	bl	8001580 <__NVIC_SetPriorityGrouping>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
 8001706:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001708:	f7ff ff5e 	bl	80015c8 <__NVIC_GetPriorityGrouping>
 800170c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	6978      	ldr	r0, [r7, #20]
 8001714:	f7ff ff90 	bl	8001638 <NVIC_EncodePriority>
 8001718:	4602      	mov	r2, r0
 800171a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff5f 	bl	80015e4 <__NVIC_SetPriority>
}
 8001726:	bf00      	nop
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ffb2 	bl	80016a0 <SysTick_Config>
 800173c:	4603      	mov	r3, r0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e0c6      	b.n	80018e8 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800175e:	2b00      	cmp	r3, #0
 8001760:	d102      	bne.n	8001768 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff fa56 	bl	8000c14 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2223      	movs	r2, #35	; 0x23
 800176c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176e:	4b60      	ldr	r3, [pc, #384]	; (80018f0 <HAL_ETH_Init+0x1a8>)
 8001770:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001774:	4a5e      	ldr	r2, [pc, #376]	; (80018f0 <HAL_ETH_Init+0x1a8>)
 8001776:	f043 0302 	orr.w	r3, r3, #2
 800177a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800177e:	4b5c      	ldr	r3, [pc, #368]	; (80018f0 <HAL_ETH_Init+0x1a8>)
 8001780:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	7a1b      	ldrb	r3, [r3, #8]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d103      	bne.n	800179c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001794:	2000      	movs	r0, #0
 8001796:	f7ff fedf 	bl	8001558 <HAL_SYSCFG_ETHInterfaceSelect>
 800179a:	e003      	b.n	80017a4 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800179c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80017a0:	f7ff feda 	bl	8001558 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0201 	orr.w	r2, r2, #1
 80017b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017bc:	f7ff fe90 	bl	80014e0 <HAL_GetTick>
 80017c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80017c2:	e00f      	b.n	80017e4 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80017c4:	f7ff fe8c 	bl	80014e0 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017d2:	d907      	bls.n	80017e4 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2204      	movs	r2, #4
 80017d8:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	22e0      	movs	r2, #224	; 0xe0
 80017de:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e081      	b.n	80018e8 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1e6      	bne.n	80017c4 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 fac0 	bl	8001d7c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80017fc:	f001 fe72 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 8001800:	4603      	mov	r3, r0
 8001802:	4a3c      	ldr	r2, [pc, #240]	; (80018f4 <HAL_ETH_Init+0x1ac>)
 8001804:	fba2 2303 	umull	r2, r3, r2, r3
 8001808:	0c9a      	lsrs	r2, r3, #18
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	3a01      	subs	r2, #1
 8001810:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 fa13 	bl	8001c40 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001830:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001834:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d007      	beq.n	8001852 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	22e0      	movs	r2, #224	; 0xe0
 800184c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e04a      	b.n	80018e8 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	f241 1308 	movw	r3, #4360	; 0x1108
 800185a:	4413      	add	r3, r2
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	4b26      	ldr	r3, [pc, #152]	; (80018f8 <HAL_ETH_Init+0x1b0>)
 8001860:	4013      	ands	r3, r2
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6952      	ldr	r2, [r2, #20]
 8001866:	0052      	lsls	r2, r2, #1
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	6809      	ldr	r1, [r1, #0]
 800186c:	431a      	orrs	r2, r3
 800186e:	f241 1308 	movw	r3, #4360	; 0x1108
 8001872:	440b      	add	r3, r1
 8001874:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 fad8 	bl	8001e2c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 fb1c 	bl	8001eba <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	3305      	adds	r3, #5
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	021a      	lsls	r2, r3, #8
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	3304      	adds	r3, #4
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	4619      	mov	r1, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	3303      	adds	r3, #3
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	061a      	lsls	r2, r3, #24
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	3302      	adds	r3, #2
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	041b      	lsls	r3, r3, #16
 80018b4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	3301      	adds	r3, #1
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018c0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018ce:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018d0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2210      	movs	r2, #16
 80018de:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2210      	movs	r2, #16
 80018e4:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	58024400 	.word	0x58024400
 80018f4:	431bde83 	.word	0x431bde83
 80018f8:	ffff8001 	.word	0xffff8001

080018fc <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800190e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	791b      	ldrb	r3, [r3, #4]
 8001914:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001916:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	7b1b      	ldrb	r3, [r3, #12]
 800191c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800191e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	7b5b      	ldrb	r3, [r3, #13]
 8001924:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001926:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	7b9b      	ldrb	r3, [r3, #14]
 800192c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800192e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	7bdb      	ldrb	r3, [r3, #15]
 8001934:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001936:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	7c12      	ldrb	r2, [r2, #16]
 800193c:	2a00      	cmp	r2, #0
 800193e:	d102      	bne.n	8001946 <ETH_SetMACConfig+0x4a>
 8001940:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001944:	e000      	b.n	8001948 <ETH_SetMACConfig+0x4c>
 8001946:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001948:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	7c52      	ldrb	r2, [r2, #17]
 800194e:	2a00      	cmp	r2, #0
 8001950:	d102      	bne.n	8001958 <ETH_SetMACConfig+0x5c>
 8001952:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001956:	e000      	b.n	800195a <ETH_SetMACConfig+0x5e>
 8001958:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800195a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	7c9b      	ldrb	r3, [r3, #18]
 8001960:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001962:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001968:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800196e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	7f1b      	ldrb	r3, [r3, #28]
 8001974:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001976:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	7f5b      	ldrb	r3, [r3, #29]
 800197c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800197e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	7f92      	ldrb	r2, [r2, #30]
 8001984:	2a00      	cmp	r2, #0
 8001986:	d102      	bne.n	800198e <ETH_SetMACConfig+0x92>
 8001988:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800198c:	e000      	b.n	8001990 <ETH_SetMACConfig+0x94>
 800198e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001990:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	7fdb      	ldrb	r3, [r3, #31]
 8001996:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001998:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	f892 2020 	ldrb.w	r2, [r2, #32]
 80019a0:	2a00      	cmp	r2, #0
 80019a2:	d102      	bne.n	80019aa <ETH_SetMACConfig+0xae>
 80019a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019a8:	e000      	b.n	80019ac <ETH_SetMACConfig+0xb0>
 80019aa:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80019ac:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80019b2:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80019ba:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80019bc:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80019c2:	4313      	orrs	r3, r2
 80019c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4b56      	ldr	r3, [pc, #344]	; (8001b28 <ETH_SetMACConfig+0x22c>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	68f9      	ldr	r1, [r7, #12]
 80019d6:	430b      	orrs	r3, r1
 80019d8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019de:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019e6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80019e8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019f0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80019f2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80019fa:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80019fc:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001a04:	2a00      	cmp	r2, #0
 8001a06:	d102      	bne.n	8001a0e <ETH_SetMACConfig+0x112>
 8001a08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a0c:	e000      	b.n	8001a10 <ETH_SetMACConfig+0x114>
 8001a0e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001a10:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001a16:	4313      	orrs	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	4b42      	ldr	r3, [pc, #264]	; (8001b2c <ETH_SetMACConfig+0x230>)
 8001a22:	4013      	ands	r3, r2
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	68f9      	ldr	r1, [r7, #12]
 8001a2a:	430b      	orrs	r3, r1
 8001a2c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a34:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	4b3a      	ldr	r3, [pc, #232]	; (8001b30 <ETH_SetMACConfig+0x234>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	68f9      	ldr	r1, [r7, #12]
 8001a4e:	430b      	orrs	r3, r1
 8001a50:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001a58:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a5e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001a66:	2a00      	cmp	r2, #0
 8001a68:	d101      	bne.n	8001a6e <ETH_SetMACConfig+0x172>
 8001a6a:	2280      	movs	r2, #128	; 0x80
 8001a6c:	e000      	b.n	8001a70 <ETH_SetMACConfig+0x174>
 8001a6e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001a70:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a76:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a82:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001a86:	4013      	ands	r3, r2
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	68f9      	ldr	r1, [r7, #12]
 8001a8e:	430b      	orrs	r3, r1
 8001a90:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001a98:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001aa0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aae:	f023 0103 	bic.w	r1, r3, #3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001ac6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001ae2:	2a00      	cmp	r2, #0
 8001ae4:	d101      	bne.n	8001aea <ETH_SetMACConfig+0x1ee>
 8001ae6:	2240      	movs	r2, #64	; 0x40
 8001ae8:	e000      	b.n	8001aec <ETH_SetMACConfig+0x1f0>
 8001aea:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001aec:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001af4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001af6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001afe:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001b00:	4313      	orrs	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001b0c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	00048083 	.word	0x00048083
 8001b2c:	c0f88000 	.word	0xc0f88000
 8001b30:	fffffef0 	.word	0xfffffef0

08001b34 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b38      	ldr	r3, [pc, #224]	; (8001c2c <ETH_SetDMAConfig+0xf8>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	6809      	ldr	r1, [r1, #0]
 8001b54:	431a      	orrs	r2, r3
 8001b56:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001b5a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	791b      	ldrb	r3, [r3, #4]
 8001b60:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b66:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	7b1b      	ldrb	r3, [r3, #12]
 8001b6c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	f241 0304 	movw	r3, #4100	; 0x1004
 8001b7a:	4413      	add	r3, r2
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	4b2c      	ldr	r3, [pc, #176]	; (8001c30 <ETH_SetDMAConfig+0xfc>)
 8001b80:	4013      	ands	r3, r2
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6811      	ldr	r1, [r2, #0]
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	f241 0304 	movw	r3, #4100	; 0x1004
 8001b8e:	440b      	add	r3, r1
 8001b90:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	7b5b      	ldrb	r3, [r3, #13]
 8001b96:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <ETH_SetDMAConfig+0x100>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6811      	ldr	r1, [r2, #0]
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001bba:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	7d1b      	ldrb	r3, [r3, #20]
 8001bc4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001bc6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	7f5b      	ldrb	r3, [r3, #29]
 8001bcc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	f241 1304 	movw	r3, #4356	; 0x1104
 8001bda:	4413      	add	r3, r2
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <ETH_SetDMAConfig+0x104>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6811      	ldr	r1, [r2, #0]
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	431a      	orrs	r2, r3
 8001bea:	f241 1304 	movw	r3, #4356	; 0x1104
 8001bee:	440b      	add	r3, r1
 8001bf0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	7f1b      	ldrb	r3, [r3, #28]
 8001bf6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	f241 1308 	movw	r3, #4360	; 0x1108
 8001c08:	4413      	add	r3, r2
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <ETH_SetDMAConfig+0x108>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6811      	ldr	r1, [r2, #0]
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	431a      	orrs	r2, r3
 8001c18:	f241 1308 	movw	r3, #4360	; 0x1108
 8001c1c:	440b      	add	r3, r1
 8001c1e:	601a      	str	r2, [r3, #0]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	ffff87fd 	.word	0xffff87fd
 8001c30:	ffff2ffe 	.word	0xffff2ffe
 8001c34:	fffec000 	.word	0xfffec000
 8001c38:	ffc0efef 	.word	0xffc0efef
 8001c3c:	7fc0ffff 	.word	0x7fc0ffff

08001c40 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b0a4      	sub	sp, #144	; 0x90
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001c64:	2301      	movs	r3, #1
 8001c66:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001c76:	2301      	movs	r3, #1
 8001c78:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001c7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c80:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001c98:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001c9c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001cd8:	2320      	movs	r3, #32
 8001cda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001cea:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001cf0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cf4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001d14:	2301      	movs	r3, #1
 8001d16:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d28:	4619      	mov	r1, r3
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff fde6 	bl	80018fc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001d30:	2301      	movs	r3, #1
 8001d32:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001d34:	2301      	movs	r3, #1
 8001d36:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d4a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d4e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d54:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d58:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001d60:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001d64:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001d66:	f107 0308 	add.w	r3, r7, #8
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff fee1 	bl	8001b34 <ETH_SetDMAConfig>
}
 8001d72:	bf00      	nop
 8001d74:	3790      	adds	r7, #144	; 0x90
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d8c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d94:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001d96:	f001 fba5 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 8001d9a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	4a1e      	ldr	r2, [pc, #120]	; (8001e18 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d908      	bls.n	8001db6 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	4a1d      	ldr	r2, [pc, #116]	; (8001e1c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d804      	bhi.n	8001db6 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	e027      	b.n	8001e06 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	4a18      	ldr	r2, [pc, #96]	; (8001e1c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d908      	bls.n	8001dd0 <ETH_MAC_MDIO_ClkConfig+0x54>
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	4a17      	ldr	r2, [pc, #92]	; (8001e20 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d204      	bcs.n	8001dd0 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	e01a      	b.n	8001e06 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	4a13      	ldr	r2, [pc, #76]	; (8001e20 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d303      	bcc.n	8001de0 <ETH_MAC_MDIO_ClkConfig+0x64>
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	4a12      	ldr	r2, [pc, #72]	; (8001e24 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d911      	bls.n	8001e04 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	4a10      	ldr	r2, [pc, #64]	; (8001e24 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d908      	bls.n	8001dfa <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	4a0f      	ldr	r2, [pc, #60]	; (8001e28 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d804      	bhi.n	8001dfa <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	e005      	b.n	8001e06 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	e000      	b.n	8001e06 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001e04:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001e10:	bf00      	nop
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	01312cff 	.word	0x01312cff
 8001e1c:	02160ebf 	.word	0x02160ebf
 8001e20:	03938700 	.word	0x03938700
 8001e24:	05f5e0ff 	.word	0x05f5e0ff
 8001e28:	08f0d17f 	.word	0x08f0d17f

08001e2c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	e01d      	b.n	8001e76 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68d9      	ldr	r1, [r3, #12]
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	4613      	mov	r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	4413      	add	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	440b      	add	r3, r1
 8001e4a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2200      	movs	r2, #0
 8001e56:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2200      	movs	r2, #0
 8001e62:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	3206      	adds	r2, #6
 8001e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	3301      	adds	r3, #1
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d9de      	bls.n	8001e3a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	f241 132c 	movw	r3, #4396	; 0x112c
 8001e8a:	4413      	add	r3, r2
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68d9      	ldr	r1, [r3, #12]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	f241 1314 	movw	r3, #4372	; 0x1114
 8001e9c:	4413      	add	r3, r2
 8001e9e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001eac:	601a      	str	r2, [r3, #0]
}
 8001eae:	bf00      	nop
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b085      	sub	sp, #20
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	e024      	b.n	8001f12 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6919      	ldr	r1, [r3, #16]
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	4413      	add	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	440b      	add	r3, r1
 8001ed8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2200      	movs	r2, #0
 8001efc:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	3310      	adds	r3, #16
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	440b      	add	r3, r1
 8001f0a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2b03      	cmp	r3, #3
 8001f16:	d9d7      	bls.n	8001ec8 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	f241 1330 	movw	r3, #4400	; 0x1130
 8001f3e:	4413      	add	r3, r2
 8001f40:	2203      	movs	r2, #3
 8001f42:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6919      	ldr	r1, [r3, #16]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	f241 131c 	movw	r3, #4380	; 0x111c
 8001f50:	4413      	add	r3, r2
 8001f52:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	f241 1328 	movw	r3, #4392	; 0x1128
 8001f64:	4413      	add	r3, r2
 8001f66:	6019      	str	r1, [r3, #0]
}
 8001f68:	bf00      	nop
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b089      	sub	sp, #36	; 0x24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f82:	4b89      	ldr	r3, [pc, #548]	; (80021a8 <HAL_GPIO_Init+0x234>)
 8001f84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f86:	e194      	b.n	80022b2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	fa01 f303 	lsl.w	r3, r1, r3
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 8186 	beq.w	80022ac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d005      	beq.n	8001fb8 <HAL_GPIO_Init+0x44>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d130      	bne.n	800201a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	68da      	ldr	r2, [r3, #12]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fee:	2201      	movs	r2, #1
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	091b      	lsrs	r3, r3, #4
 8002004:	f003 0201 	and.w	r2, r3, #1
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	2b03      	cmp	r3, #3
 8002024:	d017      	beq.n	8002056 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	2203      	movs	r2, #3
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d123      	bne.n	80020aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	08da      	lsrs	r2, r3, #3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3208      	adds	r2, #8
 800206a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	220f      	movs	r2, #15
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4013      	ands	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	691a      	ldr	r2, [r3, #16]
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	08da      	lsrs	r2, r3, #3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3208      	adds	r2, #8
 80020a4:	69b9      	ldr	r1, [r7, #24]
 80020a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	2203      	movs	r2, #3
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 0203 	and.w	r2, r3, #3
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 80e0 	beq.w	80022ac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ec:	4b2f      	ldr	r3, [pc, #188]	; (80021ac <HAL_GPIO_Init+0x238>)
 80020ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020f2:	4a2e      	ldr	r2, [pc, #184]	; (80021ac <HAL_GPIO_Init+0x238>)
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80020fc:	4b2b      	ldr	r3, [pc, #172]	; (80021ac <HAL_GPIO_Init+0x238>)
 80020fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800210a:	4a29      	ldr	r2, [pc, #164]	; (80021b0 <HAL_GPIO_Init+0x23c>)
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	089b      	lsrs	r3, r3, #2
 8002110:	3302      	adds	r3, #2
 8002112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	220f      	movs	r2, #15
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a20      	ldr	r2, [pc, #128]	; (80021b4 <HAL_GPIO_Init+0x240>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d052      	beq.n	80021dc <HAL_GPIO_Init+0x268>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a1f      	ldr	r2, [pc, #124]	; (80021b8 <HAL_GPIO_Init+0x244>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d031      	beq.n	80021a2 <HAL_GPIO_Init+0x22e>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a1e      	ldr	r2, [pc, #120]	; (80021bc <HAL_GPIO_Init+0x248>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d02b      	beq.n	800219e <HAL_GPIO_Init+0x22a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a1d      	ldr	r2, [pc, #116]	; (80021c0 <HAL_GPIO_Init+0x24c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d025      	beq.n	800219a <HAL_GPIO_Init+0x226>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a1c      	ldr	r2, [pc, #112]	; (80021c4 <HAL_GPIO_Init+0x250>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d01f      	beq.n	8002196 <HAL_GPIO_Init+0x222>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a1b      	ldr	r2, [pc, #108]	; (80021c8 <HAL_GPIO_Init+0x254>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d019      	beq.n	8002192 <HAL_GPIO_Init+0x21e>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a1a      	ldr	r2, [pc, #104]	; (80021cc <HAL_GPIO_Init+0x258>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d013      	beq.n	800218e <HAL_GPIO_Init+0x21a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a19      	ldr	r2, [pc, #100]	; (80021d0 <HAL_GPIO_Init+0x25c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d00d      	beq.n	800218a <HAL_GPIO_Init+0x216>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a18      	ldr	r2, [pc, #96]	; (80021d4 <HAL_GPIO_Init+0x260>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d007      	beq.n	8002186 <HAL_GPIO_Init+0x212>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a17      	ldr	r2, [pc, #92]	; (80021d8 <HAL_GPIO_Init+0x264>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d101      	bne.n	8002182 <HAL_GPIO_Init+0x20e>
 800217e:	2309      	movs	r3, #9
 8002180:	e02d      	b.n	80021de <HAL_GPIO_Init+0x26a>
 8002182:	230a      	movs	r3, #10
 8002184:	e02b      	b.n	80021de <HAL_GPIO_Init+0x26a>
 8002186:	2308      	movs	r3, #8
 8002188:	e029      	b.n	80021de <HAL_GPIO_Init+0x26a>
 800218a:	2307      	movs	r3, #7
 800218c:	e027      	b.n	80021de <HAL_GPIO_Init+0x26a>
 800218e:	2306      	movs	r3, #6
 8002190:	e025      	b.n	80021de <HAL_GPIO_Init+0x26a>
 8002192:	2305      	movs	r3, #5
 8002194:	e023      	b.n	80021de <HAL_GPIO_Init+0x26a>
 8002196:	2304      	movs	r3, #4
 8002198:	e021      	b.n	80021de <HAL_GPIO_Init+0x26a>
 800219a:	2303      	movs	r3, #3
 800219c:	e01f      	b.n	80021de <HAL_GPIO_Init+0x26a>
 800219e:	2302      	movs	r3, #2
 80021a0:	e01d      	b.n	80021de <HAL_GPIO_Init+0x26a>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e01b      	b.n	80021de <HAL_GPIO_Init+0x26a>
 80021a6:	bf00      	nop
 80021a8:	58000080 	.word	0x58000080
 80021ac:	58024400 	.word	0x58024400
 80021b0:	58000400 	.word	0x58000400
 80021b4:	58020000 	.word	0x58020000
 80021b8:	58020400 	.word	0x58020400
 80021bc:	58020800 	.word	0x58020800
 80021c0:	58020c00 	.word	0x58020c00
 80021c4:	58021000 	.word	0x58021000
 80021c8:	58021400 	.word	0x58021400
 80021cc:	58021800 	.word	0x58021800
 80021d0:	58021c00 	.word	0x58021c00
 80021d4:	58022000 	.word	0x58022000
 80021d8:	58022400 	.word	0x58022400
 80021dc:	2300      	movs	r3, #0
 80021de:	69fa      	ldr	r2, [r7, #28]
 80021e0:	f002 0203 	and.w	r2, r2, #3
 80021e4:	0092      	lsls	r2, r2, #2
 80021e6:	4093      	lsls	r3, r2
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021ee:	4938      	ldr	r1, [pc, #224]	; (80022d0 <HAL_GPIO_Init+0x35c>)
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	089b      	lsrs	r3, r3, #2
 80021f4:	3302      	adds	r3, #2
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	43db      	mvns	r3, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4013      	ands	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002222:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800222a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002250:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	3301      	adds	r3, #1
 80022b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	fa22 f303 	lsr.w	r3, r2, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f47f ae63 	bne.w	8001f88 <HAL_GPIO_Init+0x14>
  }
}
 80022c2:	bf00      	nop
 80022c4:	bf00      	nop
 80022c6:	3724      	adds	r7, #36	; 0x24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	58000400 	.word	0x58000400

080022d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
 80022e0:	4613      	mov	r3, r2
 80022e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022e4:	787b      	ldrb	r3, [r7, #1]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ea:	887a      	ldrh	r2, [r7, #2]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80022f0:	e003      	b.n	80022fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80022f2:	887b      	ldrh	r3, [r7, #2]
 80022f4:	041a      	lsls	r2, r3, #16
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	619a      	str	r2, [r3, #24]
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002306:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002308:	b08f      	sub	sp, #60	; 0x3c
 800230a:	af0a      	add	r7, sp, #40	; 0x28
 800230c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e116      	b.n	8002546 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d106      	bne.n	8002338 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7fe fe54 	bl	8000fe0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2203      	movs	r2, #3
 800233c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002348:	2b00      	cmp	r3, #0
 800234a:	d102      	bne.n	8002352 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f006 fe30 	bl	8008fbc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	603b      	str	r3, [r7, #0]
 8002362:	687e      	ldr	r6, [r7, #4]
 8002364:	466d      	mov	r5, sp
 8002366:	f106 0410 	add.w	r4, r6, #16
 800236a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800236c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800236e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002370:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002372:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002376:	e885 0003 	stmia.w	r5, {r0, r1}
 800237a:	1d33      	adds	r3, r6, #4
 800237c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800237e:	6838      	ldr	r0, [r7, #0]
 8002380:	f006 fdae 	bl	8008ee0 <USB_CoreInit>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d005      	beq.n	8002396 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2202      	movs	r2, #2
 800238e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e0d7      	b.n	8002546 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2100      	movs	r1, #0
 800239c:	4618      	mov	r0, r3
 800239e:	f006 fe1e 	bl	8008fde <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a2:	2300      	movs	r3, #0
 80023a4:	73fb      	strb	r3, [r7, #15]
 80023a6:	e04a      	b.n	800243e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023a8:	7bfa      	ldrb	r2, [r7, #15]
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	1a9b      	subs	r3, r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	333d      	adds	r3, #61	; 0x3d
 80023b8:	2201      	movs	r2, #1
 80023ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023bc:	7bfa      	ldrb	r2, [r7, #15]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	1a9b      	subs	r3, r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	333c      	adds	r3, #60	; 0x3c
 80023cc:	7bfa      	ldrb	r2, [r7, #15]
 80023ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023d0:	7bfa      	ldrb	r2, [r7, #15]
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	b298      	uxth	r0, r3
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	1a9b      	subs	r3, r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	3342      	adds	r3, #66	; 0x42
 80023e4:	4602      	mov	r2, r0
 80023e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023e8:	7bfa      	ldrb	r2, [r7, #15]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	1a9b      	subs	r3, r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	333f      	adds	r3, #63	; 0x3f
 80023f8:	2200      	movs	r2, #0
 80023fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023fc:	7bfa      	ldrb	r2, [r7, #15]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	1a9b      	subs	r3, r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	3344      	adds	r3, #68	; 0x44
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002410:	7bfa      	ldrb	r2, [r7, #15]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	1a9b      	subs	r3, r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	3348      	adds	r3, #72	; 0x48
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002424:	7bfa      	ldrb	r2, [r7, #15]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	1a9b      	subs	r3, r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	3350      	adds	r3, #80	; 0x50
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	3301      	adds	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
 800243e:	7bfa      	ldrb	r2, [r7, #15]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	429a      	cmp	r2, r3
 8002446:	d3af      	bcc.n	80023a8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002448:	2300      	movs	r3, #0
 800244a:	73fb      	strb	r3, [r7, #15]
 800244c:	e044      	b.n	80024d8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800244e:	7bfa      	ldrb	r2, [r7, #15]
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	4613      	mov	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	1a9b      	subs	r3, r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	440b      	add	r3, r1
 800245c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002464:	7bfa      	ldrb	r2, [r7, #15]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	1a9b      	subs	r3, r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002476:	7bfa      	ldrb	r2, [r7, #15]
 8002478:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800247a:	7bfa      	ldrb	r2, [r7, #15]
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	1a9b      	subs	r3, r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002490:	7bfa      	ldrb	r2, [r7, #15]
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	4613      	mov	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	1a9b      	subs	r3, r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024a6:	7bfa      	ldrb	r2, [r7, #15]
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	1a9b      	subs	r3, r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024bc:	7bfa      	ldrb	r2, [r7, #15]
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	1a9b      	subs	r3, r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	3301      	adds	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
 80024d8:	7bfa      	ldrb	r2, [r7, #15]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d3b5      	bcc.n	800244e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	603b      	str	r3, [r7, #0]
 80024e8:	687e      	ldr	r6, [r7, #4]
 80024ea:	466d      	mov	r5, sp
 80024ec:	f106 0410 	add.w	r4, r6, #16
 80024f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8002500:	1d33      	adds	r3, r6, #4
 8002502:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002504:	6838      	ldr	r0, [r7, #0]
 8002506:	f006 fdb7 	bl	8009078 <USB_DevInit>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2202      	movs	r2, #2
 8002514:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e014      	b.n	8002546 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	2b01      	cmp	r3, #1
 8002532:	d102      	bne.n	800253a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 f80b 	bl	8002550 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f006 ff71 	bl	8009426 <USB_DevDisconnect>

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002550 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800257e:	4b05      	ldr	r3, [pc, #20]	; (8002594 <HAL_PCDEx_ActivateLPM+0x44>)
 8002580:	4313      	orrs	r3, r2
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	10000003 	.word	0x10000003

08002598 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80025a0:	4b19      	ldr	r3, [pc, #100]	; (8002608 <HAL_PWREx_ConfigSupply+0x70>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d00a      	beq.n	80025c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80025ac:	4b16      	ldr	r3, [pc, #88]	; (8002608 <HAL_PWREx_ConfigSupply+0x70>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d001      	beq.n	80025be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e01f      	b.n	80025fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	e01d      	b.n	80025fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80025c2:	4b11      	ldr	r3, [pc, #68]	; (8002608 <HAL_PWREx_ConfigSupply+0x70>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f023 0207 	bic.w	r2, r3, #7
 80025ca:	490f      	ldr	r1, [pc, #60]	; (8002608 <HAL_PWREx_ConfigSupply+0x70>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80025d2:	f7fe ff85 	bl	80014e0 <HAL_GetTick>
 80025d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025d8:	e009      	b.n	80025ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80025da:	f7fe ff81 	bl	80014e0 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025e8:	d901      	bls.n	80025ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e007      	b.n	80025fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025ee:	4b06      	ldr	r3, [pc, #24]	; (8002608 <HAL_PWREx_ConfigSupply+0x70>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025fa:	d1ee      	bne.n	80025da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	58024800 	.word	0x58024800

0800260c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002610:	4b05      	ldr	r3, [pc, #20]	; (8002628 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	4a04      	ldr	r2, [pc, #16]	; (8002628 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800261a:	60d3      	str	r3, [r2, #12]
}
 800261c:	bf00      	nop
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	58024800 	.word	0x58024800

0800262c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08c      	sub	sp, #48	; 0x30
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d102      	bne.n	8002640 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	f000 bc1c 	b.w	8002e78 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 8087 	beq.w	800275c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800264e:	4b9e      	ldr	r3, [pc, #632]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002658:	4b9b      	ldr	r3, [pc, #620]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 800265a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800265e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002660:	2b10      	cmp	r3, #16
 8002662:	d007      	beq.n	8002674 <HAL_RCC_OscConfig+0x48>
 8002664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002666:	2b18      	cmp	r3, #24
 8002668:	d110      	bne.n	800268c <HAL_RCC_OscConfig+0x60>
 800266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d10b      	bne.n	800268c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002674:	4b94      	ldr	r3, [pc, #592]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d06c      	beq.n	800275a <HAL_RCC_OscConfig+0x12e>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d168      	bne.n	800275a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e3f5      	b.n	8002e78 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002694:	d106      	bne.n	80026a4 <HAL_RCC_OscConfig+0x78>
 8002696:	4b8c      	ldr	r3, [pc, #560]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a8b      	ldr	r2, [pc, #556]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 800269c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	e02e      	b.n	8002702 <HAL_RCC_OscConfig+0xd6>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10c      	bne.n	80026c6 <HAL_RCC_OscConfig+0x9a>
 80026ac:	4b86      	ldr	r3, [pc, #536]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a85      	ldr	r2, [pc, #532]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 80026b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	4b83      	ldr	r3, [pc, #524]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a82      	ldr	r2, [pc, #520]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 80026be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	e01d      	b.n	8002702 <HAL_RCC_OscConfig+0xd6>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026ce:	d10c      	bne.n	80026ea <HAL_RCC_OscConfig+0xbe>
 80026d0:	4b7d      	ldr	r3, [pc, #500]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a7c      	ldr	r2, [pc, #496]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 80026d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	4b7a      	ldr	r3, [pc, #488]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a79      	ldr	r2, [pc, #484]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 80026e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	e00b      	b.n	8002702 <HAL_RCC_OscConfig+0xd6>
 80026ea:	4b77      	ldr	r3, [pc, #476]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a76      	ldr	r2, [pc, #472]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 80026f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	4b74      	ldr	r3, [pc, #464]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a73      	ldr	r2, [pc, #460]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 80026fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002700:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d013      	beq.n	8002732 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270a:	f7fe fee9 	bl	80014e0 <HAL_GetTick>
 800270e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002712:	f7fe fee5 	bl	80014e0 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b64      	cmp	r3, #100	; 0x64
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e3a9      	b.n	8002e78 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002724:	4b68      	ldr	r3, [pc, #416]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0xe6>
 8002730:	e014      	b.n	800275c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002732:	f7fe fed5 	bl	80014e0 <HAL_GetTick>
 8002736:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800273a:	f7fe fed1 	bl	80014e0 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b64      	cmp	r3, #100	; 0x64
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e395      	b.n	8002e78 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800274c:	4b5e      	ldr	r3, [pc, #376]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1f0      	bne.n	800273a <HAL_RCC_OscConfig+0x10e>
 8002758:	e000      	b.n	800275c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800275a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80ca 	beq.w	80028fe <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800276a:	4b57      	ldr	r3, [pc, #348]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002772:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002774:	4b54      	ldr	r3, [pc, #336]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 8002776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002778:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d007      	beq.n	8002790 <HAL_RCC_OscConfig+0x164>
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	2b18      	cmp	r3, #24
 8002784:	d156      	bne.n	8002834 <HAL_RCC_OscConfig+0x208>
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d151      	bne.n	8002834 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002790:	4b4d      	ldr	r3, [pc, #308]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_RCC_OscConfig+0x17c>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e367      	b.n	8002e78 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027a8:	4b47      	ldr	r3, [pc, #284]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f023 0219 	bic.w	r2, r3, #25
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	4944      	ldr	r1, [pc, #272]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027ba:	f7fe fe91 	bl	80014e0 <HAL_GetTick>
 80027be:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027c2:	f7fe fe8d 	bl	80014e0 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e351      	b.n	8002e78 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027d4:	4b3c      	ldr	r3, [pc, #240]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0f0      	beq.n	80027c2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e0:	f7fe feae 	bl	8001540 <HAL_GetREVID>
 80027e4:	4603      	mov	r3, r0
 80027e6:	f241 0203 	movw	r2, #4099	; 0x1003
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d817      	bhi.n	800281e <HAL_RCC_OscConfig+0x1f2>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	2b40      	cmp	r3, #64	; 0x40
 80027f4:	d108      	bne.n	8002808 <HAL_RCC_OscConfig+0x1dc>
 80027f6:	4b34      	ldr	r3, [pc, #208]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80027fe:	4a32      	ldr	r2, [pc, #200]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 8002800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002804:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002806:	e07a      	b.n	80028fe <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002808:	4b2f      	ldr	r3, [pc, #188]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	031b      	lsls	r3, r3, #12
 8002816:	492c      	ldr	r1, [pc, #176]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 8002818:	4313      	orrs	r3, r2
 800281a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800281c:	e06f      	b.n	80028fe <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281e:	4b2a      	ldr	r3, [pc, #168]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	061b      	lsls	r3, r3, #24
 800282c:	4926      	ldr	r1, [pc, #152]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 800282e:	4313      	orrs	r3, r2
 8002830:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002832:	e064      	b.n	80028fe <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d047      	beq.n	80028cc <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800283c:	4b22      	ldr	r3, [pc, #136]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f023 0219 	bic.w	r2, r3, #25
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	491f      	ldr	r1, [pc, #124]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 800284a:	4313      	orrs	r3, r2
 800284c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284e:	f7fe fe47 	bl	80014e0 <HAL_GetTick>
 8002852:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002856:	f7fe fe43 	bl	80014e0 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e307      	b.n	8002e78 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002868:	4b17      	ldr	r3, [pc, #92]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0f0      	beq.n	8002856 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002874:	f7fe fe64 	bl	8001540 <HAL_GetREVID>
 8002878:	4603      	mov	r3, r0
 800287a:	f241 0203 	movw	r2, #4099	; 0x1003
 800287e:	4293      	cmp	r3, r2
 8002880:	d817      	bhi.n	80028b2 <HAL_RCC_OscConfig+0x286>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	2b40      	cmp	r3, #64	; 0x40
 8002888:	d108      	bne.n	800289c <HAL_RCC_OscConfig+0x270>
 800288a:	4b0f      	ldr	r3, [pc, #60]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002892:	4a0d      	ldr	r2, [pc, #52]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 8002894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002898:	6053      	str	r3, [r2, #4]
 800289a:	e030      	b.n	80028fe <HAL_RCC_OscConfig+0x2d2>
 800289c:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	031b      	lsls	r3, r3, #12
 80028aa:	4907      	ldr	r1, [pc, #28]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	604b      	str	r3, [r1, #4]
 80028b0:	e025      	b.n	80028fe <HAL_RCC_OscConfig+0x2d2>
 80028b2:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	061b      	lsls	r3, r3, #24
 80028c0:	4901      	ldr	r1, [pc, #4]	; (80028c8 <HAL_RCC_OscConfig+0x29c>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	604b      	str	r3, [r1, #4]
 80028c6:	e01a      	b.n	80028fe <HAL_RCC_OscConfig+0x2d2>
 80028c8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028cc:	4b9e      	ldr	r3, [pc, #632]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a9d      	ldr	r2, [pc, #628]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 80028d2:	f023 0301 	bic.w	r3, r3, #1
 80028d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fe fe02 	bl	80014e0 <HAL_GetTick>
 80028dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e0:	f7fe fdfe 	bl	80014e0 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e2c2      	b.n	8002e78 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028f2:	4b95      	ldr	r3, [pc, #596]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0310 	and.w	r3, r3, #16
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 80a9 	beq.w	8002a5e <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800290c:	4b8e      	ldr	r3, [pc, #568]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002914:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002916:	4b8c      	ldr	r3, [pc, #560]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 8002918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	2b08      	cmp	r3, #8
 8002920:	d007      	beq.n	8002932 <HAL_RCC_OscConfig+0x306>
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	2b18      	cmp	r3, #24
 8002926:	d13a      	bne.n	800299e <HAL_RCC_OscConfig+0x372>
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	2b01      	cmp	r3, #1
 8002930:	d135      	bne.n	800299e <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002932:	4b85      	ldr	r3, [pc, #532]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293a:	2b00      	cmp	r3, #0
 800293c:	d005      	beq.n	800294a <HAL_RCC_OscConfig+0x31e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	2b80      	cmp	r3, #128	; 0x80
 8002944:	d001      	beq.n	800294a <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e296      	b.n	8002e78 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800294a:	f7fe fdf9 	bl	8001540 <HAL_GetREVID>
 800294e:	4603      	mov	r3, r0
 8002950:	f241 0203 	movw	r2, #4099	; 0x1003
 8002954:	4293      	cmp	r3, r2
 8002956:	d817      	bhi.n	8002988 <HAL_RCC_OscConfig+0x35c>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	2b20      	cmp	r3, #32
 800295e:	d108      	bne.n	8002972 <HAL_RCC_OscConfig+0x346>
 8002960:	4b79      	ldr	r3, [pc, #484]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002968:	4a77      	ldr	r2, [pc, #476]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 800296a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800296e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002970:	e075      	b.n	8002a5e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002972:	4b75      	ldr	r3, [pc, #468]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	069b      	lsls	r3, r3, #26
 8002980:	4971      	ldr	r1, [pc, #452]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 8002982:	4313      	orrs	r3, r2
 8002984:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002986:	e06a      	b.n	8002a5e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002988:	4b6f      	ldr	r3, [pc, #444]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	061b      	lsls	r3, r3, #24
 8002996:	496c      	ldr	r1, [pc, #432]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 8002998:	4313      	orrs	r3, r2
 800299a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800299c:	e05f      	b.n	8002a5e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d042      	beq.n	8002a2c <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80029a6:	4b68      	ldr	r3, [pc, #416]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a67      	ldr	r2, [pc, #412]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 80029ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b2:	f7fe fd95 	bl	80014e0 <HAL_GetTick>
 80029b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80029ba:	f7fe fd91 	bl	80014e0 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e255      	b.n	8002e78 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029cc:	4b5e      	ldr	r3, [pc, #376]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029d8:	f7fe fdb2 	bl	8001540 <HAL_GetREVID>
 80029dc:	4603      	mov	r3, r0
 80029de:	f241 0203 	movw	r2, #4099	; 0x1003
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d817      	bhi.n	8002a16 <HAL_RCC_OscConfig+0x3ea>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	2b20      	cmp	r3, #32
 80029ec:	d108      	bne.n	8002a00 <HAL_RCC_OscConfig+0x3d4>
 80029ee:	4b56      	ldr	r3, [pc, #344]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80029f6:	4a54      	ldr	r2, [pc, #336]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 80029f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80029fc:	6053      	str	r3, [r2, #4]
 80029fe:	e02e      	b.n	8002a5e <HAL_RCC_OscConfig+0x432>
 8002a00:	4b51      	ldr	r3, [pc, #324]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	069b      	lsls	r3, r3, #26
 8002a0e:	494e      	ldr	r1, [pc, #312]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	604b      	str	r3, [r1, #4]
 8002a14:	e023      	b.n	8002a5e <HAL_RCC_OscConfig+0x432>
 8002a16:	4b4c      	ldr	r3, [pc, #304]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	061b      	lsls	r3, r3, #24
 8002a24:	4948      	ldr	r1, [pc, #288]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60cb      	str	r3, [r1, #12]
 8002a2a:	e018      	b.n	8002a5e <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a2c:	4b46      	ldr	r3, [pc, #280]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a45      	ldr	r2, [pc, #276]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 8002a32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a38:	f7fe fd52 	bl	80014e0 <HAL_GetTick>
 8002a3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002a40:	f7fe fd4e 	bl	80014e0 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e212      	b.n	8002e78 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a52:	4b3d      	ldr	r3, [pc, #244]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d036      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d019      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a72:	4b35      	ldr	r3, [pc, #212]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 8002a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a76:	4a34      	ldr	r2, [pc, #208]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7e:	f7fe fd2f 	bl	80014e0 <HAL_GetTick>
 8002a82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a86:	f7fe fd2b 	bl	80014e0 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e1ef      	b.n	8002e78 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a98:	4b2b      	ldr	r3, [pc, #172]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 8002a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCC_OscConfig+0x45a>
 8002aa4:	e018      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aa6:	4b28      	ldr	r3, [pc, #160]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 8002aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aaa:	4a27      	ldr	r2, [pc, #156]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 8002aac:	f023 0301 	bic.w	r3, r3, #1
 8002ab0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab2:	f7fe fd15 	bl	80014e0 <HAL_GetTick>
 8002ab6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aba:	f7fe fd11 	bl	80014e0 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e1d5      	b.n	8002e78 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002acc:	4b1e      	ldr	r3, [pc, #120]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 8002ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1f0      	bne.n	8002aba <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0320 	and.w	r3, r3, #32
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d039      	beq.n	8002b58 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d019      	beq.n	8002b20 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002aec:	4b16      	ldr	r3, [pc, #88]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a15      	ldr	r2, [pc, #84]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 8002af2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002af6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002af8:	f7fe fcf2 	bl	80014e0 <HAL_GetTick>
 8002afc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002b00:	f7fe fcee 	bl	80014e0 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e1b2      	b.n	8002e78 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b12:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCC_OscConfig+0x4d4>
 8002b1e:	e01b      	b.n	8002b58 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b20:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a08      	ldr	r2, [pc, #32]	; (8002b48 <HAL_RCC_OscConfig+0x51c>)
 8002b26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b2a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b2c:	f7fe fcd8 	bl	80014e0 <HAL_GetTick>
 8002b30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b32:	e00b      	b.n	8002b4c <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002b34:	f7fe fcd4 	bl	80014e0 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d904      	bls.n	8002b4c <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e198      	b.n	8002e78 <HAL_RCC_OscConfig+0x84c>
 8002b46:	bf00      	nop
 8002b48:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b4c:	4ba3      	ldr	r3, [pc, #652]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1ed      	bne.n	8002b34 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 8081 	beq.w	8002c68 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b66:	4b9e      	ldr	r3, [pc, #632]	; (8002de0 <HAL_RCC_OscConfig+0x7b4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a9d      	ldr	r2, [pc, #628]	; (8002de0 <HAL_RCC_OscConfig+0x7b4>)
 8002b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b72:	f7fe fcb5 	bl	80014e0 <HAL_GetTick>
 8002b76:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b7a:	f7fe fcb1 	bl	80014e0 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b64      	cmp	r3, #100	; 0x64
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e175      	b.n	8002e78 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b8c:	4b94      	ldr	r3, [pc, #592]	; (8002de0 <HAL_RCC_OscConfig+0x7b4>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f0      	beq.n	8002b7a <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d106      	bne.n	8002bae <HAL_RCC_OscConfig+0x582>
 8002ba0:	4b8e      	ldr	r3, [pc, #568]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba4:	4a8d      	ldr	r2, [pc, #564]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002ba6:	f043 0301 	orr.w	r3, r3, #1
 8002baa:	6713      	str	r3, [r2, #112]	; 0x70
 8002bac:	e02d      	b.n	8002c0a <HAL_RCC_OscConfig+0x5de>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x5a4>
 8002bb6:	4b89      	ldr	r3, [pc, #548]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bba:	4a88      	ldr	r2, [pc, #544]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002bbc:	f023 0301 	bic.w	r3, r3, #1
 8002bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc2:	4b86      	ldr	r3, [pc, #536]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc6:	4a85      	ldr	r2, [pc, #532]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002bc8:	f023 0304 	bic.w	r3, r3, #4
 8002bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8002bce:	e01c      	b.n	8002c0a <HAL_RCC_OscConfig+0x5de>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	2b05      	cmp	r3, #5
 8002bd6:	d10c      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x5c6>
 8002bd8:	4b80      	ldr	r3, [pc, #512]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bdc:	4a7f      	ldr	r2, [pc, #508]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002bde:	f043 0304 	orr.w	r3, r3, #4
 8002be2:	6713      	str	r3, [r2, #112]	; 0x70
 8002be4:	4b7d      	ldr	r3, [pc, #500]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be8:	4a7c      	ldr	r2, [pc, #496]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf0:	e00b      	b.n	8002c0a <HAL_RCC_OscConfig+0x5de>
 8002bf2:	4b7a      	ldr	r3, [pc, #488]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf6:	4a79      	ldr	r2, [pc, #484]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002bf8:	f023 0301 	bic.w	r3, r3, #1
 8002bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8002bfe:	4b77      	ldr	r3, [pc, #476]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c02:	4a76      	ldr	r2, [pc, #472]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002c04:	f023 0304 	bic.w	r3, r3, #4
 8002c08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d015      	beq.n	8002c3e <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c12:	f7fe fc65 	bl	80014e0 <HAL_GetTick>
 8002c16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c18:	e00a      	b.n	8002c30 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c1a:	f7fe fc61 	bl	80014e0 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e123      	b.n	8002e78 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c30:	4b6a      	ldr	r3, [pc, #424]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0ee      	beq.n	8002c1a <HAL_RCC_OscConfig+0x5ee>
 8002c3c:	e014      	b.n	8002c68 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3e:	f7fe fc4f 	bl	80014e0 <HAL_GetTick>
 8002c42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c44:	e00a      	b.n	8002c5c <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c46:	f7fe fc4b 	bl	80014e0 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e10d      	b.n	8002e78 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c5c:	4b5f      	ldr	r3, [pc, #380]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1ee      	bne.n	8002c46 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 8102 	beq.w	8002e76 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c72:	4b5a      	ldr	r3, [pc, #360]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c7a:	2b18      	cmp	r3, #24
 8002c7c:	f000 80bd 	beq.w	8002dfa <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	f040 8095 	bne.w	8002db4 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8a:	4b54      	ldr	r3, [pc, #336]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a53      	ldr	r2, [pc, #332]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002c90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c96:	f7fe fc23 	bl	80014e0 <HAL_GetTick>
 8002c9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c9e:	f7fe fc1f 	bl	80014e0 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e0e3      	b.n	8002e78 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cb0:	4b4a      	ldr	r3, [pc, #296]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1f0      	bne.n	8002c9e <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cbc:	4b47      	ldr	r3, [pc, #284]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002cbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cc0:	4b48      	ldr	r3, [pc, #288]	; (8002de4 <HAL_RCC_OscConfig+0x7b8>)
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ccc:	0112      	lsls	r2, r2, #4
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	4942      	ldr	r1, [pc, #264]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	628b      	str	r3, [r1, #40]	; 0x28
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	025b      	lsls	r3, r3, #9
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	041b      	lsls	r3, r3, #16
 8002cf4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	061b      	lsls	r3, r3, #24
 8002d02:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002d06:	4935      	ldr	r1, [pc, #212]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002d0c:	4b33      	ldr	r3, [pc, #204]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d10:	4a32      	ldr	r2, [pc, #200]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002d12:	f023 0301 	bic.w	r3, r3, #1
 8002d16:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d18:	4b30      	ldr	r3, [pc, #192]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002d1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d1c:	4b32      	ldr	r3, [pc, #200]	; (8002de8 <HAL_RCC_OscConfig+0x7bc>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d24:	00d2      	lsls	r2, r2, #3
 8002d26:	492d      	ldr	r1, [pc, #180]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d2c:	4b2b      	ldr	r3, [pc, #172]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d30:	f023 020c 	bic.w	r2, r3, #12
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	4928      	ldr	r1, [pc, #160]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d3e:	4b27      	ldr	r3, [pc, #156]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d42:	f023 0202 	bic.w	r2, r3, #2
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4a:	4924      	ldr	r1, [pc, #144]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d50:	4b22      	ldr	r3, [pc, #136]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	4a21      	ldr	r2, [pc, #132]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d5c:	4b1f      	ldr	r3, [pc, #124]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d60:	4a1e      	ldr	r2, [pc, #120]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002d62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d68:	4b1c      	ldr	r3, [pc, #112]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6c:	4a1b      	ldr	r2, [pc, #108]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002d6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002d74:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d78:	4a18      	ldr	r2, [pc, #96]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d80:	4b16      	ldr	r3, [pc, #88]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a15      	ldr	r2, [pc, #84]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002d86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8c:	f7fe fba8 	bl	80014e0 <HAL_GetTick>
 8002d90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d94:	f7fe fba4 	bl	80014e0 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e068      	b.n	8002e78 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002da6:	4b0d      	ldr	r3, [pc, #52]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f0      	beq.n	8002d94 <HAL_RCC_OscConfig+0x768>
 8002db2:	e060      	b.n	8002e76 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db4:	4b09      	ldr	r3, [pc, #36]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a08      	ldr	r2, [pc, #32]	; (8002ddc <HAL_RCC_OscConfig+0x7b0>)
 8002dba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fb8e 	bl	80014e0 <HAL_GetTick>
 8002dc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dc6:	e011      	b.n	8002dec <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc8:	f7fe fb8a 	bl	80014e0 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d90a      	bls.n	8002dec <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e04e      	b.n	8002e78 <HAL_RCC_OscConfig+0x84c>
 8002dda:	bf00      	nop
 8002ddc:	58024400 	.word	0x58024400
 8002de0:	58024800 	.word	0x58024800
 8002de4:	fffffc0c 	.word	0xfffffc0c
 8002de8:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dec:	4b24      	ldr	r3, [pc, #144]	; (8002e80 <HAL_RCC_OscConfig+0x854>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1e7      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x79c>
 8002df8:	e03d      	b.n	8002e76 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002dfa:	4b21      	ldr	r3, [pc, #132]	; (8002e80 <HAL_RCC_OscConfig+0x854>)
 8002dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfe:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e00:	4b1f      	ldr	r3, [pc, #124]	; (8002e80 <HAL_RCC_OscConfig+0x854>)
 8002e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e04:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d031      	beq.n	8002e72 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f003 0203 	and.w	r2, r3, #3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d12a      	bne.n	8002e72 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	091b      	lsrs	r3, r3, #4
 8002e20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d122      	bne.n	8002e72 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d11a      	bne.n	8002e72 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	0a5b      	lsrs	r3, r3, #9
 8002e40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e48:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d111      	bne.n	8002e72 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	0c1b      	lsrs	r3, r3, #16
 8002e52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d108      	bne.n	8002e72 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	0e1b      	lsrs	r3, r3, #24
 8002e64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d001      	beq.n	8002e76 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3730      	adds	r7, #48	; 0x30
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	58024400 	.word	0x58024400

08002e84 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e19c      	b.n	80031d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e98:	4b8a      	ldr	r3, [pc, #552]	; (80030c4 <HAL_RCC_ClockConfig+0x240>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 030f 	and.w	r3, r3, #15
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d910      	bls.n	8002ec8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea6:	4b87      	ldr	r3, [pc, #540]	; (80030c4 <HAL_RCC_ClockConfig+0x240>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f023 020f 	bic.w	r2, r3, #15
 8002eae:	4985      	ldr	r1, [pc, #532]	; (80030c4 <HAL_RCC_ClockConfig+0x240>)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb6:	4b83      	ldr	r3, [pc, #524]	; (80030c4 <HAL_RCC_ClockConfig+0x240>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d001      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e184      	b.n	80031d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d010      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691a      	ldr	r2, [r3, #16]
 8002ed8:	4b7b      	ldr	r3, [pc, #492]	; (80030c8 <HAL_RCC_ClockConfig+0x244>)
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d908      	bls.n	8002ef6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ee4:	4b78      	ldr	r3, [pc, #480]	; (80030c8 <HAL_RCC_ClockConfig+0x244>)
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	4975      	ldr	r1, [pc, #468]	; (80030c8 <HAL_RCC_ClockConfig+0x244>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d010      	beq.n	8002f24 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695a      	ldr	r2, [r3, #20]
 8002f06:	4b70      	ldr	r3, [pc, #448]	; (80030c8 <HAL_RCC_ClockConfig+0x244>)
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d908      	bls.n	8002f24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f12:	4b6d      	ldr	r3, [pc, #436]	; (80030c8 <HAL_RCC_ClockConfig+0x244>)
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	496a      	ldr	r1, [pc, #424]	; (80030c8 <HAL_RCC_ClockConfig+0x244>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0310 	and.w	r3, r3, #16
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d010      	beq.n	8002f52 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	699a      	ldr	r2, [r3, #24]
 8002f34:	4b64      	ldr	r3, [pc, #400]	; (80030c8 <HAL_RCC_ClockConfig+0x244>)
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d908      	bls.n	8002f52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f40:	4b61      	ldr	r3, [pc, #388]	; (80030c8 <HAL_RCC_ClockConfig+0x244>)
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	495e      	ldr	r1, [pc, #376]	; (80030c8 <HAL_RCC_ClockConfig+0x244>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0320 	and.w	r3, r3, #32
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d010      	beq.n	8002f80 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69da      	ldr	r2, [r3, #28]
 8002f62:	4b59      	ldr	r3, [pc, #356]	; (80030c8 <HAL_RCC_ClockConfig+0x244>)
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d908      	bls.n	8002f80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002f6e:	4b56      	ldr	r3, [pc, #344]	; (80030c8 <HAL_RCC_ClockConfig+0x244>)
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	4953      	ldr	r1, [pc, #332]	; (80030c8 <HAL_RCC_ClockConfig+0x244>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d010      	beq.n	8002fae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	4b4d      	ldr	r3, [pc, #308]	; (80030c8 <HAL_RCC_ClockConfig+0x244>)
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	f003 030f 	and.w	r3, r3, #15
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d908      	bls.n	8002fae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f9c:	4b4a      	ldr	r3, [pc, #296]	; (80030c8 <HAL_RCC_ClockConfig+0x244>)
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	f023 020f 	bic.w	r2, r3, #15
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	4947      	ldr	r1, [pc, #284]	; (80030c8 <HAL_RCC_ClockConfig+0x244>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d055      	beq.n	8003066 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002fba:	4b43      	ldr	r3, [pc, #268]	; (80030c8 <HAL_RCC_ClockConfig+0x244>)
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	4940      	ldr	r1, [pc, #256]	; (80030c8 <HAL_RCC_ClockConfig+0x244>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d107      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fd4:	4b3c      	ldr	r3, [pc, #240]	; (80030c8 <HAL_RCC_ClockConfig+0x244>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d121      	bne.n	8003024 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0f6      	b.n	80031d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d107      	bne.n	8002ffc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fec:	4b36      	ldr	r3, [pc, #216]	; (80030c8 <HAL_RCC_ClockConfig+0x244>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d115      	bne.n	8003024 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e0ea      	b.n	80031d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d107      	bne.n	8003014 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003004:	4b30      	ldr	r3, [pc, #192]	; (80030c8 <HAL_RCC_ClockConfig+0x244>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300c:	2b00      	cmp	r3, #0
 800300e:	d109      	bne.n	8003024 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0de      	b.n	80031d2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003014:	4b2c      	ldr	r3, [pc, #176]	; (80030c8 <HAL_RCC_ClockConfig+0x244>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e0d6      	b.n	80031d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003024:	4b28      	ldr	r3, [pc, #160]	; (80030c8 <HAL_RCC_ClockConfig+0x244>)
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	f023 0207 	bic.w	r2, r3, #7
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	4925      	ldr	r1, [pc, #148]	; (80030c8 <HAL_RCC_ClockConfig+0x244>)
 8003032:	4313      	orrs	r3, r2
 8003034:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003036:	f7fe fa53 	bl	80014e0 <HAL_GetTick>
 800303a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303c:	e00a      	b.n	8003054 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800303e:	f7fe fa4f 	bl	80014e0 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	f241 3288 	movw	r2, #5000	; 0x1388
 800304c:	4293      	cmp	r3, r2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e0be      	b.n	80031d2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003054:	4b1c      	ldr	r3, [pc, #112]	; (80030c8 <HAL_RCC_ClockConfig+0x244>)
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	429a      	cmp	r2, r3
 8003064:	d1eb      	bne.n	800303e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d010      	beq.n	8003094 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	4b14      	ldr	r3, [pc, #80]	; (80030c8 <HAL_RCC_ClockConfig+0x244>)
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	429a      	cmp	r2, r3
 8003080:	d208      	bcs.n	8003094 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003082:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <HAL_RCC_ClockConfig+0x244>)
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	f023 020f 	bic.w	r2, r3, #15
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	490e      	ldr	r1, [pc, #56]	; (80030c8 <HAL_RCC_ClockConfig+0x244>)
 8003090:	4313      	orrs	r3, r2
 8003092:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <HAL_RCC_ClockConfig+0x240>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d214      	bcs.n	80030cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a2:	4b08      	ldr	r3, [pc, #32]	; (80030c4 <HAL_RCC_ClockConfig+0x240>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 020f 	bic.w	r2, r3, #15
 80030aa:	4906      	ldr	r1, [pc, #24]	; (80030c4 <HAL_RCC_ClockConfig+0x240>)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b2:	4b04      	ldr	r3, [pc, #16]	; (80030c4 <HAL_RCC_ClockConfig+0x240>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d005      	beq.n	80030cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e086      	b.n	80031d2 <HAL_RCC_ClockConfig+0x34e>
 80030c4:	52002000 	.word	0x52002000
 80030c8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d010      	beq.n	80030fa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	4b3f      	ldr	r3, [pc, #252]	; (80031dc <HAL_RCC_ClockConfig+0x358>)
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d208      	bcs.n	80030fa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030e8:	4b3c      	ldr	r3, [pc, #240]	; (80031dc <HAL_RCC_ClockConfig+0x358>)
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	4939      	ldr	r1, [pc, #228]	; (80031dc <HAL_RCC_ClockConfig+0x358>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b00      	cmp	r3, #0
 8003104:	d010      	beq.n	8003128 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695a      	ldr	r2, [r3, #20]
 800310a:	4b34      	ldr	r3, [pc, #208]	; (80031dc <HAL_RCC_ClockConfig+0x358>)
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003112:	429a      	cmp	r2, r3
 8003114:	d208      	bcs.n	8003128 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003116:	4b31      	ldr	r3, [pc, #196]	; (80031dc <HAL_RCC_ClockConfig+0x358>)
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	492e      	ldr	r1, [pc, #184]	; (80031dc <HAL_RCC_ClockConfig+0x358>)
 8003124:	4313      	orrs	r3, r2
 8003126:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	2b00      	cmp	r3, #0
 8003132:	d010      	beq.n	8003156 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699a      	ldr	r2, [r3, #24]
 8003138:	4b28      	ldr	r3, [pc, #160]	; (80031dc <HAL_RCC_ClockConfig+0x358>)
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003140:	429a      	cmp	r2, r3
 8003142:	d208      	bcs.n	8003156 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003144:	4b25      	ldr	r3, [pc, #148]	; (80031dc <HAL_RCC_ClockConfig+0x358>)
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	4922      	ldr	r1, [pc, #136]	; (80031dc <HAL_RCC_ClockConfig+0x358>)
 8003152:	4313      	orrs	r3, r2
 8003154:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	2b00      	cmp	r3, #0
 8003160:	d010      	beq.n	8003184 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69da      	ldr	r2, [r3, #28]
 8003166:	4b1d      	ldr	r3, [pc, #116]	; (80031dc <HAL_RCC_ClockConfig+0x358>)
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800316e:	429a      	cmp	r2, r3
 8003170:	d208      	bcs.n	8003184 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003172:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <HAL_RCC_ClockConfig+0x358>)
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	4917      	ldr	r1, [pc, #92]	; (80031dc <HAL_RCC_ClockConfig+0x358>)
 8003180:	4313      	orrs	r3, r2
 8003182:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003184:	f000 f834 	bl	80031f0 <HAL_RCC_GetSysClockFreq>
 8003188:	4602      	mov	r2, r0
 800318a:	4b14      	ldr	r3, [pc, #80]	; (80031dc <HAL_RCC_ClockConfig+0x358>)
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	0a1b      	lsrs	r3, r3, #8
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	4912      	ldr	r1, [pc, #72]	; (80031e0 <HAL_RCC_ClockConfig+0x35c>)
 8003196:	5ccb      	ldrb	r3, [r1, r3]
 8003198:	f003 031f 	and.w	r3, r3, #31
 800319c:	fa22 f303 	lsr.w	r3, r2, r3
 80031a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031a2:	4b0e      	ldr	r3, [pc, #56]	; (80031dc <HAL_RCC_ClockConfig+0x358>)
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	4a0d      	ldr	r2, [pc, #52]	; (80031e0 <HAL_RCC_ClockConfig+0x35c>)
 80031ac:	5cd3      	ldrb	r3, [r2, r3]
 80031ae:	f003 031f 	and.w	r3, r3, #31
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	fa22 f303 	lsr.w	r3, r2, r3
 80031b8:	4a0a      	ldr	r2, [pc, #40]	; (80031e4 <HAL_RCC_ClockConfig+0x360>)
 80031ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031bc:	4a0a      	ldr	r2, [pc, #40]	; (80031e8 <HAL_RCC_ClockConfig+0x364>)
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80031c2:	4b0a      	ldr	r3, [pc, #40]	; (80031ec <HAL_RCC_ClockConfig+0x368>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fe f940 	bl	800144c <HAL_InitTick>
 80031cc:	4603      	mov	r3, r0
 80031ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	58024400 	.word	0x58024400
 80031e0:	0800a414 	.word	0x0800a414
 80031e4:	24000004 	.word	0x24000004
 80031e8:	24000000 	.word	0x24000000
 80031ec:	24000008 	.word	0x24000008

080031f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b089      	sub	sp, #36	; 0x24
 80031f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031f6:	4bb3      	ldr	r3, [pc, #716]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031fe:	2b18      	cmp	r3, #24
 8003200:	f200 8155 	bhi.w	80034ae <HAL_RCC_GetSysClockFreq+0x2be>
 8003204:	a201      	add	r2, pc, #4	; (adr r2, 800320c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320a:	bf00      	nop
 800320c:	08003271 	.word	0x08003271
 8003210:	080034af 	.word	0x080034af
 8003214:	080034af 	.word	0x080034af
 8003218:	080034af 	.word	0x080034af
 800321c:	080034af 	.word	0x080034af
 8003220:	080034af 	.word	0x080034af
 8003224:	080034af 	.word	0x080034af
 8003228:	080034af 	.word	0x080034af
 800322c:	08003297 	.word	0x08003297
 8003230:	080034af 	.word	0x080034af
 8003234:	080034af 	.word	0x080034af
 8003238:	080034af 	.word	0x080034af
 800323c:	080034af 	.word	0x080034af
 8003240:	080034af 	.word	0x080034af
 8003244:	080034af 	.word	0x080034af
 8003248:	080034af 	.word	0x080034af
 800324c:	0800329d 	.word	0x0800329d
 8003250:	080034af 	.word	0x080034af
 8003254:	080034af 	.word	0x080034af
 8003258:	080034af 	.word	0x080034af
 800325c:	080034af 	.word	0x080034af
 8003260:	080034af 	.word	0x080034af
 8003264:	080034af 	.word	0x080034af
 8003268:	080034af 	.word	0x080034af
 800326c:	080032a3 	.word	0x080032a3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003270:	4b94      	ldr	r3, [pc, #592]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0320 	and.w	r3, r3, #32
 8003278:	2b00      	cmp	r3, #0
 800327a:	d009      	beq.n	8003290 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800327c:	4b91      	ldr	r3, [pc, #580]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	08db      	lsrs	r3, r3, #3
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	4a90      	ldr	r2, [pc, #576]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003288:	fa22 f303 	lsr.w	r3, r2, r3
 800328c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800328e:	e111      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003290:	4b8d      	ldr	r3, [pc, #564]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003292:	61bb      	str	r3, [r7, #24]
    break;
 8003294:	e10e      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003296:	4b8d      	ldr	r3, [pc, #564]	; (80034cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003298:	61bb      	str	r3, [r7, #24]
    break;
 800329a:	e10b      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800329c:	4b8c      	ldr	r3, [pc, #560]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800329e:	61bb      	str	r3, [r7, #24]
    break;
 80032a0:	e108      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80032a2:	4b88      	ldr	r3, [pc, #544]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80032ac:	4b85      	ldr	r3, [pc, #532]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b0:	091b      	lsrs	r3, r3, #4
 80032b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032b6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80032b8:	4b82      	ldr	r3, [pc, #520]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80032c2:	4b80      	ldr	r3, [pc, #512]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c6:	08db      	lsrs	r3, r3, #3
 80032c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	fb02 f303 	mul.w	r3, r2, r3
 80032d2:	ee07 3a90 	vmov	s15, r3
 80032d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032da:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 80e1 	beq.w	80034a8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	f000 8083 	beq.w	80033f4 <HAL_RCC_GetSysClockFreq+0x204>
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	f200 80a1 	bhi.w	8003438 <HAL_RCC_GetSysClockFreq+0x248>
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HAL_RCC_GetSysClockFreq+0x114>
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d056      	beq.n	80033b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003302:	e099      	b.n	8003438 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003304:	4b6f      	ldr	r3, [pc, #444]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0320 	and.w	r3, r3, #32
 800330c:	2b00      	cmp	r3, #0
 800330e:	d02d      	beq.n	800336c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003310:	4b6c      	ldr	r3, [pc, #432]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	08db      	lsrs	r3, r3, #3
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	4a6b      	ldr	r2, [pc, #428]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800331c:	fa22 f303 	lsr.w	r3, r2, r3
 8003320:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	ee07 3a90 	vmov	s15, r3
 8003328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	ee07 3a90 	vmov	s15, r3
 8003332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800333a:	4b62      	ldr	r3, [pc, #392]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003342:	ee07 3a90 	vmov	s15, r3
 8003346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800334a:	ed97 6a02 	vldr	s12, [r7, #8]
 800334e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80034d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800335a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800335e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003366:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800336a:	e087      	b.n	800347c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	ee07 3a90 	vmov	s15, r3
 8003372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003376:	eddf 6a58 	vldr	s13, [pc, #352]	; 80034d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800337a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800337e:	4b51      	ldr	r3, [pc, #324]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003386:	ee07 3a90 	vmov	s15, r3
 800338a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800338e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003392:	eddf 5a50 	vldr	s11, [pc, #320]	; 80034d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800339a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800339e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033ae:	e065      	b.n	800347c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	ee07 3a90 	vmov	s15, r3
 80033b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ba:	eddf 6a48 	vldr	s13, [pc, #288]	; 80034dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80033be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033c2:	4b40      	ldr	r3, [pc, #256]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ca:	ee07 3a90 	vmov	s15, r3
 80033ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80033d6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80034d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033f2:	e043      	b.n	800347c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	ee07 3a90 	vmov	s15, r3
 80033fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033fe:	eddf 6a38 	vldr	s13, [pc, #224]	; 80034e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003406:	4b2f      	ldr	r3, [pc, #188]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800340e:	ee07 3a90 	vmov	s15, r3
 8003412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003416:	ed97 6a02 	vldr	s12, [r7, #8]
 800341a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80034d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800341e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800342a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800342e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003432:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003436:	e021      	b.n	800347c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	ee07 3a90 	vmov	s15, r3
 800343e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003442:	eddf 6a26 	vldr	s13, [pc, #152]	; 80034dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800344a:	4b1e      	ldr	r3, [pc, #120]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003452:	ee07 3a90 	vmov	s15, r3
 8003456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800345a:	ed97 6a02 	vldr	s12, [r7, #8]
 800345e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80034d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800346a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800346e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003476:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800347a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800347c:	4b11      	ldr	r3, [pc, #68]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800347e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003480:	0a5b      	lsrs	r3, r3, #9
 8003482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003486:	3301      	adds	r3, #1
 8003488:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	ee07 3a90 	vmov	s15, r3
 8003490:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003494:	edd7 6a07 	vldr	s13, [r7, #28]
 8003498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800349c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034a0:	ee17 3a90 	vmov	r3, s15
 80034a4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80034a6:	e005      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	61bb      	str	r3, [r7, #24]
    break;
 80034ac:	e002      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80034ae:	4b07      	ldr	r3, [pc, #28]	; (80034cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034b0:	61bb      	str	r3, [r7, #24]
    break;
 80034b2:	bf00      	nop
  }

  return sysclockfreq;
 80034b4:	69bb      	ldr	r3, [r7, #24]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3724      	adds	r7, #36	; 0x24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	58024400 	.word	0x58024400
 80034c8:	03d09000 	.word	0x03d09000
 80034cc:	003d0900 	.word	0x003d0900
 80034d0:	007a1200 	.word	0x007a1200
 80034d4:	46000000 	.word	0x46000000
 80034d8:	4c742400 	.word	0x4c742400
 80034dc:	4a742400 	.word	0x4a742400
 80034e0:	4af42400 	.word	0x4af42400

080034e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034ea:	f7ff fe81 	bl	80031f0 <HAL_RCC_GetSysClockFreq>
 80034ee:	4602      	mov	r2, r0
 80034f0:	4b10      	ldr	r3, [pc, #64]	; (8003534 <HAL_RCC_GetHCLKFreq+0x50>)
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	0a1b      	lsrs	r3, r3, #8
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	490f      	ldr	r1, [pc, #60]	; (8003538 <HAL_RCC_GetHCLKFreq+0x54>)
 80034fc:	5ccb      	ldrb	r3, [r1, r3]
 80034fe:	f003 031f 	and.w	r3, r3, #31
 8003502:	fa22 f303 	lsr.w	r3, r2, r3
 8003506:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003508:	4b0a      	ldr	r3, [pc, #40]	; (8003534 <HAL_RCC_GetHCLKFreq+0x50>)
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	f003 030f 	and.w	r3, r3, #15
 8003510:	4a09      	ldr	r2, [pc, #36]	; (8003538 <HAL_RCC_GetHCLKFreq+0x54>)
 8003512:	5cd3      	ldrb	r3, [r2, r3]
 8003514:	f003 031f 	and.w	r3, r3, #31
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	fa22 f303 	lsr.w	r3, r2, r3
 800351e:	4a07      	ldr	r2, [pc, #28]	; (800353c <HAL_RCC_GetHCLKFreq+0x58>)
 8003520:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003522:	4a07      	ldr	r2, [pc, #28]	; (8003540 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003528:	4b04      	ldr	r3, [pc, #16]	; (800353c <HAL_RCC_GetHCLKFreq+0x58>)
 800352a:	681b      	ldr	r3, [r3, #0]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	58024400 	.word	0x58024400
 8003538:	0800a414 	.word	0x0800a414
 800353c:	24000004 	.word	0x24000004
 8003540:	24000000 	.word	0x24000000

08003544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003548:	f7ff ffcc 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 800354c:	4602      	mov	r2, r0
 800354e:	4b06      	ldr	r3, [pc, #24]	; (8003568 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	091b      	lsrs	r3, r3, #4
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	4904      	ldr	r1, [pc, #16]	; (800356c <HAL_RCC_GetPCLK1Freq+0x28>)
 800355a:	5ccb      	ldrb	r3, [r1, r3]
 800355c:	f003 031f 	and.w	r3, r3, #31
 8003560:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003564:	4618      	mov	r0, r3
 8003566:	bd80      	pop	{r7, pc}
 8003568:	58024400 	.word	0x58024400
 800356c:	0800a414 	.word	0x0800a414

08003570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003574:	f7ff ffb6 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 8003578:	4602      	mov	r2, r0
 800357a:	4b06      	ldr	r3, [pc, #24]	; (8003594 <HAL_RCC_GetPCLK2Freq+0x24>)
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	0a1b      	lsrs	r3, r3, #8
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	4904      	ldr	r1, [pc, #16]	; (8003598 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003586:	5ccb      	ldrb	r3, [r1, r3]
 8003588:	f003 031f 	and.w	r3, r3, #31
 800358c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003590:	4618      	mov	r0, r3
 8003592:	bd80      	pop	{r7, pc}
 8003594:	58024400 	.word	0x58024400
 8003598:	0800a414 	.word	0x0800a414

0800359c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035a4:	2300      	movs	r3, #0
 80035a6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035a8:	2300      	movs	r3, #0
 80035aa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d03f      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035c0:	d02a      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80035c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035c6:	d824      	bhi.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035cc:	d018      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035d2:	d81e      	bhi.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80035d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035dc:	d007      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 80035de:	e018      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035e0:	4bab      	ldr	r3, [pc, #684]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	4aaa      	ldr	r2, [pc, #680]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80035ec:	e015      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3304      	adds	r3, #4
 80035f2:	2102      	movs	r1, #2
 80035f4:	4618      	mov	r0, r3
 80035f6:	f001 fff3 	bl	80055e0 <RCCEx_PLL2_Config>
 80035fa:	4603      	mov	r3, r0
 80035fc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80035fe:	e00c      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3324      	adds	r3, #36	; 0x24
 8003604:	2102      	movs	r1, #2
 8003606:	4618      	mov	r0, r3
 8003608:	f002 f89c 	bl	8005744 <RCCEx_PLL3_Config>
 800360c:	4603      	mov	r3, r0
 800360e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003610:	e003      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	75fb      	strb	r3, [r7, #23]
      break;
 8003616:	e000      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003618:	bf00      	nop
    }

    if(ret == HAL_OK)
 800361a:	7dfb      	ldrb	r3, [r7, #23]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d109      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003620:	4b9b      	ldr	r3, [pc, #620]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003624:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800362c:	4998      	ldr	r1, [pc, #608]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800362e:	4313      	orrs	r3, r2
 8003630:	650b      	str	r3, [r1, #80]	; 0x50
 8003632:	e001      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003634:	7dfb      	ldrb	r3, [r7, #23]
 8003636:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003640:	2b00      	cmp	r3, #0
 8003642:	d03d      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003648:	2b04      	cmp	r3, #4
 800364a:	d826      	bhi.n	800369a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800364c:	a201      	add	r2, pc, #4	; (adr r2, 8003654 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800364e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003652:	bf00      	nop
 8003654:	08003669 	.word	0x08003669
 8003658:	08003677 	.word	0x08003677
 800365c:	08003689 	.word	0x08003689
 8003660:	080036a1 	.word	0x080036a1
 8003664:	080036a1 	.word	0x080036a1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003668:	4b89      	ldr	r3, [pc, #548]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800366a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366c:	4a88      	ldr	r2, [pc, #544]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800366e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003672:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003674:	e015      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3304      	adds	r3, #4
 800367a:	2100      	movs	r1, #0
 800367c:	4618      	mov	r0, r3
 800367e:	f001 ffaf 	bl	80055e0 <RCCEx_PLL2_Config>
 8003682:	4603      	mov	r3, r0
 8003684:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003686:	e00c      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3324      	adds	r3, #36	; 0x24
 800368c:	2100      	movs	r1, #0
 800368e:	4618      	mov	r0, r3
 8003690:	f002 f858 	bl	8005744 <RCCEx_PLL3_Config>
 8003694:	4603      	mov	r3, r0
 8003696:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003698:	e003      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	75fb      	strb	r3, [r7, #23]
      break;
 800369e:	e000      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80036a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036a2:	7dfb      	ldrb	r3, [r7, #23]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d109      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036a8:	4b79      	ldr	r3, [pc, #484]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ac:	f023 0207 	bic.w	r2, r3, #7
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b4:	4976      	ldr	r1, [pc, #472]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	650b      	str	r3, [r1, #80]	; 0x50
 80036ba:	e001      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036bc:	7dfb      	ldrb	r3, [r7, #23]
 80036be:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d042      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036d4:	d02b      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80036d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036da:	d825      	bhi.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80036dc:	2bc0      	cmp	r3, #192	; 0xc0
 80036de:	d028      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80036e0:	2bc0      	cmp	r3, #192	; 0xc0
 80036e2:	d821      	bhi.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80036e4:	2b80      	cmp	r3, #128	; 0x80
 80036e6:	d016      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80036e8:	2b80      	cmp	r3, #128	; 0x80
 80036ea:	d81d      	bhi.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d002      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80036f0:	2b40      	cmp	r3, #64	; 0x40
 80036f2:	d007      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80036f4:	e018      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036f6:	4b66      	ldr	r3, [pc, #408]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fa:	4a65      	ldr	r2, [pc, #404]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003700:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003702:	e017      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3304      	adds	r3, #4
 8003708:	2100      	movs	r1, #0
 800370a:	4618      	mov	r0, r3
 800370c:	f001 ff68 	bl	80055e0 <RCCEx_PLL2_Config>
 8003710:	4603      	mov	r3, r0
 8003712:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003714:	e00e      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3324      	adds	r3, #36	; 0x24
 800371a:	2100      	movs	r1, #0
 800371c:	4618      	mov	r0, r3
 800371e:	f002 f811 	bl	8005744 <RCCEx_PLL3_Config>
 8003722:	4603      	mov	r3, r0
 8003724:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003726:	e005      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	75fb      	strb	r3, [r7, #23]
      break;
 800372c:	e002      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800372e:	bf00      	nop
 8003730:	e000      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003732:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003734:	7dfb      	ldrb	r3, [r7, #23]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d109      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800373a:	4b55      	ldr	r3, [pc, #340]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800373c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003746:	4952      	ldr	r1, [pc, #328]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003748:	4313      	orrs	r3, r2
 800374a:	650b      	str	r3, [r1, #80]	; 0x50
 800374c:	e001      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800374e:	7dfb      	ldrb	r3, [r7, #23]
 8003750:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800375a:	2b00      	cmp	r3, #0
 800375c:	d049      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003764:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003768:	d030      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800376a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800376e:	d82a      	bhi.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003770:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003774:	d02c      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003776:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800377a:	d824      	bhi.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800377c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003780:	d018      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003782:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003786:	d81e      	bhi.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800378c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003790:	d007      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003792:	e018      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003794:	4b3e      	ldr	r3, [pc, #248]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003798:	4a3d      	ldr	r2, [pc, #244]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800379a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800379e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037a0:	e017      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3304      	adds	r3, #4
 80037a6:	2100      	movs	r1, #0
 80037a8:	4618      	mov	r0, r3
 80037aa:	f001 ff19 	bl	80055e0 <RCCEx_PLL2_Config>
 80037ae:	4603      	mov	r3, r0
 80037b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80037b2:	e00e      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3324      	adds	r3, #36	; 0x24
 80037b8:	2100      	movs	r1, #0
 80037ba:	4618      	mov	r0, r3
 80037bc:	f001 ffc2 	bl	8005744 <RCCEx_PLL3_Config>
 80037c0:	4603      	mov	r3, r0
 80037c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037c4:	e005      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	75fb      	strb	r3, [r7, #23]
      break;
 80037ca:	e002      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80037cc:	bf00      	nop
 80037ce:	e000      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80037d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037d2:	7dfb      	ldrb	r3, [r7, #23]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10a      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80037d8:	4b2d      	ldr	r3, [pc, #180]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037dc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037e6:	492a      	ldr	r1, [pc, #168]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	658b      	str	r3, [r1, #88]	; 0x58
 80037ec:	e001      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ee:	7dfb      	ldrb	r3, [r7, #23]
 80037f0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d04c      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003804:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003808:	d030      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800380a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800380e:	d82a      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003810:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003814:	d02c      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003816:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800381a:	d824      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800381c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003820:	d018      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003822:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003826:	d81e      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800382c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003830:	d007      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003832:	e018      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003834:	4b16      	ldr	r3, [pc, #88]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	4a15      	ldr	r2, [pc, #84]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800383a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800383e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003840:	e017      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	3304      	adds	r3, #4
 8003846:	2100      	movs	r1, #0
 8003848:	4618      	mov	r0, r3
 800384a:	f001 fec9 	bl	80055e0 <RCCEx_PLL2_Config>
 800384e:	4603      	mov	r3, r0
 8003850:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003852:	e00e      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3324      	adds	r3, #36	; 0x24
 8003858:	2100      	movs	r1, #0
 800385a:	4618      	mov	r0, r3
 800385c:	f001 ff72 	bl	8005744 <RCCEx_PLL3_Config>
 8003860:	4603      	mov	r3, r0
 8003862:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003864:	e005      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	75fb      	strb	r3, [r7, #23]
      break;
 800386a:	e002      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800386c:	bf00      	nop
 800386e:	e000      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003870:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003872:	7dfb      	ldrb	r3, [r7, #23]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10d      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003878:	4b05      	ldr	r3, [pc, #20]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800387a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003886:	4902      	ldr	r1, [pc, #8]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003888:	4313      	orrs	r3, r2
 800388a:	658b      	str	r3, [r1, #88]	; 0x58
 800388c:	e004      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800388e:	bf00      	nop
 8003890:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003894:	7dfb      	ldrb	r3, [r7, #23]
 8003896:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d032      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a8:	2b30      	cmp	r3, #48	; 0x30
 80038aa:	d01c      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80038ac:	2b30      	cmp	r3, #48	; 0x30
 80038ae:	d817      	bhi.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80038b0:	2b20      	cmp	r3, #32
 80038b2:	d00c      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x332>
 80038b4:	2b20      	cmp	r3, #32
 80038b6:	d813      	bhi.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d016      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80038bc:	2b10      	cmp	r3, #16
 80038be:	d10f      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038c0:	4baf      	ldr	r3, [pc, #700]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c4:	4aae      	ldr	r2, [pc, #696]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80038cc:	e00e      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	3304      	adds	r3, #4
 80038d2:	2102      	movs	r1, #2
 80038d4:	4618      	mov	r0, r3
 80038d6:	f001 fe83 	bl	80055e0 <RCCEx_PLL2_Config>
 80038da:	4603      	mov	r3, r0
 80038dc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80038de:	e005      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	75fb      	strb	r3, [r7, #23]
      break;
 80038e4:	e002      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80038e6:	bf00      	nop
 80038e8:	e000      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80038ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ec:	7dfb      	ldrb	r3, [r7, #23]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d109      	bne.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80038f2:	4ba3      	ldr	r3, [pc, #652]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038fe:	49a0      	ldr	r1, [pc, #640]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003900:	4313      	orrs	r3, r2
 8003902:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003904:	e001      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003906:	7dfb      	ldrb	r3, [r7, #23]
 8003908:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d047      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800391e:	d030      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003920:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003924:	d82a      	bhi.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003926:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800392a:	d02c      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800392c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003930:	d824      	bhi.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003936:	d018      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003938:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800393c:	d81e      	bhi.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003946:	d007      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003948:	e018      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800394a:	4b8d      	ldr	r3, [pc, #564]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800394c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394e:	4a8c      	ldr	r2, [pc, #560]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003954:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003956:	e017      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3304      	adds	r3, #4
 800395c:	2100      	movs	r1, #0
 800395e:	4618      	mov	r0, r3
 8003960:	f001 fe3e 	bl	80055e0 <RCCEx_PLL2_Config>
 8003964:	4603      	mov	r3, r0
 8003966:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003968:	e00e      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	3324      	adds	r3, #36	; 0x24
 800396e:	2100      	movs	r1, #0
 8003970:	4618      	mov	r0, r3
 8003972:	f001 fee7 	bl	8005744 <RCCEx_PLL3_Config>
 8003976:	4603      	mov	r3, r0
 8003978:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800397a:	e005      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	75fb      	strb	r3, [r7, #23]
      break;
 8003980:	e002      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003982:	bf00      	nop
 8003984:	e000      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003986:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003988:	7dfb      	ldrb	r3, [r7, #23]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d109      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800398e:	4b7c      	ldr	r3, [pc, #496]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003992:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399a:	4979      	ldr	r1, [pc, #484]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800399c:	4313      	orrs	r3, r2
 800399e:	650b      	str	r3, [r1, #80]	; 0x50
 80039a0:	e001      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a2:	7dfb      	ldrb	r3, [r7, #23]
 80039a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d049      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039ba:	d02e      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80039bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039c0:	d828      	bhi.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80039c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039c6:	d02a      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x482>
 80039c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039cc:	d822      	bhi.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80039ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039d2:	d026      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80039d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039d8:	d81c      	bhi.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80039da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039de:	d010      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80039e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039e4:	d816      	bhi.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d01d      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80039ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ee:	d111      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3304      	adds	r3, #4
 80039f4:	2101      	movs	r1, #1
 80039f6:	4618      	mov	r0, r3
 80039f8:	f001 fdf2 	bl	80055e0 <RCCEx_PLL2_Config>
 80039fc:	4603      	mov	r3, r0
 80039fe:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a00:	e012      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3324      	adds	r3, #36	; 0x24
 8003a06:	2101      	movs	r1, #1
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f001 fe9b 	bl	8005744 <RCCEx_PLL3_Config>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a12:	e009      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	75fb      	strb	r3, [r7, #23]
      break;
 8003a18:	e006      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003a1a:	bf00      	nop
 8003a1c:	e004      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003a1e:	bf00      	nop
 8003a20:	e002      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003a22:	bf00      	nop
 8003a24:	e000      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003a26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a28:	7dfb      	ldrb	r3, [r7, #23]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d109      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a2e:	4b54      	ldr	r3, [pc, #336]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a32:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3a:	4951      	ldr	r1, [pc, #324]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	650b      	str	r3, [r1, #80]	; 0x50
 8003a40:	e001      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a42:	7dfb      	ldrb	r3, [r7, #23]
 8003a44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d04b      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a5c:	d02e      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003a5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a62:	d828      	bhi.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a68:	d02a      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a6e:	d822      	bhi.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003a70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a74:	d026      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003a76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a7a:	d81c      	bhi.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003a7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a80:	d010      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003a82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a86:	d816      	bhi.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d01d      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003a8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a90:	d111      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3304      	adds	r3, #4
 8003a96:	2101      	movs	r1, #1
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f001 fda1 	bl	80055e0 <RCCEx_PLL2_Config>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003aa2:	e012      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3324      	adds	r3, #36	; 0x24
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f001 fe4a 	bl	8005744 <RCCEx_PLL3_Config>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003ab4:	e009      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	75fb      	strb	r3, [r7, #23]
      break;
 8003aba:	e006      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003abc:	bf00      	nop
 8003abe:	e004      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003ac0:	bf00      	nop
 8003ac2:	e002      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003ac4:	bf00      	nop
 8003ac6:	e000      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003ac8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aca:	7dfb      	ldrb	r3, [r7, #23]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10a      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ad0:	4b2b      	ldr	r3, [pc, #172]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ade:	4928      	ldr	r1, [pc, #160]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	658b      	str	r3, [r1, #88]	; 0x58
 8003ae4:	e001      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae6:	7dfb      	ldrb	r3, [r7, #23]
 8003ae8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d02f      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003afa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003afe:	d00e      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003b00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b04:	d814      	bhi.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d015      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003b0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b0e:	d10f      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b10:	4b1b      	ldr	r3, [pc, #108]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	4a1a      	ldr	r2, [pc, #104]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b1c:	e00c      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	3304      	adds	r3, #4
 8003b22:	2101      	movs	r1, #1
 8003b24:	4618      	mov	r0, r3
 8003b26:	f001 fd5b 	bl	80055e0 <RCCEx_PLL2_Config>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b2e:	e003      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	75fb      	strb	r3, [r7, #23]
      break;
 8003b34:	e000      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003b36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b38:	7dfb      	ldrb	r3, [r7, #23]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d109      	bne.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b3e:	4b10      	ldr	r3, [pc, #64]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b4a:	490d      	ldr	r1, [pc, #52]	; (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	650b      	str	r3, [r1, #80]	; 0x50
 8003b50:	e001      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b52:	7dfb      	ldrb	r3, [r7, #23]
 8003b54:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d033      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b66:	2b03      	cmp	r3, #3
 8003b68:	d81c      	bhi.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003b6a:	a201      	add	r2, pc, #4	; (adr r2, 8003b70 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b70:	08003bab 	.word	0x08003bab
 8003b74:	08003b85 	.word	0x08003b85
 8003b78:	08003b93 	.word	0x08003b93
 8003b7c:	08003bab 	.word	0x08003bab
 8003b80:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b84:	4bb8      	ldr	r3, [pc, #736]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	4ab7      	ldr	r2, [pc, #732]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003b90:	e00c      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	3304      	adds	r3, #4
 8003b96:	2102      	movs	r1, #2
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f001 fd21 	bl	80055e0 <RCCEx_PLL2_Config>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003ba2:	e003      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ba8:	e000      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003baa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bac:	7dfb      	ldrb	r3, [r7, #23]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d109      	bne.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003bb2:	4bad      	ldr	r3, [pc, #692]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb6:	f023 0203 	bic.w	r2, r3, #3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbe:	49aa      	ldr	r1, [pc, #680]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003bc4:	e001      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc6:	7dfb      	ldrb	r3, [r7, #23]
 8003bc8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 8086 	beq.w	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bd8:	4ba4      	ldr	r3, [pc, #656]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4aa3      	ldr	r2, [pc, #652]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003be4:	f7fd fc7c 	bl	80014e0 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bea:	e009      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bec:	f7fd fc78 	bl	80014e0 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b64      	cmp	r3, #100	; 0x64
 8003bf8:	d902      	bls.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	75fb      	strb	r3, [r7, #23]
        break;
 8003bfe:	e005      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c00:	4b9a      	ldr	r3, [pc, #616]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0ef      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003c0c:	7dfb      	ldrb	r3, [r7, #23]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d166      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003c12:	4b95      	ldr	r3, [pc, #596]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c1c:	4053      	eors	r3, r2
 8003c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d013      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c26:	4b90      	ldr	r3, [pc, #576]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c2e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c30:	4b8d      	ldr	r3, [pc, #564]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c34:	4a8c      	ldr	r2, [pc, #560]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c3a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c3c:	4b8a      	ldr	r3, [pc, #552]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c40:	4a89      	ldr	r2, [pc, #548]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c46:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c48:	4a87      	ldr	r2, [pc, #540]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c58:	d115      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5a:	f7fd fc41 	bl	80014e0 <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c60:	e00b      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c62:	f7fd fc3d 	bl	80014e0 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d902      	bls.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	75fb      	strb	r3, [r7, #23]
            break;
 8003c78:	e005      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c7a:	4b7b      	ldr	r3, [pc, #492]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0ed      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003c86:	7dfb      	ldrb	r3, [r7, #23]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d126      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c9a:	d10d      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003c9c:	4b72      	ldr	r3, [pc, #456]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003caa:	0919      	lsrs	r1, r3, #4
 8003cac:	4b70      	ldr	r3, [pc, #448]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003cae:	400b      	ands	r3, r1
 8003cb0:	496d      	ldr	r1, [pc, #436]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	610b      	str	r3, [r1, #16]
 8003cb6:	e005      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003cb8:	4b6b      	ldr	r3, [pc, #428]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	4a6a      	ldr	r2, [pc, #424]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cbe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003cc2:	6113      	str	r3, [r2, #16]
 8003cc4:	4b68      	ldr	r3, [pc, #416]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cc6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd2:	4965      	ldr	r1, [pc, #404]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	670b      	str	r3, [r1, #112]	; 0x70
 8003cd8:	e004      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cda:	7dfb      	ldrb	r3, [r7, #23]
 8003cdc:	75bb      	strb	r3, [r7, #22]
 8003cde:	e001      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce0:	7dfb      	ldrb	r3, [r7, #23]
 8003ce2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d07e      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cf4:	2b28      	cmp	r3, #40	; 0x28
 8003cf6:	d867      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003cf8:	a201      	add	r2, pc, #4	; (adr r2, 8003d00 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfe:	bf00      	nop
 8003d00:	08003dcf 	.word	0x08003dcf
 8003d04:	08003dc9 	.word	0x08003dc9
 8003d08:	08003dc9 	.word	0x08003dc9
 8003d0c:	08003dc9 	.word	0x08003dc9
 8003d10:	08003dc9 	.word	0x08003dc9
 8003d14:	08003dc9 	.word	0x08003dc9
 8003d18:	08003dc9 	.word	0x08003dc9
 8003d1c:	08003dc9 	.word	0x08003dc9
 8003d20:	08003da5 	.word	0x08003da5
 8003d24:	08003dc9 	.word	0x08003dc9
 8003d28:	08003dc9 	.word	0x08003dc9
 8003d2c:	08003dc9 	.word	0x08003dc9
 8003d30:	08003dc9 	.word	0x08003dc9
 8003d34:	08003dc9 	.word	0x08003dc9
 8003d38:	08003dc9 	.word	0x08003dc9
 8003d3c:	08003dc9 	.word	0x08003dc9
 8003d40:	08003db7 	.word	0x08003db7
 8003d44:	08003dc9 	.word	0x08003dc9
 8003d48:	08003dc9 	.word	0x08003dc9
 8003d4c:	08003dc9 	.word	0x08003dc9
 8003d50:	08003dc9 	.word	0x08003dc9
 8003d54:	08003dc9 	.word	0x08003dc9
 8003d58:	08003dc9 	.word	0x08003dc9
 8003d5c:	08003dc9 	.word	0x08003dc9
 8003d60:	08003dcf 	.word	0x08003dcf
 8003d64:	08003dc9 	.word	0x08003dc9
 8003d68:	08003dc9 	.word	0x08003dc9
 8003d6c:	08003dc9 	.word	0x08003dc9
 8003d70:	08003dc9 	.word	0x08003dc9
 8003d74:	08003dc9 	.word	0x08003dc9
 8003d78:	08003dc9 	.word	0x08003dc9
 8003d7c:	08003dc9 	.word	0x08003dc9
 8003d80:	08003dcf 	.word	0x08003dcf
 8003d84:	08003dc9 	.word	0x08003dc9
 8003d88:	08003dc9 	.word	0x08003dc9
 8003d8c:	08003dc9 	.word	0x08003dc9
 8003d90:	08003dc9 	.word	0x08003dc9
 8003d94:	08003dc9 	.word	0x08003dc9
 8003d98:	08003dc9 	.word	0x08003dc9
 8003d9c:	08003dc9 	.word	0x08003dc9
 8003da0:	08003dcf 	.word	0x08003dcf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3304      	adds	r3, #4
 8003da8:	2101      	movs	r1, #1
 8003daa:	4618      	mov	r0, r3
 8003dac:	f001 fc18 	bl	80055e0 <RCCEx_PLL2_Config>
 8003db0:	4603      	mov	r3, r0
 8003db2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003db4:	e00c      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3324      	adds	r3, #36	; 0x24
 8003dba:	2101      	movs	r1, #1
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f001 fcc1 	bl	8005744 <RCCEx_PLL3_Config>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003dc6:	e003      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	75fb      	strb	r3, [r7, #23]
      break;
 8003dcc:	e000      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003dce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dd0:	7dfb      	ldrb	r3, [r7, #23]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d109      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003dd6:	4b24      	ldr	r3, [pc, #144]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dda:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003de2:	4921      	ldr	r1, [pc, #132]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	654b      	str	r3, [r1, #84]	; 0x54
 8003de8:	e001      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dea:	7dfb      	ldrb	r3, [r7, #23]
 8003dec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d03e      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dfe:	2b05      	cmp	r3, #5
 8003e00:	d820      	bhi.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003e02:	a201      	add	r2, pc, #4	; (adr r2, 8003e08 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e08:	08003e4b 	.word	0x08003e4b
 8003e0c:	08003e21 	.word	0x08003e21
 8003e10:	08003e33 	.word	0x08003e33
 8003e14:	08003e4b 	.word	0x08003e4b
 8003e18:	08003e4b 	.word	0x08003e4b
 8003e1c:	08003e4b 	.word	0x08003e4b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	3304      	adds	r3, #4
 8003e24:	2101      	movs	r1, #1
 8003e26:	4618      	mov	r0, r3
 8003e28:	f001 fbda 	bl	80055e0 <RCCEx_PLL2_Config>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e30:	e00c      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3324      	adds	r3, #36	; 0x24
 8003e36:	2101      	movs	r1, #1
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f001 fc83 	bl	8005744 <RCCEx_PLL3_Config>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e42:	e003      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	75fb      	strb	r3, [r7, #23]
      break;
 8003e48:	e000      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003e4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e4c:	7dfb      	ldrb	r3, [r7, #23]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d110      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e52:	4b05      	ldr	r3, [pc, #20]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e56:	f023 0207 	bic.w	r2, r3, #7
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e5e:	4902      	ldr	r1, [pc, #8]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	654b      	str	r3, [r1, #84]	; 0x54
 8003e64:	e008      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003e66:	bf00      	nop
 8003e68:	58024400 	.word	0x58024400
 8003e6c:	58024800 	.word	0x58024800
 8003e70:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e74:	7dfb      	ldrb	r3, [r7, #23]
 8003e76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d039      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8a:	2b05      	cmp	r3, #5
 8003e8c:	d820      	bhi.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003e8e:	a201      	add	r2, pc, #4	; (adr r2, 8003e94 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e94:	08003ed7 	.word	0x08003ed7
 8003e98:	08003ead 	.word	0x08003ead
 8003e9c:	08003ebf 	.word	0x08003ebf
 8003ea0:	08003ed7 	.word	0x08003ed7
 8003ea4:	08003ed7 	.word	0x08003ed7
 8003ea8:	08003ed7 	.word	0x08003ed7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f001 fb94 	bl	80055e0 <RCCEx_PLL2_Config>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003ebc:	e00c      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	3324      	adds	r3, #36	; 0x24
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f001 fc3d 	bl	8005744 <RCCEx_PLL3_Config>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003ece:	e003      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ed4:	e000      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003ed6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ed8:	7dfb      	ldrb	r3, [r7, #23]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10a      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ede:	4bb7      	ldr	r3, [pc, #732]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee2:	f023 0207 	bic.w	r2, r3, #7
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eec:	49b3      	ldr	r1, [pc, #716]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	658b      	str	r3, [r1, #88]	; 0x58
 8003ef2:	e001      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef4:	7dfb      	ldrb	r3, [r7, #23]
 8003ef6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0320 	and.w	r3, r3, #32
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d04b      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f0e:	d02e      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f14:	d828      	bhi.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f1a:	d02a      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f20:	d822      	bhi.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003f22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f26:	d026      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003f28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f2c:	d81c      	bhi.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003f2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f32:	d010      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f38:	d816      	bhi.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d01d      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003f3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f42:	d111      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3304      	adds	r3, #4
 8003f48:	2100      	movs	r1, #0
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f001 fb48 	bl	80055e0 <RCCEx_PLL2_Config>
 8003f50:	4603      	mov	r3, r0
 8003f52:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003f54:	e012      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	3324      	adds	r3, #36	; 0x24
 8003f5a:	2102      	movs	r1, #2
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f001 fbf1 	bl	8005744 <RCCEx_PLL3_Config>
 8003f62:	4603      	mov	r3, r0
 8003f64:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003f66:	e009      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f6c:	e006      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003f6e:	bf00      	nop
 8003f70:	e004      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003f72:	bf00      	nop
 8003f74:	e002      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003f76:	bf00      	nop
 8003f78:	e000      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003f7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f7c:	7dfb      	ldrb	r3, [r7, #23]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10a      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f82:	4b8e      	ldr	r3, [pc, #568]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f86:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f90:	498a      	ldr	r1, [pc, #552]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	654b      	str	r3, [r1, #84]	; 0x54
 8003f96:	e001      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f98:	7dfb      	ldrb	r3, [r7, #23]
 8003f9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d04b      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003fb2:	d02e      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003fb4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003fb8:	d828      	bhi.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fbe:	d02a      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc4:	d822      	bhi.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003fc6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fca:	d026      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003fcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fd0:	d81c      	bhi.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003fd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fd6:	d010      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fdc:	d816      	bhi.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d01d      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fe6:	d111      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3304      	adds	r3, #4
 8003fec:	2100      	movs	r1, #0
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f001 faf6 	bl	80055e0 <RCCEx_PLL2_Config>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003ff8:	e012      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3324      	adds	r3, #36	; 0x24
 8003ffe:	2102      	movs	r1, #2
 8004000:	4618      	mov	r0, r3
 8004002:	f001 fb9f 	bl	8005744 <RCCEx_PLL3_Config>
 8004006:	4603      	mov	r3, r0
 8004008:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800400a:	e009      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	75fb      	strb	r3, [r7, #23]
      break;
 8004010:	e006      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004012:	bf00      	nop
 8004014:	e004      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004016:	bf00      	nop
 8004018:	e002      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800401a:	bf00      	nop
 800401c:	e000      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800401e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004020:	7dfb      	ldrb	r3, [r7, #23]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10a      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004026:	4b65      	ldr	r3, [pc, #404]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004034:	4961      	ldr	r1, [pc, #388]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004036:	4313      	orrs	r3, r2
 8004038:	658b      	str	r3, [r1, #88]	; 0x58
 800403a:	e001      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800403c:	7dfb      	ldrb	r3, [r7, #23]
 800403e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004048:	2b00      	cmp	r3, #0
 800404a:	d04b      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004052:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004056:	d02e      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004058:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800405c:	d828      	bhi.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800405e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004062:	d02a      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8004064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004068:	d822      	bhi.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800406a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800406e:	d026      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004070:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004074:	d81c      	bhi.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004076:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800407a:	d010      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800407c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004080:	d816      	bhi.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004082:	2b00      	cmp	r3, #0
 8004084:	d01d      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800408a:	d111      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3304      	adds	r3, #4
 8004090:	2100      	movs	r1, #0
 8004092:	4618      	mov	r0, r3
 8004094:	f001 faa4 	bl	80055e0 <RCCEx_PLL2_Config>
 8004098:	4603      	mov	r3, r0
 800409a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800409c:	e012      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	3324      	adds	r3, #36	; 0x24
 80040a2:	2102      	movs	r1, #2
 80040a4:	4618      	mov	r0, r3
 80040a6:	f001 fb4d 	bl	8005744 <RCCEx_PLL3_Config>
 80040aa:	4603      	mov	r3, r0
 80040ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80040ae:	e009      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	75fb      	strb	r3, [r7, #23]
      break;
 80040b4:	e006      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80040b6:	bf00      	nop
 80040b8:	e004      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80040ba:	bf00      	nop
 80040bc:	e002      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80040be:	bf00      	nop
 80040c0:	e000      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80040c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040c4:	7dfb      	ldrb	r3, [r7, #23]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10a      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040ca:	4b3c      	ldr	r3, [pc, #240]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80040cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040d8:	4938      	ldr	r1, [pc, #224]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	658b      	str	r3, [r1, #88]	; 0x58
 80040de:	e001      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e0:	7dfb      	ldrb	r3, [r7, #23]
 80040e2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d01a      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040fa:	d10a      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3324      	adds	r3, #36	; 0x24
 8004100:	2102      	movs	r1, #2
 8004102:	4618      	mov	r0, r3
 8004104:	f001 fb1e 	bl	8005744 <RCCEx_PLL3_Config>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004112:	4b2a      	ldr	r3, [pc, #168]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004116:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004120:	4926      	ldr	r1, [pc, #152]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004122:	4313      	orrs	r3, r2
 8004124:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0310 	and.w	r3, r3, #16
 800412e:	2b00      	cmp	r3, #0
 8004130:	d01a      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800413c:	d10a      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3324      	adds	r3, #36	; 0x24
 8004142:	2102      	movs	r1, #2
 8004144:	4618      	mov	r0, r3
 8004146:	f001 fafd 	bl	8005744 <RCCEx_PLL3_Config>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004154:	4b19      	ldr	r3, [pc, #100]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004158:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004162:	4916      	ldr	r1, [pc, #88]	; (80041bc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004164:	4313      	orrs	r3, r2
 8004166:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d036      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800417a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800417e:	d01f      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004180:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004184:	d817      	bhi.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800418a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800418e:	d009      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004190:	e011      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	3304      	adds	r3, #4
 8004196:	2100      	movs	r1, #0
 8004198:	4618      	mov	r0, r3
 800419a:	f001 fa21 	bl	80055e0 <RCCEx_PLL2_Config>
 800419e:	4603      	mov	r3, r0
 80041a0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80041a2:	e00e      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3324      	adds	r3, #36	; 0x24
 80041a8:	2102      	movs	r1, #2
 80041aa:	4618      	mov	r0, r3
 80041ac:	f001 faca 	bl	8005744 <RCCEx_PLL3_Config>
 80041b0:	4603      	mov	r3, r0
 80041b2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80041b4:	e005      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	75fb      	strb	r3, [r7, #23]
      break;
 80041ba:	e002      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80041bc:	58024400 	.word	0x58024400
      break;
 80041c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041c2:	7dfb      	ldrb	r3, [r7, #23]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10a      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041c8:	4b93      	ldr	r3, [pc, #588]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041d6:	4990      	ldr	r1, [pc, #576]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	658b      	str	r3, [r1, #88]	; 0x58
 80041dc:	e001      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041de:	7dfb      	ldrb	r3, [r7, #23]
 80041e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d033      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041f8:	d01c      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80041fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041fe:	d816      	bhi.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004200:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004204:	d003      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004206:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800420a:	d007      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800420c:	e00f      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800420e:	4b82      	ldr	r3, [pc, #520]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004212:	4a81      	ldr	r2, [pc, #516]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004218:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800421a:	e00c      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3324      	adds	r3, #36	; 0x24
 8004220:	2101      	movs	r1, #1
 8004222:	4618      	mov	r0, r3
 8004224:	f001 fa8e 	bl	8005744 <RCCEx_PLL3_Config>
 8004228:	4603      	mov	r3, r0
 800422a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800422c:	e003      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	75fb      	strb	r3, [r7, #23]
      break;
 8004232:	e000      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004234:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004236:	7dfb      	ldrb	r3, [r7, #23]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10a      	bne.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800423c:	4b76      	ldr	r3, [pc, #472]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800423e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004240:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800424a:	4973      	ldr	r1, [pc, #460]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800424c:	4313      	orrs	r3, r2
 800424e:	654b      	str	r3, [r1, #84]	; 0x54
 8004250:	e001      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004252:	7dfb      	ldrb	r3, [r7, #23]
 8004254:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d029      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800426a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800426e:	d007      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004270:	e00f      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004272:	4b69      	ldr	r3, [pc, #420]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004276:	4a68      	ldr	r2, [pc, #416]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800427c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800427e:	e00b      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3304      	adds	r3, #4
 8004284:	2102      	movs	r1, #2
 8004286:	4618      	mov	r0, r3
 8004288:	f001 f9aa 	bl	80055e0 <RCCEx_PLL2_Config>
 800428c:	4603      	mov	r3, r0
 800428e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004290:	e002      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	75fb      	strb	r3, [r7, #23]
      break;
 8004296:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004298:	7dfb      	ldrb	r3, [r7, #23]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d109      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800429e:	4b5e      	ldr	r3, [pc, #376]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042aa:	495b      	ldr	r1, [pc, #364]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	64cb      	str	r3, [r1, #76]	; 0x4c
 80042b0:	e001      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b2:	7dfb      	ldrb	r3, [r7, #23]
 80042b4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00a      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	3324      	adds	r3, #36	; 0x24
 80042c6:	2102      	movs	r1, #2
 80042c8:	4618      	mov	r0, r3
 80042ca:	f001 fa3b 	bl	8005744 <RCCEx_PLL3_Config>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d030      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042ec:	d017      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80042ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042f2:	d811      	bhi.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80042f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f8:	d013      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80042fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042fe:	d80b      	bhi.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004300:	2b00      	cmp	r3, #0
 8004302:	d010      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004308:	d106      	bne.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800430a:	4b43      	ldr	r3, [pc, #268]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800430c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430e:	4a42      	ldr	r2, [pc, #264]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004314:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004316:	e007      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	75fb      	strb	r3, [r7, #23]
      break;
 800431c:	e004      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800431e:	bf00      	nop
 8004320:	e002      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004322:	bf00      	nop
 8004324:	e000      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004326:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004328:	7dfb      	ldrb	r3, [r7, #23]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d109      	bne.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800432e:	4b3a      	ldr	r3, [pc, #232]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004332:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800433a:	4937      	ldr	r1, [pc, #220]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800433c:	4313      	orrs	r3, r2
 800433e:	654b      	str	r3, [r1, #84]	; 0x54
 8004340:	e001      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004342:	7dfb      	ldrb	r3, [r7, #23]
 8004344:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d008      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004352:	4b31      	ldr	r3, [pc, #196]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004356:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435e:	492e      	ldr	r1, [pc, #184]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004360:	4313      	orrs	r3, r2
 8004362:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d009      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004370:	4b29      	ldr	r3, [pc, #164]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800437e:	4926      	ldr	r1, [pc, #152]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004380:	4313      	orrs	r3, r2
 8004382:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d008      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004390:	4b21      	ldr	r3, [pc, #132]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004394:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800439c:	491e      	ldr	r1, [pc, #120]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00d      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043ae:	4b1a      	ldr	r3, [pc, #104]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	4a19      	ldr	r2, [pc, #100]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043b8:	6113      	str	r3, [r2, #16]
 80043ba:	4b17      	ldr	r3, [pc, #92]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043bc:	691a      	ldr	r2, [r3, #16]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80043c4:	4914      	ldr	r1, [pc, #80]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	da08      	bge.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80043d2:	4b11      	ldr	r3, [pc, #68]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043de:	490e      	ldr	r1, [pc, #56]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d009      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043f0:	4b09      	ldr	r3, [pc, #36]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fe:	4906      	ldr	r1, [pc, #24]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004400:	4313      	orrs	r3, r2
 8004402:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004404:	7dbb      	ldrb	r3, [r7, #22]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800440a:	2300      	movs	r3, #0
 800440c:	e000      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
}
 8004410:	4618      	mov	r0, r3
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	58024400 	.word	0x58024400

0800441c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b090      	sub	sp, #64	; 0x40
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800442a:	f040 8095 	bne.w	8004558 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800442e:	4bae      	ldr	r3, [pc, #696]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	633b      	str	r3, [r7, #48]	; 0x30
 8004438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443a:	2b04      	cmp	r3, #4
 800443c:	f200 8088 	bhi.w	8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004440:	a201      	add	r2, pc, #4	; (adr r2, 8004448 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8004442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004446:	bf00      	nop
 8004448:	0800445d 	.word	0x0800445d
 800444c:	08004485 	.word	0x08004485
 8004450:	080044ad 	.word	0x080044ad
 8004454:	08004549 	.word	0x08004549
 8004458:	080044d5 	.word	0x080044d5

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800445c:	4ba2      	ldr	r3, [pc, #648]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004464:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004468:	d108      	bne.n	800447c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800446a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800446e:	4618      	mov	r0, r3
 8004470:	f000 ff64 	bl	800533c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004476:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004478:	f000 bc95 	b.w	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800447c:	2300      	movs	r3, #0
 800447e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004480:	f000 bc91 	b.w	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004484:	4b98      	ldr	r3, [pc, #608]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800448c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004490:	d108      	bne.n	80044a4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004492:	f107 0318 	add.w	r3, r7, #24
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fca8 	bl	8004dec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80044a0:	f000 bc81 	b.w	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80044a4:	2300      	movs	r3, #0
 80044a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80044a8:	f000 bc7d 	b.w	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80044ac:	4b8e      	ldr	r3, [pc, #568]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044b8:	d108      	bne.n	80044cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80044ba:	f107 030c 	add.w	r3, r7, #12
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 fde8 	bl	8005094 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80044c8:	f000 bc6d 	b.w	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80044cc:	2300      	movs	r3, #0
 80044ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80044d0:	f000 bc69 	b.w	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80044d4:	4b84      	ldr	r3, [pc, #528]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80044d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80044dc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80044de:	4b82      	ldr	r3, [pc, #520]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0304 	and.w	r3, r3, #4
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d10c      	bne.n	8004504 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80044ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d109      	bne.n	8004504 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044f0:	4b7d      	ldr	r3, [pc, #500]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	08db      	lsrs	r3, r3, #3
 80044f6:	f003 0303 	and.w	r3, r3, #3
 80044fa:	4a7c      	ldr	r2, [pc, #496]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80044fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004500:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004502:	e01f      	b.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004504:	4b78      	ldr	r3, [pc, #480]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004510:	d106      	bne.n	8004520 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8004512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004514:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004518:	d102      	bne.n	8004520 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800451a:	4b75      	ldr	r3, [pc, #468]	; (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800451c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800451e:	e011      	b.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004520:	4b71      	ldr	r3, [pc, #452]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004528:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800452c:	d106      	bne.n	800453c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800452e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004530:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004534:	d102      	bne.n	800453c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004536:	4b6f      	ldr	r3, [pc, #444]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004538:	63fb      	str	r3, [r7, #60]	; 0x3c
 800453a:	e003      	b.n	8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800453c:	2300      	movs	r3, #0
 800453e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004540:	f000 bc31 	b.w	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004544:	f000 bc2f 	b.w	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004548:	4b6b      	ldr	r3, [pc, #428]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800454a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800454c:	f000 bc2b 	b.w	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8004550:	2300      	movs	r3, #0
 8004552:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004554:	f000 bc27 	b.w	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800455e:	f040 8095 	bne.w	800468c <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8004562:	4b61      	ldr	r3, [pc, #388]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004566:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800456a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800456c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004572:	d04d      	beq.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8004574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800457a:	f200 8084 	bhi.w	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800457e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004580:	2bc0      	cmp	r3, #192	; 0xc0
 8004582:	d07d      	beq.n	8004680 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8004584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004586:	2bc0      	cmp	r3, #192	; 0xc0
 8004588:	d87d      	bhi.n	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	2b80      	cmp	r3, #128	; 0x80
 800458e:	d02d      	beq.n	80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8004590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004592:	2b80      	cmp	r3, #128	; 0x80
 8004594:	d877      	bhi.n	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8004596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800459c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459e:	2b40      	cmp	r3, #64	; 0x40
 80045a0:	d012      	beq.n	80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80045a2:	e070      	b.n	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80045a4:	4b50      	ldr	r3, [pc, #320]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045b0:	d107      	bne.n	80045c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80045b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 fec0 	bl	800533c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80045bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80045c0:	e3f1      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80045c2:	2300      	movs	r3, #0
 80045c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045c6:	e3ee      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80045c8:	4b47      	ldr	r3, [pc, #284]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045d4:	d107      	bne.n	80045e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80045d6:	f107 0318 	add.w	r3, r7, #24
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 fc06 	bl	8004dec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80045e4:	e3df      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80045e6:	2300      	movs	r3, #0
 80045e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045ea:	e3dc      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80045ec:	4b3e      	ldr	r3, [pc, #248]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045f8:	d107      	bne.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80045fa:	f107 030c 	add.w	r3, r7, #12
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fd48 	bl	8005094 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004608:	e3cd      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800460a:	2300      	movs	r3, #0
 800460c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800460e:	e3ca      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004610:	4b35      	ldr	r3, [pc, #212]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004614:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004618:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800461a:	4b33      	ldr	r3, [pc, #204]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0304 	and.w	r3, r3, #4
 8004622:	2b04      	cmp	r3, #4
 8004624:	d10c      	bne.n	8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8004626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004628:	2b00      	cmp	r3, #0
 800462a:	d109      	bne.n	8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800462c:	4b2e      	ldr	r3, [pc, #184]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	08db      	lsrs	r3, r3, #3
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	4a2d      	ldr	r2, [pc, #180]	; (80046ec <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004638:	fa22 f303 	lsr.w	r3, r2, r3
 800463c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800463e:	e01e      	b.n	800467e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004640:	4b29      	ldr	r3, [pc, #164]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800464c:	d106      	bne.n	800465c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800464e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004650:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004654:	d102      	bne.n	800465c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004656:	4b26      	ldr	r3, [pc, #152]	; (80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004658:	63fb      	str	r3, [r7, #60]	; 0x3c
 800465a:	e010      	b.n	800467e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800465c:	4b22      	ldr	r3, [pc, #136]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004664:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004668:	d106      	bne.n	8004678 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800466a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800466c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004670:	d102      	bne.n	8004678 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004672:	4b20      	ldr	r3, [pc, #128]	; (80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004674:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004676:	e002      	b.n	800467e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004678:	2300      	movs	r3, #0
 800467a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800467c:	e393      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800467e:	e392      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004680:	4b1d      	ldr	r3, [pc, #116]	; (80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004682:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004684:	e38f      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8004686:	2300      	movs	r3, #0
 8004688:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800468a:	e38c      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004692:	f040 80a7 	bne.w	80047e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004696:	4b14      	ldr	r3, [pc, #80]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800469a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800469e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80046a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046a6:	d05f      	beq.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80046a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046ae:	f200 8096 	bhi.w	80047de <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80046b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80046b8:	f000 808e 	beq.w	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80046bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80046c2:	f200 808c 	bhi.w	80047de <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80046c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046cc:	d03a      	beq.n	8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80046ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046d4:	f200 8083 	bhi.w	80047de <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80046d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00e      	beq.n	80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 80046de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046e4:	d01c      	beq.n	8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80046e6:	e07a      	b.n	80047de <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80046e8:	58024400 	.word	0x58024400
 80046ec:	03d09000 	.word	0x03d09000
 80046f0:	003d0900 	.word	0x003d0900
 80046f4:	007a1200 	.word	0x007a1200
 80046f8:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80046fc:	4baa      	ldr	r3, [pc, #680]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004704:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004708:	d107      	bne.n	800471a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800470a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fe14 	bl	800533c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004716:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004718:	e345      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800471a:	2300      	movs	r3, #0
 800471c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800471e:	e342      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004720:	4ba1      	ldr	r3, [pc, #644]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004728:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800472c:	d107      	bne.n	800473e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800472e:	f107 0318 	add.w	r3, r7, #24
 8004732:	4618      	mov	r0, r3
 8004734:	f000 fb5a 	bl	8004dec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800473c:	e333      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800473e:	2300      	movs	r3, #0
 8004740:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004742:	e330      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004744:	4b98      	ldr	r3, [pc, #608]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800474c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004750:	d107      	bne.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004752:	f107 030c 	add.w	r3, r7, #12
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fc9c 	bl	8005094 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004760:	e321      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004762:	2300      	movs	r3, #0
 8004764:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004766:	e31e      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004768:	4b8f      	ldr	r3, [pc, #572]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800476a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800476c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004770:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004772:	4b8d      	ldr	r3, [pc, #564]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0304 	and.w	r3, r3, #4
 800477a:	2b04      	cmp	r3, #4
 800477c:	d10c      	bne.n	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800477e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004780:	2b00      	cmp	r3, #0
 8004782:	d109      	bne.n	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004784:	4b88      	ldr	r3, [pc, #544]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	08db      	lsrs	r3, r3, #3
 800478a:	f003 0303 	and.w	r3, r3, #3
 800478e:	4a87      	ldr	r2, [pc, #540]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004790:	fa22 f303 	lsr.w	r3, r2, r3
 8004794:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004796:	e01e      	b.n	80047d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004798:	4b83      	ldr	r3, [pc, #524]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047a4:	d106      	bne.n	80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 80047a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047ac:	d102      	bne.n	80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80047ae:	4b80      	ldr	r3, [pc, #512]	; (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80047b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047b2:	e010      	b.n	80047d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80047b4:	4b7c      	ldr	r3, [pc, #496]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047c0:	d106      	bne.n	80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 80047c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047c8:	d102      	bne.n	80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80047ca:	4b7a      	ldr	r3, [pc, #488]	; (80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80047cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047ce:	e002      	b.n	80047d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80047d0:	2300      	movs	r3, #0
 80047d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80047d4:	e2e7      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80047d6:	e2e6      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80047d8:	4b77      	ldr	r3, [pc, #476]	; (80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80047da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047dc:	e2e3      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80047de:	2300      	movs	r3, #0
 80047e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047e2:	e2e0      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ea:	f040 809c 	bne.w	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80047ee:	4b6e      	ldr	r3, [pc, #440]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80047f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80047f6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80047f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047fe:	d054      	beq.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8004800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004802:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004806:	f200 808b 	bhi.w	8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004810:	f000 8083 	beq.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8004814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004816:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800481a:	f200 8081 	bhi.w	8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800481e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004820:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004824:	d02f      	beq.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8004826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004828:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800482c:	d878      	bhi.n	8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004830:	2b00      	cmp	r3, #0
 8004832:	d004      	beq.n	800483e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8004834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004836:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800483a:	d012      	beq.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800483c:	e070      	b.n	8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800483e:	4b5a      	ldr	r3, [pc, #360]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004846:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800484a:	d107      	bne.n	800485c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800484c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004850:	4618      	mov	r0, r3
 8004852:	f000 fd73 	bl	800533c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004858:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800485a:	e2a4      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800485c:	2300      	movs	r3, #0
 800485e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004860:	e2a1      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004862:	4b51      	ldr	r3, [pc, #324]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800486a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800486e:	d107      	bne.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004870:	f107 0318 	add.w	r3, r7, #24
 8004874:	4618      	mov	r0, r3
 8004876:	f000 fab9 	bl	8004dec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800487e:	e292      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004880:	2300      	movs	r3, #0
 8004882:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004884:	e28f      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004886:	4b48      	ldr	r3, [pc, #288]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800488e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004892:	d107      	bne.n	80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004894:	f107 030c 	add.w	r3, r7, #12
 8004898:	4618      	mov	r0, r3
 800489a:	f000 fbfb 	bl	8005094 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80048a2:	e280      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80048a4:	2300      	movs	r3, #0
 80048a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048a8:	e27d      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80048aa:	4b3f      	ldr	r3, [pc, #252]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80048ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80048b2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80048b4:	4b3c      	ldr	r3, [pc, #240]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b04      	cmp	r3, #4
 80048be:	d10c      	bne.n	80048da <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80048c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d109      	bne.n	80048da <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80048c6:	4b38      	ldr	r3, [pc, #224]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	08db      	lsrs	r3, r3, #3
 80048cc:	f003 0303 	and.w	r3, r3, #3
 80048d0:	4a36      	ldr	r2, [pc, #216]	; (80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80048d2:	fa22 f303 	lsr.w	r3, r2, r3
 80048d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048d8:	e01e      	b.n	8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80048da:	4b33      	ldr	r3, [pc, #204]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048e6:	d106      	bne.n	80048f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80048e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048ee:	d102      	bne.n	80048f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80048f0:	4b2f      	ldr	r3, [pc, #188]	; (80049b0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80048f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048f4:	e010      	b.n	8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80048f6:	4b2c      	ldr	r3, [pc, #176]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004902:	d106      	bne.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8004904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800490a:	d102      	bne.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800490c:	4b29      	ldr	r3, [pc, #164]	; (80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800490e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004910:	e002      	b.n	8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004912:	2300      	movs	r3, #0
 8004914:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004916:	e246      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004918:	e245      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800491a:	4b27      	ldr	r3, [pc, #156]	; (80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800491c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800491e:	e242      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004920:	2300      	movs	r3, #0
 8004922:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004924:	e23f      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800492c:	f040 80a8 	bne.w	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004930:	4b1d      	ldr	r3, [pc, #116]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004934:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004938:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800493a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004940:	d060      	beq.n	8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8004942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004944:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004948:	f200 8097 	bhi.w	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800494c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004952:	f000 808f 	beq.w	8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8004956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004958:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800495c:	f200 808d 	bhi.w	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8004960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004966:	d03b      	beq.n	80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8004968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800496e:	f200 8084 	bhi.w	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8004972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004974:	2b00      	cmp	r3, #0
 8004976:	d004      	beq.n	8004982 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8004978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800497e:	d01d      	beq.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8004980:	e07b      	b.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004982:	4b09      	ldr	r3, [pc, #36]	; (80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800498a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800498e:	d107      	bne.n	80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004994:	4618      	mov	r0, r3
 8004996:	f000 fcd1 	bl	800533c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800499a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800499e:	e202      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80049a0:	2300      	movs	r3, #0
 80049a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049a4:	e1ff      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80049a6:	bf00      	nop
 80049a8:	58024400 	.word	0x58024400
 80049ac:	03d09000 	.word	0x03d09000
 80049b0:	003d0900 	.word	0x003d0900
 80049b4:	007a1200 	.word	0x007a1200
 80049b8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80049bc:	4ba3      	ldr	r3, [pc, #652]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049c8:	d107      	bne.n	80049da <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049ca:	f107 0318 	add.w	r3, r7, #24
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 fa0c 	bl	8004dec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80049d8:	e1e5      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80049da:	2300      	movs	r3, #0
 80049dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049de:	e1e2      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80049e0:	4b9a      	ldr	r3, [pc, #616]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049ec:	d107      	bne.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049ee:	f107 030c 	add.w	r3, r7, #12
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fb4e 	bl	8005094 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80049fc:	e1d3      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80049fe:	2300      	movs	r3, #0
 8004a00:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a02:	e1d0      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004a04:	4b91      	ldr	r3, [pc, #580]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a0c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004a0e:	4b8f      	ldr	r3, [pc, #572]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0304 	and.w	r3, r3, #4
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d10c      	bne.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8004a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d109      	bne.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a20:	4b8a      	ldr	r3, [pc, #552]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	08db      	lsrs	r3, r3, #3
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	4a89      	ldr	r2, [pc, #548]	; (8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a32:	e01e      	b.n	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004a34:	4b85      	ldr	r3, [pc, #532]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a40:	d106      	bne.n	8004a50 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8004a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a48:	d102      	bne.n	8004a50 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004a4a:	4b82      	ldr	r3, [pc, #520]	; (8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a4e:	e010      	b.n	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004a50:	4b7e      	ldr	r3, [pc, #504]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a5c:	d106      	bne.n	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8004a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a64:	d102      	bne.n	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004a66:	4b7c      	ldr	r3, [pc, #496]	; (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a6a:	e002      	b.n	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004a70:	e199      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004a72:	e198      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004a74:	4b79      	ldr	r3, [pc, #484]	; (8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004a76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a78:	e195      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a7e:	e192      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004a86:	d173      	bne.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004a88:	4b70      	ldr	r3, [pc, #448]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a90:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a98:	d02f      	beq.n	8004afa <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8004a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004aa0:	d863      	bhi.n	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8004aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d004      	beq.n	8004ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aae:	d012      	beq.n	8004ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8004ab0:	e05b      	b.n	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ab2:	4b66      	ldr	r3, [pc, #408]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004abe:	d107      	bne.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ac0:	f107 0318 	add.w	r3, r7, #24
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 f991 	bl	8004dec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ace:	e16a      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ad4:	e167      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004ad6:	4b5d      	ldr	r3, [pc, #372]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ae2:	d107      	bne.n	8004af4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ae4:	f107 030c 	add.w	r3, r7, #12
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 fad3 	bl	8005094 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004af2:	e158      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004af4:	2300      	movs	r3, #0
 8004af6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004af8:	e155      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004afa:	4b54      	ldr	r3, [pc, #336]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004afe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b02:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b04:	4b51      	ldr	r3, [pc, #324]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	d10c      	bne.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8004b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d109      	bne.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b16:	4b4d      	ldr	r3, [pc, #308]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	08db      	lsrs	r3, r3, #3
 8004b1c:	f003 0303 	and.w	r3, r3, #3
 8004b20:	4a4b      	ldr	r2, [pc, #300]	; (8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004b22:	fa22 f303 	lsr.w	r3, r2, r3
 8004b26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b28:	e01e      	b.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004b2a:	4b48      	ldr	r3, [pc, #288]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b36:	d106      	bne.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8004b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b3e:	d102      	bne.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004b40:	4b44      	ldr	r3, [pc, #272]	; (8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b44:	e010      	b.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b46:	4b41      	ldr	r3, [pc, #260]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b52:	d106      	bne.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8004b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b5a:	d102      	bne.n	8004b62 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004b5c:	4b3e      	ldr	r3, [pc, #248]	; (8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b60:	e002      	b.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004b62:	2300      	movs	r3, #0
 8004b64:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004b66:	e11e      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004b68:	e11d      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b6e:	e11a      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b76:	d133      	bne.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004b78:	4b34      	ldr	r3, [pc, #208]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b80:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d004      	beq.n	8004b92 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8004b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b8e:	d012      	beq.n	8004bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8004b90:	e023      	b.n	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004b92:	4b2e      	ldr	r3, [pc, #184]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b9e:	d107      	bne.n	8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 fbc9 	bl	800533c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004bae:	e0fa      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bb4:	e0f7      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004bb6:	4b25      	ldr	r3, [pc, #148]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bc2:	d107      	bne.n	8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bc4:	f107 0318 	add.w	r3, r7, #24
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 f90f 	bl	8004dec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004bd2:	e0e8      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bd8:	e0e5      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bde:	e0e2      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004be6:	f040 808f 	bne.w	8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004bea:	4b18      	ldr	r3, [pc, #96]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bee:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004bf2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004bfa:	d075      	beq.n	8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8004bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c02:	d87e      	bhi.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c0a:	d060      	beq.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8004c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c12:	d876      	bhi.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c1a:	d045      	beq.n	8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8004c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c22:	d86e      	bhi.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c2a:	d02b      	beq.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8004c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c32:	d866      	bhi.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d004      	beq.n	8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8004c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c40:	d00e      	beq.n	8004c60 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004c42:	e05e      	b.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004c44:	f000 f8bc 	bl	8004dc0 <HAL_RCCEx_GetD3PCLK1Freq>
 8004c48:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8004c4a:	e0ac      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004c4c:	58024400 	.word	0x58024400
 8004c50:	03d09000 	.word	0x03d09000
 8004c54:	003d0900 	.word	0x003d0900
 8004c58:	007a1200 	.word	0x007a1200
 8004c5c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c60:	4b53      	ldr	r3, [pc, #332]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c6c:	d107      	bne.n	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c6e:	f107 0318 	add.w	r3, r7, #24
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 f8ba 	bl	8004dec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004c7c:	e093      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c82:	e090      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004c84:	4b4a      	ldr	r3, [pc, #296]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c90:	d107      	bne.n	8004ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c92:	f107 030c 	add.w	r3, r7, #12
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 f9fc 	bl	8005094 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004ca0:	e081      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ca6:	e07e      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ca8:	4b41      	ldr	r3, [pc, #260]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b04      	cmp	r3, #4
 8004cb2:	d109      	bne.n	8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004cb4:	4b3e      	ldr	r3, [pc, #248]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	08db      	lsrs	r3, r3, #3
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	4a3d      	ldr	r2, [pc, #244]	; (8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8004cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004cc6:	e06e      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ccc:	e06b      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004cce:	4b38      	ldr	r3, [pc, #224]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cda:	d102      	bne.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8004cdc:	4b36      	ldr	r3, [pc, #216]	; (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004cde:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ce0:	e061      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ce6:	e05e      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004ce8:	4b31      	ldr	r3, [pc, #196]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cf4:	d102      	bne.n	8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8004cf6:	4b31      	ldr	r3, [pc, #196]	; (8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004cfa:	e054      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d00:	e051      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8004d02:	2300      	movs	r3, #0
 8004d04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d06:	e04e      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d0e:	d148      	bne.n	8004da2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8004d10:	4b27      	ldr	r3, [pc, #156]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d18:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d20:	d02a      	beq.n	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8004d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d28:	d838      	bhi.n	8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8004d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d004      	beq.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8004d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d36:	d00d      	beq.n	8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8004d38:	e030      	b.n	8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004d3a:	4b1d      	ldr	r3, [pc, #116]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d46:	d102      	bne.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8004d48:	4b1c      	ldr	r3, [pc, #112]	; (8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004d4c:	e02b      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d52:	e028      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004d54:	4b16      	ldr	r3, [pc, #88]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d60:	d107      	bne.n	8004d72 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fae8 	bl	800533c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004d70:	e019      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004d72:	2300      	movs	r3, #0
 8004d74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d76:	e016      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004d78:	4b0d      	ldr	r3, [pc, #52]	; (8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d84:	d107      	bne.n	8004d96 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d86:	f107 0318 	add.w	r3, r7, #24
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f000 f82e 	bl	8004dec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004d94:	e007      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d9a:	e004      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004da0:	e001      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8004da2:	2300      	movs	r3, #0
 8004da4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8004da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3740      	adds	r7, #64	; 0x40
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	58024400 	.word	0x58024400
 8004db4:	03d09000 	.word	0x03d09000
 8004db8:	003d0900 	.word	0x003d0900
 8004dbc:	007a1200 	.word	0x007a1200

08004dc0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004dc4:	f7fe fb8e 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	091b      	lsrs	r3, r3, #4
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	4904      	ldr	r1, [pc, #16]	; (8004de8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004dd6:	5ccb      	ldrb	r3, [r1, r3]
 8004dd8:	f003 031f 	and.w	r3, r3, #31
 8004ddc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	58024400 	.word	0x58024400
 8004de8:	0800a414 	.word	0x0800a414

08004dec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b089      	sub	sp, #36	; 0x24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004df4:	4ba1      	ldr	r3, [pc, #644]	; (800507c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df8:	f003 0303 	and.w	r3, r3, #3
 8004dfc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004dfe:	4b9f      	ldr	r3, [pc, #636]	; (800507c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e02:	0b1b      	lsrs	r3, r3, #12
 8004e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e08:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004e0a:	4b9c      	ldr	r3, [pc, #624]	; (800507c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0e:	091b      	lsrs	r3, r3, #4
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004e16:	4b99      	ldr	r3, [pc, #612]	; (800507c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1a:	08db      	lsrs	r3, r3, #3
 8004e1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	fb02 f303 	mul.w	r3, r2, r3
 8004e26:	ee07 3a90 	vmov	s15, r3
 8004e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 8111 	beq.w	800505c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	f000 8083 	beq.w	8004f48 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	f200 80a1 	bhi.w	8004f8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d003      	beq.n	8004e58 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d056      	beq.n	8004f04 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004e56:	e099      	b.n	8004f8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e58:	4b88      	ldr	r3, [pc, #544]	; (800507c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0320 	and.w	r3, r3, #32
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d02d      	beq.n	8004ec0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e64:	4b85      	ldr	r3, [pc, #532]	; (800507c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	08db      	lsrs	r3, r3, #3
 8004e6a:	f003 0303 	and.w	r3, r3, #3
 8004e6e:	4a84      	ldr	r2, [pc, #528]	; (8005080 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004e70:	fa22 f303 	lsr.w	r3, r2, r3
 8004e74:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	ee07 3a90 	vmov	s15, r3
 8004e7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	ee07 3a90 	vmov	s15, r3
 8004e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e8e:	4b7b      	ldr	r3, [pc, #492]	; (800507c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e96:	ee07 3a90 	vmov	s15, r3
 8004e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ea2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005084 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004ebe:	e087      	b.n	8004fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	ee07 3a90 	vmov	s15, r3
 8004ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005088 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ed2:	4b6a      	ldr	r3, [pc, #424]	; (800507c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eda:	ee07 3a90 	vmov	s15, r3
 8004ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ee2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ee6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005084 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004efe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f02:	e065      	b.n	8004fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	ee07 3a90 	vmov	s15, r3
 8004f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f0e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800508c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f16:	4b59      	ldr	r3, [pc, #356]	; (800507c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f1e:	ee07 3a90 	vmov	s15, r3
 8004f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f26:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f2a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005084 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f46:	e043      	b.n	8004fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	ee07 3a90 	vmov	s15, r3
 8004f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f52:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005090 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f5a:	4b48      	ldr	r3, [pc, #288]	; (800507c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f62:	ee07 3a90 	vmov	s15, r3
 8004f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f6e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005084 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f8a:	e021      	b.n	8004fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	ee07 3a90 	vmov	s15, r3
 8004f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f96:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800508c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f9e:	4b37      	ldr	r3, [pc, #220]	; (800507c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fa6:	ee07 3a90 	vmov	s15, r3
 8004faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fb2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005084 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004fd0:	4b2a      	ldr	r3, [pc, #168]	; (800507c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	0a5b      	lsrs	r3, r3, #9
 8004fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fda:	ee07 3a90 	vmov	s15, r3
 8004fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fe6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fea:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ff2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ff6:	ee17 2a90 	vmov	r2, s15
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004ffe:	4b1f      	ldr	r3, [pc, #124]	; (800507c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005002:	0c1b      	lsrs	r3, r3, #16
 8005004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005008:	ee07 3a90 	vmov	s15, r3
 800500c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005010:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005014:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005018:	edd7 6a07 	vldr	s13, [r7, #28]
 800501c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005024:	ee17 2a90 	vmov	r2, s15
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800502c:	4b13      	ldr	r3, [pc, #76]	; (800507c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800502e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005030:	0e1b      	lsrs	r3, r3, #24
 8005032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005036:	ee07 3a90 	vmov	s15, r3
 800503a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800503e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005042:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005046:	edd7 6a07 	vldr	s13, [r7, #28]
 800504a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800504e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005052:	ee17 2a90 	vmov	r2, s15
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800505a:	e008      	b.n	800506e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	609a      	str	r2, [r3, #8]
}
 800506e:	bf00      	nop
 8005070:	3724      	adds	r7, #36	; 0x24
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	58024400 	.word	0x58024400
 8005080:	03d09000 	.word	0x03d09000
 8005084:	46000000 	.word	0x46000000
 8005088:	4c742400 	.word	0x4c742400
 800508c:	4a742400 	.word	0x4a742400
 8005090:	4af42400 	.word	0x4af42400

08005094 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005094:	b480      	push	{r7}
 8005096:	b089      	sub	sp, #36	; 0x24
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800509c:	4ba1      	ldr	r3, [pc, #644]	; (8005324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800509e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a0:	f003 0303 	and.w	r3, r3, #3
 80050a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80050a6:	4b9f      	ldr	r3, [pc, #636]	; (8005324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050aa:	0d1b      	lsrs	r3, r3, #20
 80050ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80050b2:	4b9c      	ldr	r3, [pc, #624]	; (8005324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b6:	0a1b      	lsrs	r3, r3, #8
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80050be:	4b99      	ldr	r3, [pc, #612]	; (8005324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c2:	08db      	lsrs	r3, r3, #3
 80050c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	fb02 f303 	mul.w	r3, r2, r3
 80050ce:	ee07 3a90 	vmov	s15, r3
 80050d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 8111 	beq.w	8005304 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	f000 8083 	beq.w	80051f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	f200 80a1 	bhi.w	8005234 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d056      	beq.n	80051ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80050fe:	e099      	b.n	8005234 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005100:	4b88      	ldr	r3, [pc, #544]	; (8005324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0320 	and.w	r3, r3, #32
 8005108:	2b00      	cmp	r3, #0
 800510a:	d02d      	beq.n	8005168 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800510c:	4b85      	ldr	r3, [pc, #532]	; (8005324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	08db      	lsrs	r3, r3, #3
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	4a84      	ldr	r2, [pc, #528]	; (8005328 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005118:	fa22 f303 	lsr.w	r3, r2, r3
 800511c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	ee07 3a90 	vmov	s15, r3
 8005124:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	ee07 3a90 	vmov	s15, r3
 800512e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005136:	4b7b      	ldr	r3, [pc, #492]	; (8005324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800513e:	ee07 3a90 	vmov	s15, r3
 8005142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005146:	ed97 6a03 	vldr	s12, [r7, #12]
 800514a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800532c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800514e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800515a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800515e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005162:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005166:	e087      	b.n	8005278 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	ee07 3a90 	vmov	s15, r3
 800516e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005172:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005330 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800517a:	4b6a      	ldr	r3, [pc, #424]	; (8005324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005182:	ee07 3a90 	vmov	s15, r3
 8005186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800518a:	ed97 6a03 	vldr	s12, [r7, #12]
 800518e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800532c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800519a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800519e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051aa:	e065      	b.n	8005278 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	ee07 3a90 	vmov	s15, r3
 80051b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005334 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80051ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051be:	4b59      	ldr	r3, [pc, #356]	; (8005324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c6:	ee07 3a90 	vmov	s15, r3
 80051ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80051d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800532c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051ee:	e043      	b.n	8005278 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	ee07 3a90 	vmov	s15, r3
 80051f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005338 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80051fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005202:	4b48      	ldr	r3, [pc, #288]	; (8005324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800520a:	ee07 3a90 	vmov	s15, r3
 800520e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005212:	ed97 6a03 	vldr	s12, [r7, #12]
 8005216:	eddf 5a45 	vldr	s11, [pc, #276]	; 800532c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800521a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800521e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800522a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800522e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005232:	e021      	b.n	8005278 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	ee07 3a90 	vmov	s15, r3
 800523a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800523e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005334 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005246:	4b37      	ldr	r3, [pc, #220]	; (8005324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800524e:	ee07 3a90 	vmov	s15, r3
 8005252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005256:	ed97 6a03 	vldr	s12, [r7, #12]
 800525a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800532c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800525e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800526a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800526e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005272:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005276:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005278:	4b2a      	ldr	r3, [pc, #168]	; (8005324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800527a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527c:	0a5b      	lsrs	r3, r3, #9
 800527e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005282:	ee07 3a90 	vmov	s15, r3
 8005286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800528e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005292:	edd7 6a07 	vldr	s13, [r7, #28]
 8005296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800529a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800529e:	ee17 2a90 	vmov	r2, s15
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80052a6:	4b1f      	ldr	r3, [pc, #124]	; (8005324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	0c1b      	lsrs	r3, r3, #16
 80052ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052b0:	ee07 3a90 	vmov	s15, r3
 80052b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80052c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052cc:	ee17 2a90 	vmov	r2, s15
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80052d4:	4b13      	ldr	r3, [pc, #76]	; (8005324 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d8:	0e1b      	lsrs	r3, r3, #24
 80052da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052de:	ee07 3a90 	vmov	s15, r3
 80052e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80052f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052fa:	ee17 2a90 	vmov	r2, s15
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005302:	e008      	b.n	8005316 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	609a      	str	r2, [r3, #8]
}
 8005316:	bf00      	nop
 8005318:	3724      	adds	r7, #36	; 0x24
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	58024400 	.word	0x58024400
 8005328:	03d09000 	.word	0x03d09000
 800532c:	46000000 	.word	0x46000000
 8005330:	4c742400 	.word	0x4c742400
 8005334:	4a742400 	.word	0x4a742400
 8005338:	4af42400 	.word	0x4af42400

0800533c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800533c:	b480      	push	{r7}
 800533e:	b089      	sub	sp, #36	; 0x24
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005344:	4ba0      	ldr	r3, [pc, #640]	; (80055c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005348:	f003 0303 	and.w	r3, r3, #3
 800534c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800534e:	4b9e      	ldr	r3, [pc, #632]	; (80055c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005352:	091b      	lsrs	r3, r3, #4
 8005354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005358:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800535a:	4b9b      	ldr	r3, [pc, #620]	; (80055c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800535c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005364:	4b98      	ldr	r3, [pc, #608]	; (80055c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005368:	08db      	lsrs	r3, r3, #3
 800536a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	fb02 f303 	mul.w	r3, r2, r3
 8005374:	ee07 3a90 	vmov	s15, r3
 8005378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	2b00      	cmp	r3, #0
 8005384:	f000 8111 	beq.w	80055aa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	2b02      	cmp	r3, #2
 800538c:	f000 8083 	beq.w	8005496 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	2b02      	cmp	r3, #2
 8005394:	f200 80a1 	bhi.w	80054da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d056      	beq.n	8005452 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80053a4:	e099      	b.n	80054da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053a6:	4b88      	ldr	r3, [pc, #544]	; (80055c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0320 	and.w	r3, r3, #32
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d02d      	beq.n	800540e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80053b2:	4b85      	ldr	r3, [pc, #532]	; (80055c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	08db      	lsrs	r3, r3, #3
 80053b8:	f003 0303 	and.w	r3, r3, #3
 80053bc:	4a83      	ldr	r2, [pc, #524]	; (80055cc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80053be:	fa22 f303 	lsr.w	r3, r2, r3
 80053c2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	ee07 3a90 	vmov	s15, r3
 80053ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	ee07 3a90 	vmov	s15, r3
 80053d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053dc:	4b7a      	ldr	r3, [pc, #488]	; (80055c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80053de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053e4:	ee07 3a90 	vmov	s15, r3
 80053e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80053f0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80055d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80053f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005400:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005408:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800540c:	e087      	b.n	800551e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	ee07 3a90 	vmov	s15, r3
 8005414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005418:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80055d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800541c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005420:	4b69      	ldr	r3, [pc, #420]	; (80055c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005428:	ee07 3a90 	vmov	s15, r3
 800542c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005430:	ed97 6a03 	vldr	s12, [r7, #12]
 8005434:	eddf 5a66 	vldr	s11, [pc, #408]	; 80055d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005438:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800543c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005440:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005444:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800544c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005450:	e065      	b.n	800551e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	ee07 3a90 	vmov	s15, r3
 8005458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800545c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80055d8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005460:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005464:	4b58      	ldr	r3, [pc, #352]	; (80055c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800546c:	ee07 3a90 	vmov	s15, r3
 8005470:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005474:	ed97 6a03 	vldr	s12, [r7, #12]
 8005478:	eddf 5a55 	vldr	s11, [pc, #340]	; 80055d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800547c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005480:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005484:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005488:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800548c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005490:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005494:	e043      	b.n	800551e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	ee07 3a90 	vmov	s15, r3
 800549c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054a0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80055dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80054a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054a8:	4b47      	ldr	r3, [pc, #284]	; (80055c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80054aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054b0:	ee07 3a90 	vmov	s15, r3
 80054b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80054bc:	eddf 5a44 	vldr	s11, [pc, #272]	; 80055d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80054c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054d8:	e021      	b.n	800551e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	ee07 3a90 	vmov	s15, r3
 80054e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80055d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80054e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ec:	4b36      	ldr	r3, [pc, #216]	; (80055c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80054ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f4:	ee07 3a90 	vmov	s15, r3
 80054f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8005500:	eddf 5a33 	vldr	s11, [pc, #204]	; 80055d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005504:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005508:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800550c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005510:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005518:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800551c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800551e:	4b2a      	ldr	r3, [pc, #168]	; (80055c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005522:	0a5b      	lsrs	r3, r3, #9
 8005524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005528:	ee07 3a90 	vmov	s15, r3
 800552c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005530:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005534:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005538:	edd7 6a07 	vldr	s13, [r7, #28]
 800553c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005544:	ee17 2a90 	vmov	r2, s15
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800554c:	4b1e      	ldr	r3, [pc, #120]	; (80055c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800554e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005550:	0c1b      	lsrs	r3, r3, #16
 8005552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005556:	ee07 3a90 	vmov	s15, r3
 800555a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800555e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005562:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005566:	edd7 6a07 	vldr	s13, [r7, #28]
 800556a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800556e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005572:	ee17 2a90 	vmov	r2, s15
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800557a:	4b13      	ldr	r3, [pc, #76]	; (80055c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800557c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557e:	0e1b      	lsrs	r3, r3, #24
 8005580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005584:	ee07 3a90 	vmov	s15, r3
 8005588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800558c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005590:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005594:	edd7 6a07 	vldr	s13, [r7, #28]
 8005598:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800559c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055a0:	ee17 2a90 	vmov	r2, s15
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80055a8:	e008      	b.n	80055bc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	609a      	str	r2, [r3, #8]
}
 80055bc:	bf00      	nop
 80055be:	3724      	adds	r7, #36	; 0x24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	58024400 	.word	0x58024400
 80055cc:	03d09000 	.word	0x03d09000
 80055d0:	46000000 	.word	0x46000000
 80055d4:	4c742400 	.word	0x4c742400
 80055d8:	4a742400 	.word	0x4a742400
 80055dc:	4af42400 	.word	0x4af42400

080055e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80055ee:	4b53      	ldr	r3, [pc, #332]	; (800573c <RCCEx_PLL2_Config+0x15c>)
 80055f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f2:	f003 0303 	and.w	r3, r3, #3
 80055f6:	2b03      	cmp	r3, #3
 80055f8:	d101      	bne.n	80055fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e099      	b.n	8005732 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80055fe:	4b4f      	ldr	r3, [pc, #316]	; (800573c <RCCEx_PLL2_Config+0x15c>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a4e      	ldr	r2, [pc, #312]	; (800573c <RCCEx_PLL2_Config+0x15c>)
 8005604:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005608:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800560a:	f7fb ff69 	bl	80014e0 <HAL_GetTick>
 800560e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005610:	e008      	b.n	8005624 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005612:	f7fb ff65 	bl	80014e0 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	2b02      	cmp	r3, #2
 800561e:	d901      	bls.n	8005624 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e086      	b.n	8005732 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005624:	4b45      	ldr	r3, [pc, #276]	; (800573c <RCCEx_PLL2_Config+0x15c>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1f0      	bne.n	8005612 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005630:	4b42      	ldr	r3, [pc, #264]	; (800573c <RCCEx_PLL2_Config+0x15c>)
 8005632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005634:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	031b      	lsls	r3, r3, #12
 800563e:	493f      	ldr	r1, [pc, #252]	; (800573c <RCCEx_PLL2_Config+0x15c>)
 8005640:	4313      	orrs	r3, r2
 8005642:	628b      	str	r3, [r1, #40]	; 0x28
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	3b01      	subs	r3, #1
 800564a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	3b01      	subs	r3, #1
 8005654:	025b      	lsls	r3, r3, #9
 8005656:	b29b      	uxth	r3, r3
 8005658:	431a      	orrs	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	3b01      	subs	r3, #1
 8005660:	041b      	lsls	r3, r3, #16
 8005662:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005666:	431a      	orrs	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	3b01      	subs	r3, #1
 800566e:	061b      	lsls	r3, r3, #24
 8005670:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005674:	4931      	ldr	r1, [pc, #196]	; (800573c <RCCEx_PLL2_Config+0x15c>)
 8005676:	4313      	orrs	r3, r2
 8005678:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800567a:	4b30      	ldr	r3, [pc, #192]	; (800573c <RCCEx_PLL2_Config+0x15c>)
 800567c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	492d      	ldr	r1, [pc, #180]	; (800573c <RCCEx_PLL2_Config+0x15c>)
 8005688:	4313      	orrs	r3, r2
 800568a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800568c:	4b2b      	ldr	r3, [pc, #172]	; (800573c <RCCEx_PLL2_Config+0x15c>)
 800568e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005690:	f023 0220 	bic.w	r2, r3, #32
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	4928      	ldr	r1, [pc, #160]	; (800573c <RCCEx_PLL2_Config+0x15c>)
 800569a:	4313      	orrs	r3, r2
 800569c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800569e:	4b27      	ldr	r3, [pc, #156]	; (800573c <RCCEx_PLL2_Config+0x15c>)
 80056a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a2:	4a26      	ldr	r2, [pc, #152]	; (800573c <RCCEx_PLL2_Config+0x15c>)
 80056a4:	f023 0310 	bic.w	r3, r3, #16
 80056a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80056aa:	4b24      	ldr	r3, [pc, #144]	; (800573c <RCCEx_PLL2_Config+0x15c>)
 80056ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056ae:	4b24      	ldr	r3, [pc, #144]	; (8005740 <RCCEx_PLL2_Config+0x160>)
 80056b0:	4013      	ands	r3, r2
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	69d2      	ldr	r2, [r2, #28]
 80056b6:	00d2      	lsls	r2, r2, #3
 80056b8:	4920      	ldr	r1, [pc, #128]	; (800573c <RCCEx_PLL2_Config+0x15c>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80056be:	4b1f      	ldr	r3, [pc, #124]	; (800573c <RCCEx_PLL2_Config+0x15c>)
 80056c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c2:	4a1e      	ldr	r2, [pc, #120]	; (800573c <RCCEx_PLL2_Config+0x15c>)
 80056c4:	f043 0310 	orr.w	r3, r3, #16
 80056c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d106      	bne.n	80056de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80056d0:	4b1a      	ldr	r3, [pc, #104]	; (800573c <RCCEx_PLL2_Config+0x15c>)
 80056d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d4:	4a19      	ldr	r2, [pc, #100]	; (800573c <RCCEx_PLL2_Config+0x15c>)
 80056d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80056dc:	e00f      	b.n	80056fe <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d106      	bne.n	80056f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80056e4:	4b15      	ldr	r3, [pc, #84]	; (800573c <RCCEx_PLL2_Config+0x15c>)
 80056e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e8:	4a14      	ldr	r2, [pc, #80]	; (800573c <RCCEx_PLL2_Config+0x15c>)
 80056ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80056f0:	e005      	b.n	80056fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80056f2:	4b12      	ldr	r3, [pc, #72]	; (800573c <RCCEx_PLL2_Config+0x15c>)
 80056f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f6:	4a11      	ldr	r2, [pc, #68]	; (800573c <RCCEx_PLL2_Config+0x15c>)
 80056f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80056fe:	4b0f      	ldr	r3, [pc, #60]	; (800573c <RCCEx_PLL2_Config+0x15c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a0e      	ldr	r2, [pc, #56]	; (800573c <RCCEx_PLL2_Config+0x15c>)
 8005704:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005708:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800570a:	f7fb fee9 	bl	80014e0 <HAL_GetTick>
 800570e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005710:	e008      	b.n	8005724 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005712:	f7fb fee5 	bl	80014e0 <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d901      	bls.n	8005724 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e006      	b.n	8005732 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005724:	4b05      	ldr	r3, [pc, #20]	; (800573c <RCCEx_PLL2_Config+0x15c>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d0f0      	beq.n	8005712 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005730:	7bfb      	ldrb	r3, [r7, #15]
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	58024400 	.word	0x58024400
 8005740:	ffff0007 	.word	0xffff0007

08005744 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800574e:	2300      	movs	r3, #0
 8005750:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005752:	4b53      	ldr	r3, [pc, #332]	; (80058a0 <RCCEx_PLL3_Config+0x15c>)
 8005754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005756:	f003 0303 	and.w	r3, r3, #3
 800575a:	2b03      	cmp	r3, #3
 800575c:	d101      	bne.n	8005762 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e099      	b.n	8005896 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005762:	4b4f      	ldr	r3, [pc, #316]	; (80058a0 <RCCEx_PLL3_Config+0x15c>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a4e      	ldr	r2, [pc, #312]	; (80058a0 <RCCEx_PLL3_Config+0x15c>)
 8005768:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800576c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800576e:	f7fb feb7 	bl	80014e0 <HAL_GetTick>
 8005772:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005774:	e008      	b.n	8005788 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005776:	f7fb feb3 	bl	80014e0 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	2b02      	cmp	r3, #2
 8005782:	d901      	bls.n	8005788 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e086      	b.n	8005896 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005788:	4b45      	ldr	r3, [pc, #276]	; (80058a0 <RCCEx_PLL3_Config+0x15c>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1f0      	bne.n	8005776 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005794:	4b42      	ldr	r3, [pc, #264]	; (80058a0 <RCCEx_PLL3_Config+0x15c>)
 8005796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005798:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	051b      	lsls	r3, r3, #20
 80057a2:	493f      	ldr	r1, [pc, #252]	; (80058a0 <RCCEx_PLL3_Config+0x15c>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	628b      	str	r3, [r1, #40]	; 0x28
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	3b01      	subs	r3, #1
 80057ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	3b01      	subs	r3, #1
 80057b8:	025b      	lsls	r3, r3, #9
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	431a      	orrs	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	3b01      	subs	r3, #1
 80057c4:	041b      	lsls	r3, r3, #16
 80057c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80057ca:	431a      	orrs	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	3b01      	subs	r3, #1
 80057d2:	061b      	lsls	r3, r3, #24
 80057d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80057d8:	4931      	ldr	r1, [pc, #196]	; (80058a0 <RCCEx_PLL3_Config+0x15c>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80057de:	4b30      	ldr	r3, [pc, #192]	; (80058a0 <RCCEx_PLL3_Config+0x15c>)
 80057e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	492d      	ldr	r1, [pc, #180]	; (80058a0 <RCCEx_PLL3_Config+0x15c>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80057f0:	4b2b      	ldr	r3, [pc, #172]	; (80058a0 <RCCEx_PLL3_Config+0x15c>)
 80057f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	4928      	ldr	r1, [pc, #160]	; (80058a0 <RCCEx_PLL3_Config+0x15c>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005802:	4b27      	ldr	r3, [pc, #156]	; (80058a0 <RCCEx_PLL3_Config+0x15c>)
 8005804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005806:	4a26      	ldr	r2, [pc, #152]	; (80058a0 <RCCEx_PLL3_Config+0x15c>)
 8005808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800580c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800580e:	4b24      	ldr	r3, [pc, #144]	; (80058a0 <RCCEx_PLL3_Config+0x15c>)
 8005810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005812:	4b24      	ldr	r3, [pc, #144]	; (80058a4 <RCCEx_PLL3_Config+0x160>)
 8005814:	4013      	ands	r3, r2
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	69d2      	ldr	r2, [r2, #28]
 800581a:	00d2      	lsls	r2, r2, #3
 800581c:	4920      	ldr	r1, [pc, #128]	; (80058a0 <RCCEx_PLL3_Config+0x15c>)
 800581e:	4313      	orrs	r3, r2
 8005820:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005822:	4b1f      	ldr	r3, [pc, #124]	; (80058a0 <RCCEx_PLL3_Config+0x15c>)
 8005824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005826:	4a1e      	ldr	r2, [pc, #120]	; (80058a0 <RCCEx_PLL3_Config+0x15c>)
 8005828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800582c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d106      	bne.n	8005842 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005834:	4b1a      	ldr	r3, [pc, #104]	; (80058a0 <RCCEx_PLL3_Config+0x15c>)
 8005836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005838:	4a19      	ldr	r2, [pc, #100]	; (80058a0 <RCCEx_PLL3_Config+0x15c>)
 800583a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800583e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005840:	e00f      	b.n	8005862 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d106      	bne.n	8005856 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005848:	4b15      	ldr	r3, [pc, #84]	; (80058a0 <RCCEx_PLL3_Config+0x15c>)
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	4a14      	ldr	r2, [pc, #80]	; (80058a0 <RCCEx_PLL3_Config+0x15c>)
 800584e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005852:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005854:	e005      	b.n	8005862 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005856:	4b12      	ldr	r3, [pc, #72]	; (80058a0 <RCCEx_PLL3_Config+0x15c>)
 8005858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585a:	4a11      	ldr	r2, [pc, #68]	; (80058a0 <RCCEx_PLL3_Config+0x15c>)
 800585c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005860:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005862:	4b0f      	ldr	r3, [pc, #60]	; (80058a0 <RCCEx_PLL3_Config+0x15c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a0e      	ldr	r2, [pc, #56]	; (80058a0 <RCCEx_PLL3_Config+0x15c>)
 8005868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800586c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800586e:	f7fb fe37 	bl	80014e0 <HAL_GetTick>
 8005872:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005874:	e008      	b.n	8005888 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005876:	f7fb fe33 	bl	80014e0 <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	2b02      	cmp	r3, #2
 8005882:	d901      	bls.n	8005888 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e006      	b.n	8005896 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005888:	4b05      	ldr	r3, [pc, #20]	; (80058a0 <RCCEx_PLL3_Config+0x15c>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d0f0      	beq.n	8005876 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005894:	7bfb      	ldrb	r3, [r7, #15]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3710      	adds	r7, #16
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	58024400 	.word	0x58024400
 80058a4:	ffff0007 	.word	0xffff0007

080058a8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b08a      	sub	sp, #40	; 0x28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e075      	b.n	80059a6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d105      	bne.n	80058d2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7fb fa6f 	bl	8000db0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2204      	movs	r2, #4
 80058d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f868 	bl	80059b0 <HAL_SD_InitCard>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e05d      	b.n	80059a6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80058ea:	f107 0308 	add.w	r3, r7, #8
 80058ee:	4619      	mov	r1, r3
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 fdaf 	bl	8006454 <HAL_SD_GetCardStatus>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e052      	b.n	80059a6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005900:	7e3b      	ldrb	r3, [r7, #24]
 8005902:	b2db      	uxtb	r3, r3
 8005904:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005906:	7e7b      	ldrb	r3, [r7, #25]
 8005908:	b2db      	uxtb	r3, r3
 800590a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005910:	2b01      	cmp	r3, #1
 8005912:	d10a      	bne.n	800592a <HAL_SD_Init+0x82>
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	2b00      	cmp	r3, #0
 8005918:	d102      	bne.n	8005920 <HAL_SD_Init+0x78>
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d004      	beq.n	800592a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005926:	659a      	str	r2, [r3, #88]	; 0x58
 8005928:	e00b      	b.n	8005942 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592e:	2b01      	cmp	r3, #1
 8005930:	d104      	bne.n	800593c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005938:	659a      	str	r2, [r3, #88]	; 0x58
 800593a:	e002      	b.n	8005942 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	4619      	mov	r1, r3
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 fe41 	bl	80065d0 <HAL_SD_ConfigWideBusOperation>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e026      	b.n	80059a6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005958:	f7fb fdc2 	bl	80014e0 <HAL_GetTick>
 800595c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800595e:	e011      	b.n	8005984 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005960:	f7fb fdbe 	bl	80014e0 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596e:	d109      	bne.n	8005984 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005976:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e010      	b.n	80059a6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 ff35 	bl	80067f4 <HAL_SD_GetCardState>
 800598a:	4603      	mov	r3, r0
 800598c:	2b04      	cmp	r3, #4
 800598e:	d1e7      	bne.n	8005960 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3728      	adds	r7, #40	; 0x28
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80059b0:	b590      	push	{r4, r7, lr}
 80059b2:	b08d      	sub	sp, #52	; 0x34
 80059b4:	af02      	add	r7, sp, #8
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80059bc:	2300      	movs	r3, #0
 80059be:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80059c0:	2300      	movs	r3, #0
 80059c2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80059c4:	2300      	movs	r3, #0
 80059c6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80059c8:	2300      	movs	r3, #0
 80059ca:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80059cc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80059d0:	f7fe fd24 	bl	800441c <HAL_RCCEx_GetPeriphCLKFreq>
 80059d4:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d109      	bne.n	80059f0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80059ea:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e06a      	b.n	8005ac6 <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	0a1b      	lsrs	r3, r3, #8
 80059f4:	4a36      	ldr	r2, [pc, #216]	; (8005ad0 <HAL_SD_InitCard+0x120>)
 80059f6:	fba2 2303 	umull	r2, r3, r2, r3
 80059fa:	091b      	lsrs	r3, r3, #4
 80059fc:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681c      	ldr	r4, [r3, #0]
 8005a02:	466a      	mov	r2, sp
 8005a04:	f107 0318 	add.w	r3, r7, #24
 8005a08:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005a0c:	e882 0003 	stmia.w	r2, {r0, r1}
 8005a10:	f107 030c 	add.w	r3, r7, #12
 8005a14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a16:	4620      	mov	r0, r4
 8005a18:	f002 fc98 	bl	800834c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f002 fcdb 	bl	80083dc <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005a32:	4a28      	ldr	r2, [pc, #160]	; (8005ad4 <HAL_SD_InitCard+0x124>)
 8005a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7fb fd5b 	bl	80014f8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 ffc4 	bl	80069d0 <SD_PowerON>
 8005a48:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005a4a:	6a3b      	ldr	r3, [r7, #32]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00b      	beq.n	8005a68 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e02e      	b.n	8005ac6 <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 fee3 	bl	8006834 <SD_InitCard>
 8005a6e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005a70:	6a3b      	ldr	r3, [r7, #32]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00b      	beq.n	8005a8e <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	431a      	orrs	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e01b      	b.n	8005ac6 <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a96:	4618      	mov	r0, r3
 8005a98:	f002 fd36 	bl	8008508 <SDMMC_CmdBlockLength>
 8005a9c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00f      	beq.n	8005ac4 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a0b      	ldr	r2, [pc, #44]	; (8005ad8 <HAL_SD_InitCard+0x128>)
 8005aaa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e000      	b.n	8005ac6 <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	372c      	adds	r7, #44	; 0x2c
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd90      	pop	{r4, r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	014f8b59 	.word	0x014f8b59
 8005ad4:	00012110 	.word	0x00012110
 8005ad8:	1fe00fff 	.word	0x1fe00fff

08005adc <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b092      	sub	sp, #72	; 0x48
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
 8005ae8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005aea:	f7fb fcf9 	bl	80014e0 <HAL_GetTick>
 8005aee:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d107      	bne.n	8005b0e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b02:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e167      	b.n	8005dde <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	f040 815a 	bne.w	8005dd0 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005b22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	441a      	add	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d907      	bls.n	8005b40 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b34:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e14e      	b.n	8005dde <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2203      	movs	r2, #3
 8005b44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d002      	beq.n	8005b5e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5a:	025b      	lsls	r3, r3, #9
 8005b5c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b62:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	025b      	lsls	r3, r3, #9
 8005b68:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005b6a:	2390      	movs	r3, #144	; 0x90
 8005b6c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005b6e:	2302      	movs	r3, #2
 8005b70:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005b72:	2300      	movs	r3, #0
 8005b74:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005b76:	2300      	movs	r3, #0
 8005b78:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f107 0214 	add.w	r2, r7, #20
 8005b82:	4611      	mov	r1, r2
 8005b84:	4618      	mov	r0, r3
 8005b86:	f002 fc93 	bl	80084b0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68da      	ldr	r2, [r3, #12]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b98:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d90a      	bls.n	8005bb6 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005bac:	4618      	mov	r0, r3
 8005bae:	f002 fcf1 	bl	8008594 <SDMMC_CmdReadMultiBlock>
 8005bb2:	6478      	str	r0, [r7, #68]	; 0x44
 8005bb4:	e009      	b.n	8005bca <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f002 fcc3 	bl	800854e <SDMMC_CmdReadSingleBlock>
 8005bc8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d012      	beq.n	8005bf6 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a84      	ldr	r2, [pc, #528]	; (8005de8 <HAL_SD_ReadBlocks+0x30c>)
 8005bd6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bde:	431a      	orrs	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e0f3      	b.n	8005dde <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005bfa:	e058      	b.n	8005cae <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d033      	beq.n	8005c72 <HAL_SD_ReadBlocks+0x196>
 8005c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c0c:	2b1f      	cmp	r3, #31
 8005c0e:	d930      	bls.n	8005c72 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8005c10:	2300      	movs	r3, #0
 8005c12:	643b      	str	r3, [r7, #64]	; 0x40
 8005c14:	e027      	b.n	8005c66 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f002 fbc0 	bl	80083a0 <SDMMC_ReadFIFO>
 8005c20:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c24:	b2da      	uxtb	r2, r3
 8005c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c28:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c32:	0a1b      	lsrs	r3, r3, #8
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c38:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c42:	0c1b      	lsrs	r3, r3, #16
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c48:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c52:	0e1b      	lsrs	r3, r3, #24
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c58:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8005c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c62:	3301      	adds	r3, #1
 8005c64:	643b      	str	r3, [r7, #64]	; 0x40
 8005c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c68:	2b07      	cmp	r3, #7
 8005c6a:	d9d4      	bls.n	8005c16 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8005c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c6e:	3b20      	subs	r3, #32
 8005c70:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8005c72:	f7fb fc35 	bl	80014e0 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d902      	bls.n	8005c88 <HAL_SD_ReadBlocks+0x1ac>
 8005c82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d112      	bne.n	8005cae <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a56      	ldr	r2, [pc, #344]	; (8005de8 <HAL_SD_ReadBlocks+0x30c>)
 8005c8e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c94:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e097      	b.n	8005dde <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb4:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d09f      	beq.n	8005bfc <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68da      	ldr	r2, [r3, #12]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cca:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d022      	beq.n	8005d20 <HAL_SD_ReadBlocks+0x244>
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d91f      	bls.n	8005d20 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce4:	2b03      	cmp	r3, #3
 8005ce6:	d01b      	beq.n	8005d20 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4618      	mov	r0, r3
 8005cee:	f002 fcbb 	bl	8008668 <SDMMC_CmdStopTransfer>
 8005cf2:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8005cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d012      	beq.n	8005d20 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a3a      	ldr	r2, [pc, #232]	; (8005de8 <HAL_SD_ReadBlocks+0x30c>)
 8005d00:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e05e      	b.n	8005dde <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d26:	f003 0308 	and.w	r3, r3, #8
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d012      	beq.n	8005d54 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a2d      	ldr	r2, [pc, #180]	; (8005de8 <HAL_SD_ReadBlocks+0x30c>)
 8005d34:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3a:	f043 0208 	orr.w	r2, r3, #8
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e044      	b.n	8005dde <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d012      	beq.n	8005d88 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a20      	ldr	r2, [pc, #128]	; (8005de8 <HAL_SD_ReadBlocks+0x30c>)
 8005d68:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6e:	f043 0202 	orr.w	r2, r3, #2
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e02a      	b.n	8005dde <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d8e:	f003 0320 	and.w	r3, r3, #32
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d012      	beq.n	8005dbc <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a13      	ldr	r2, [pc, #76]	; (8005de8 <HAL_SD_ReadBlocks+0x30c>)
 8005d9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da2:	f043 0220 	orr.w	r2, r3, #32
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e010      	b.n	8005dde <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a0a      	ldr	r2, [pc, #40]	; (8005dec <HAL_SD_ReadBlocks+0x310>)
 8005dc2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	e006      	b.n	8005dde <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
  }
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3748      	adds	r7, #72	; 0x48
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	1fe00fff 	.word	0x1fe00fff
 8005dec:	18000f3a 	.word	0x18000f3a

08005df0 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                     uint32_t Timeout)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b092      	sub	sp, #72	; 0x48
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
 8005dfc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005dfe:	f7fb fb6f 	bl	80014e0 <HAL_GetTick>
 8005e02:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d107      	bne.n	8005e22 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e16:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e16b      	b.n	80060fa <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	f040 815e 	bne.w	80060ec <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005e36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	441a      	add	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d907      	bls.n	8005e54 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e48:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e152      	b.n	80060fa <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2203      	movs	r2, #3
 8005e58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2200      	movs	r2, #0
 8005e62:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d002      	beq.n	8005e72 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6e:	025b      	lsls	r3, r3, #9
 8005e70:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005e72:	f04f 33ff 	mov.w	r3, #4294967295
 8005e76:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	025b      	lsls	r3, r3, #9
 8005e7c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005e7e:	2390      	movs	r3, #144	; 0x90
 8005e80:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005e82:	2300      	movs	r3, #0
 8005e84:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f107 0218 	add.w	r2, r7, #24
 8005e96:	4611      	mov	r1, r2
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f002 fb09 	bl	80084b0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68da      	ldr	r2, [r3, #12]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eac:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d90a      	bls.n	8005eca <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2220      	movs	r2, #32
 8005eb8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f002 fbad 	bl	8008620 <SDMMC_CmdWriteMultiBlock>
 8005ec6:	6478      	str	r0, [r7, #68]	; 0x44
 8005ec8:	e009      	b.n	8005ede <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2210      	movs	r2, #16
 8005ece:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f002 fb7f 	bl	80085da <SDMMC_CmdWriteSingleBlock>
 8005edc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d012      	beq.n	8005f0a <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a86      	ldr	r2, [pc, #536]	; (8006104 <HAL_SD_WriteBlocks+0x314>)
 8005eea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ef2:	431a      	orrs	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e0f7      	b.n	80060fa <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8005f0e:	e05c      	b.n	8005fca <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d037      	beq.n	8005f8e <HAL_SD_WriteBlocks+0x19e>
 8005f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f20:	2b1f      	cmp	r3, #31
 8005f22:	d934      	bls.n	8005f8e <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8005f24:	2300      	movs	r3, #0
 8005f26:	643b      	str	r3, [r7, #64]	; 0x40
 8005f28:	e02b      	b.n	8005f82 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8005f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f32:	3301      	adds	r3, #1
 8005f34:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	021a      	lsls	r2, r3, #8
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f44:	3301      	adds	r3, #1
 8005f46:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	041a      	lsls	r2, r3, #16
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f56:	3301      	adds	r3, #1
 8005f58:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	061a      	lsls	r2, r3, #24
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f68:	3301      	adds	r3, #1
 8005f6a:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f107 0214 	add.w	r2, r7, #20
 8005f74:	4611      	mov	r1, r2
 8005f76:	4618      	mov	r0, r3
 8005f78:	f002 fa1f 	bl	80083ba <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8005f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f7e:	3301      	adds	r3, #1
 8005f80:	643b      	str	r3, [r7, #64]	; 0x40
 8005f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f84:	2b07      	cmp	r3, #7
 8005f86:	d9d0      	bls.n	8005f2a <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8005f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f8a:	3b20      	subs	r3, #32
 8005f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8005f8e:	f7fb faa7 	bl	80014e0 <HAL_GetTick>
 8005f92:	4602      	mov	r2, r0
 8005f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d902      	bls.n	8005fa4 <HAL_SD_WriteBlocks+0x1b4>
 8005f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d112      	bne.n	8005fca <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a56      	ldr	r2, [pc, #344]	; (8006104 <HAL_SD_WriteBlocks+0x314>)
 8005faa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e097      	b.n	80060fa <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd0:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d09b      	beq.n	8005f10 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fe6:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d022      	beq.n	800603c <HAL_SD_WriteBlocks+0x24c>
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d91f      	bls.n	800603c <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006000:	2b03      	cmp	r3, #3
 8006002:	d01b      	beq.n	800603c <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4618      	mov	r0, r3
 800600a:	f002 fb2d 	bl	8008668 <SDMMC_CmdStopTransfer>
 800600e:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8006010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006012:	2b00      	cmp	r3, #0
 8006014:	d012      	beq.n	800603c <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a3a      	ldr	r2, [pc, #232]	; (8006104 <HAL_SD_WriteBlocks+0x314>)
 800601c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006024:	431a      	orrs	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e05e      	b.n	80060fa <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006042:	f003 0308 	and.w	r3, r3, #8
 8006046:	2b00      	cmp	r3, #0
 8006048:	d012      	beq.n	8006070 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a2d      	ldr	r2, [pc, #180]	; (8006104 <HAL_SD_WriteBlocks+0x314>)
 8006050:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006056:	f043 0208 	orr.w	r2, r3, #8
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e044      	b.n	80060fa <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d012      	beq.n	80060a4 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a20      	ldr	r2, [pc, #128]	; (8006104 <HAL_SD_WriteBlocks+0x314>)
 8006084:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800608a:	f043 0202 	orr.w	r2, r3, #2
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e02a      	b.n	80060fa <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060aa:	f003 0310 	and.w	r3, r3, #16
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d012      	beq.n	80060d8 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a13      	ldr	r2, [pc, #76]	; (8006104 <HAL_SD_WriteBlocks+0x314>)
 80060b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060be:	f043 0210 	orr.w	r2, r3, #16
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e010      	b.n	80060fa <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a0a      	ldr	r2, [pc, #40]	; (8006108 <HAL_SD_WriteBlocks+0x318>)
 80060de:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 80060e8:	2300      	movs	r3, #0
 80060ea:	e006      	b.n	80060fa <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
  }
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3748      	adds	r7, #72	; 0x48
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	1fe00fff 	.word	0x1fe00fff
 8006108:	18000f3a 	.word	0x18000f3a

0800610c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800611a:	0f9b      	lsrs	r3, r3, #30
 800611c:	b2da      	uxtb	r2, r3
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006126:	0e9b      	lsrs	r3, r3, #26
 8006128:	b2db      	uxtb	r3, r3
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	b2da      	uxtb	r2, r3
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006138:	0e1b      	lsrs	r3, r3, #24
 800613a:	b2db      	uxtb	r3, r3
 800613c:	f003 0303 	and.w	r3, r3, #3
 8006140:	b2da      	uxtb	r2, r3
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800614a:	0c1b      	lsrs	r3, r3, #16
 800614c:	b2da      	uxtb	r2, r3
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006156:	0a1b      	lsrs	r3, r3, #8
 8006158:	b2da      	uxtb	r2, r3
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006162:	b2da      	uxtb	r2, r3
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800616c:	0d1b      	lsrs	r3, r3, #20
 800616e:	b29a      	uxth	r2, r3
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006178:	0c1b      	lsrs	r3, r3, #16
 800617a:	b2db      	uxtb	r3, r3
 800617c:	f003 030f 	and.w	r3, r3, #15
 8006180:	b2da      	uxtb	r2, r3
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800618a:	0bdb      	lsrs	r3, r3, #15
 800618c:	b2db      	uxtb	r3, r3
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	b2da      	uxtb	r2, r3
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800619c:	0b9b      	lsrs	r3, r3, #14
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	f003 0301 	and.w	r3, r3, #1
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061ae:	0b5b      	lsrs	r3, r3, #13
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061c0:	0b1b      	lsrs	r3, r3, #12
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2200      	movs	r2, #0
 80061d2:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d163      	bne.n	80062a4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061e0:	009a      	lsls	r2, r3, #2
 80061e2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80061e6:	4013      	ands	r3, r2
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80061ec:	0f92      	lsrs	r2, r2, #30
 80061ee:	431a      	orrs	r2, r3
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061f8:	0edb      	lsrs	r3, r3, #27
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	f003 0307 	and.w	r3, r3, #7
 8006200:	b2da      	uxtb	r2, r3
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800620a:	0e1b      	lsrs	r3, r3, #24
 800620c:	b2db      	uxtb	r3, r3
 800620e:	f003 0307 	and.w	r3, r3, #7
 8006212:	b2da      	uxtb	r2, r3
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800621c:	0d5b      	lsrs	r3, r3, #21
 800621e:	b2db      	uxtb	r3, r3
 8006220:	f003 0307 	and.w	r3, r3, #7
 8006224:	b2da      	uxtb	r2, r3
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800622e:	0c9b      	lsrs	r3, r3, #18
 8006230:	b2db      	uxtb	r3, r3
 8006232:	f003 0307 	and.w	r3, r3, #7
 8006236:	b2da      	uxtb	r2, r3
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006240:	0bdb      	lsrs	r3, r3, #15
 8006242:	b2db      	uxtb	r3, r3
 8006244:	f003 0307 	and.w	r3, r3, #7
 8006248:	b2da      	uxtb	r2, r3
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	1c5a      	adds	r2, r3, #1
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	7e1b      	ldrb	r3, [r3, #24]
 800625c:	b2db      	uxtb	r3, r3
 800625e:	f003 0307 	and.w	r3, r3, #7
 8006262:	3302      	adds	r3, #2
 8006264:	2201      	movs	r2, #1
 8006266:	fa02 f303 	lsl.w	r3, r2, r3
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800626e:	fb02 f203 	mul.w	r2, r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	7a1b      	ldrb	r3, [r3, #8]
 800627a:	b2db      	uxtb	r3, r3
 800627c:	f003 030f 	and.w	r3, r3, #15
 8006280:	2201      	movs	r2, #1
 8006282:	409a      	lsls	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006290:	0a52      	lsrs	r2, r2, #9
 8006292:	fb02 f203 	mul.w	r2, r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062a0:	655a      	str	r2, [r3, #84]	; 0x54
 80062a2:	e031      	b.n	8006308 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d11d      	bne.n	80062e8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062b0:	041b      	lsls	r3, r3, #16
 80062b2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062ba:	0c1b      	lsrs	r3, r3, #16
 80062bc:	431a      	orrs	r2, r3
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	3301      	adds	r3, #1
 80062c8:	029a      	lsls	r2, r3, #10
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062dc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	655a      	str	r2, [r3, #84]	; 0x54
 80062e6:	e00f      	b.n	8006308 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a58      	ldr	r2, [pc, #352]	; (8006450 <HAL_SD_GetCardCSD+0x344>)
 80062ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e09d      	b.n	8006444 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800630c:	0b9b      	lsrs	r3, r3, #14
 800630e:	b2db      	uxtb	r3, r3
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	b2da      	uxtb	r2, r3
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800631e:	09db      	lsrs	r3, r3, #7
 8006320:	b2db      	uxtb	r3, r3
 8006322:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006326:	b2da      	uxtb	r2, r3
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006330:	b2db      	uxtb	r3, r3
 8006332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006336:	b2da      	uxtb	r2, r3
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006340:	0fdb      	lsrs	r3, r3, #31
 8006342:	b2da      	uxtb	r2, r3
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800634c:	0f5b      	lsrs	r3, r3, #29
 800634e:	b2db      	uxtb	r3, r3
 8006350:	f003 0303 	and.w	r3, r3, #3
 8006354:	b2da      	uxtb	r2, r3
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800635e:	0e9b      	lsrs	r3, r3, #26
 8006360:	b2db      	uxtb	r3, r3
 8006362:	f003 0307 	and.w	r3, r3, #7
 8006366:	b2da      	uxtb	r2, r3
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006370:	0d9b      	lsrs	r3, r3, #22
 8006372:	b2db      	uxtb	r3, r3
 8006374:	f003 030f 	and.w	r3, r3, #15
 8006378:	b2da      	uxtb	r2, r3
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006382:	0d5b      	lsrs	r3, r3, #21
 8006384:	b2db      	uxtb	r3, r3
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	b2da      	uxtb	r2, r3
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800639e:	0c1b      	lsrs	r3, r3, #16
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063b2:	0bdb      	lsrs	r3, r3, #15
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063c6:	0b9b      	lsrs	r3, r3, #14
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063da:	0b5b      	lsrs	r3, r3, #13
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063ee:	0b1b      	lsrs	r3, r3, #12
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006402:	0a9b      	lsrs	r3, r3, #10
 8006404:	b2db      	uxtb	r3, r3
 8006406:	f003 0303 	and.w	r3, r3, #3
 800640a:	b2da      	uxtb	r2, r3
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006416:	0a1b      	lsrs	r3, r3, #8
 8006418:	b2db      	uxtb	r3, r3
 800641a:	f003 0303 	and.w	r3, r3, #3
 800641e:	b2da      	uxtb	r2, r3
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800642a:	085b      	lsrs	r3, r3, #1
 800642c:	b2db      	uxtb	r3, r3
 800642e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006432:	b2da      	uxtb	r2, r3
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	1fe00fff 	.word	0x1fe00fff

08006454 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b094      	sub	sp, #80	; 0x50
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800645e:	2300      	movs	r3, #0
 8006460:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800646a:	b2db      	uxtb	r3, r3
 800646c:	2b03      	cmp	r3, #3
 800646e:	d101      	bne.n	8006474 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e0a7      	b.n	80065c4 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006474:	f107 0308 	add.w	r3, r7, #8
 8006478:	4619      	mov	r1, r3
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fb36 	bl	8006aec <SD_SendSDStatus>
 8006480:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006484:	2b00      	cmp	r3, #0
 8006486:	d011      	beq.n	80064ac <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a4f      	ldr	r2, [pc, #316]	; (80065cc <HAL_SD_GetCardStatus+0x178>)
 800648e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006496:	431a      	orrs	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80064aa:	e070      	b.n	800658e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	099b      	lsrs	r3, r3, #6
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	f003 0303 	and.w	r3, r3, #3
 80064b6:	b2da      	uxtb	r2, r3
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	095b      	lsrs	r3, r3, #5
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	0a1b      	lsrs	r3, r3, #8
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	0e1b      	lsrs	r3, r3, #24
 80064dc:	b29b      	uxth	r3, r3
 80064de:	4313      	orrs	r3, r2
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	061a      	lsls	r2, r3, #24
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	021b      	lsls	r3, r3, #8
 80064ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064f2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	0a1b      	lsrs	r3, r3, #8
 80064f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80064fc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	0e1b      	lsrs	r3, r3, #24
 8006502:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	b2da      	uxtb	r2, r3
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	0a1b      	lsrs	r3, r3, #8
 8006514:	b2da      	uxtb	r2, r3
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	0d1b      	lsrs	r3, r3, #20
 800651e:	b2db      	uxtb	r3, r3
 8006520:	f003 030f 	and.w	r3, r3, #15
 8006524:	b2da      	uxtb	r2, r3
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	0c1b      	lsrs	r3, r3, #16
 800652e:	b29b      	uxth	r3, r3
 8006530:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006534:	b29a      	uxth	r2, r3
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	b29b      	uxth	r3, r3
 800653a:	b2db      	uxtb	r3, r3
 800653c:	b29b      	uxth	r3, r3
 800653e:	4313      	orrs	r3, r2
 8006540:	b29a      	uxth	r2, r3
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	0a9b      	lsrs	r3, r3, #10
 800654a:	b2db      	uxtb	r3, r3
 800654c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006550:	b2da      	uxtb	r2, r3
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	0a1b      	lsrs	r3, r3, #8
 800655a:	b2db      	uxtb	r3, r3
 800655c:	f003 0303 	and.w	r3, r3, #3
 8006560:	b2da      	uxtb	r2, r3
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	091b      	lsrs	r3, r3, #4
 800656a:	b2db      	uxtb	r3, r3
 800656c:	f003 030f 	and.w	r3, r3, #15
 8006570:	b2da      	uxtb	r2, r3
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	b2db      	uxtb	r3, r3
 800657a:	f003 030f 	and.w	r3, r3, #15
 800657e:	b2da      	uxtb	r2, r3
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	0e1b      	lsrs	r3, r3, #24
 8006588:	b2da      	uxtb	r2, r3
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006596:	4618      	mov	r0, r3
 8006598:	f001 ffb6 	bl	8008508 <SDMMC_CmdBlockLength>
 800659c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800659e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00d      	beq.n	80065c0 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a08      	ldr	r2, [pc, #32]	; (80065cc <HAL_SD_GetCardStatus+0x178>)
 80065aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065b0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 80065c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3750      	adds	r7, #80	; 0x50
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	1fe00fff 	.word	0x1fe00fff

080065d0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80065d0:	b590      	push	{r4, r7, lr}
 80065d2:	b08d      	sub	sp, #52	; 0x34
 80065d4:	af02      	add	r7, sp, #8
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 80065da:	2300      	movs	r3, #0
 80065dc:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2203      	movs	r2, #3
 80065e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f0:	2b03      	cmp	r3, #3
 80065f2:	d02e      	beq.n	8006652 <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065fa:	d106      	bne.n	800660a <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006600:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	635a      	str	r2, [r3, #52]	; 0x34
 8006608:	e029      	b.n	800665e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006610:	d10a      	bne.n	8006628 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 fb62 	bl	8006cdc <SD_WideBus_Enable>
 8006618:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	431a      	orrs	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	635a      	str	r2, [r3, #52]	; 0x34
 8006626:	e01a      	b.n	800665e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10a      	bne.n	8006644 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fb9f 	bl	8006d72 <SD_WideBus_Disable>
 8006634:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	431a      	orrs	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	635a      	str	r2, [r3, #52]	; 0x34
 8006642:	e00c      	b.n	800665e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006648:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	635a      	str	r2, [r3, #52]	; 0x34
 8006650:	e005      	b.n	800665e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006656:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006662:	2b00      	cmp	r3, #0
 8006664:	d007      	beq.n	8006676 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a5e      	ldr	r2, [pc, #376]	; (80067e4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800666c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006674:	e094      	b.n	80067a0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006676:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800667a:	f7fd fecf 	bl	800441c <HAL_RCCEx_GetPeriphCLKFreq>
 800667e:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	2b00      	cmp	r3, #0
 8006684:	f000 8083 	beq.w	800678e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	695a      	ldr	r2, [r3, #20]
 80066a2:	6a3b      	ldr	r3, [r7, #32]
 80066a4:	4950      	ldr	r1, [pc, #320]	; (80067e8 <HAL_SD_ConfigWideBusOperation+0x218>)
 80066a6:	fba1 1303 	umull	r1, r3, r1, r3
 80066aa:	0e1b      	lsrs	r3, r3, #24
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d303      	bcc.n	80066b8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	61bb      	str	r3, [r7, #24]
 80066b6:	e05a      	b.n	800676e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066c0:	d103      	bne.n	80066ca <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	61bb      	str	r3, [r7, #24]
 80066c8:	e051      	b.n	800676e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066d2:	d126      	bne.n	8006722 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d10e      	bne.n	80066fa <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	4a43      	ldr	r2, [pc, #268]	; (80067ec <HAL_SD_ConfigWideBusOperation+0x21c>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d906      	bls.n	80066f2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80066e4:	6a3b      	ldr	r3, [r7, #32]
 80066e6:	4a40      	ldr	r2, [pc, #256]	; (80067e8 <HAL_SD_ConfigWideBusOperation+0x218>)
 80066e8:	fba2 2303 	umull	r2, r3, r2, r3
 80066ec:	0e5b      	lsrs	r3, r3, #25
 80066ee:	61bb      	str	r3, [r7, #24]
 80066f0:	e03d      	b.n	800676e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	61bb      	str	r3, [r7, #24]
 80066f8:	e039      	b.n	800676e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	005b      	lsls	r3, r3, #1
 8006700:	6a3a      	ldr	r2, [r7, #32]
 8006702:	fbb2 f3f3 	udiv	r3, r2, r3
 8006706:	4a39      	ldr	r2, [pc, #228]	; (80067ec <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d906      	bls.n	800671a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800670c:	6a3b      	ldr	r3, [r7, #32]
 800670e:	4a36      	ldr	r2, [pc, #216]	; (80067e8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006710:	fba2 2303 	umull	r2, r3, r2, r3
 8006714:	0e5b      	lsrs	r3, r3, #25
 8006716:	61bb      	str	r3, [r7, #24]
 8006718:	e029      	b.n	800676e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	695b      	ldr	r3, [r3, #20]
 800671e:	61bb      	str	r3, [r7, #24]
 8006720:	e025      	b.n	800676e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10e      	bne.n	8006748 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	4a30      	ldr	r2, [pc, #192]	; (80067f0 <HAL_SD_ConfigWideBusOperation+0x220>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d906      	bls.n	8006740 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006732:	6a3b      	ldr	r3, [r7, #32]
 8006734:	4a2c      	ldr	r2, [pc, #176]	; (80067e8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006736:	fba2 2303 	umull	r2, r3, r2, r3
 800673a:	0e1b      	lsrs	r3, r3, #24
 800673c:	61bb      	str	r3, [r7, #24]
 800673e:	e016      	b.n	800676e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	695b      	ldr	r3, [r3, #20]
 8006744:	61bb      	str	r3, [r7, #24]
 8006746:	e012      	b.n	800676e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	005b      	lsls	r3, r3, #1
 800674e:	6a3a      	ldr	r2, [r7, #32]
 8006750:	fbb2 f3f3 	udiv	r3, r2, r3
 8006754:	4a26      	ldr	r2, [pc, #152]	; (80067f0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d906      	bls.n	8006768 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800675a:	6a3b      	ldr	r3, [r7, #32]
 800675c:	4a22      	ldr	r2, [pc, #136]	; (80067e8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800675e:	fba2 2303 	umull	r2, r3, r2, r3
 8006762:	0e1b      	lsrs	r3, r3, #24
 8006764:	61bb      	str	r3, [r7, #24]
 8006766:	e002      	b.n	800676e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681c      	ldr	r4, [r3, #0]
 8006772:	466a      	mov	r2, sp
 8006774:	f107 0314 	add.w	r3, r7, #20
 8006778:	e893 0003 	ldmia.w	r3, {r0, r1}
 800677c:	e882 0003 	stmia.w	r2, {r0, r1}
 8006780:	f107 0308 	add.w	r3, r7, #8
 8006784:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006786:	4620      	mov	r0, r4
 8006788:	f001 fde0 	bl	800834c <SDMMC_Init>
 800678c:	e008      	b.n	80067a0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006792:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80067a8:	4618      	mov	r0, r3
 80067aa:	f001 fead 	bl	8008508 <SDMMC_CmdBlockLength>
 80067ae:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00c      	beq.n	80067d0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a0a      	ldr	r2, [pc, #40]	; (80067e4 <HAL_SD_ConfigWideBusOperation+0x214>)
 80067bc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	431a      	orrs	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80067d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80067dc:	4618      	mov	r0, r3
 80067de:	372c      	adds	r7, #44	; 0x2c
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd90      	pop	{r4, r7, pc}
 80067e4:	1fe00fff 	.word	0x1fe00fff
 80067e8:	55e63b89 	.word	0x55e63b89
 80067ec:	02faf080 	.word	0x02faf080
 80067f0:	017d7840 	.word	0x017d7840

080067f4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80067fc:	2300      	movs	r3, #0
 80067fe:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006800:	f107 030c 	add.w	r3, r7, #12
 8006804:	4619      	mov	r1, r3
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fa40 	bl	8006c8c <SD_SendStatus>
 800680c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d005      	beq.n	8006820 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	431a      	orrs	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	0a5b      	lsrs	r3, r3, #9
 8006824:	f003 030f 	and.w	r3, r3, #15
 8006828:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800682a:	693b      	ldr	r3, [r7, #16]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3718      	adds	r7, #24
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b090      	sub	sp, #64	; 0x40
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800683c:	2300      	movs	r3, #0
 800683e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8006840:	f7fa fe4e 	bl	80014e0 <HAL_GetTick>
 8006844:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4618      	mov	r0, r3
 800684c:	f001 fdd7 	bl	80083fe <SDMMC_GetPowerState>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d102      	bne.n	800685c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006856:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800685a:	e0b5      	b.n	80069c8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006860:	2b03      	cmp	r3, #3
 8006862:	d02e      	beq.n	80068c2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4618      	mov	r0, r3
 800686a:	f002 f822 	bl	80088b2 <SDMMC_CmdSendCID>
 800686e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <SD_InitCard+0x46>
    {
      return errorstate;
 8006876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006878:	e0a6      	b.n	80069c8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2100      	movs	r1, #0
 8006880:	4618      	mov	r0, r3
 8006882:	f001 fe02 	bl	800848a <SDMMC_GetResponse>
 8006886:	4602      	mov	r2, r0
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2104      	movs	r1, #4
 8006892:	4618      	mov	r0, r3
 8006894:	f001 fdf9 	bl	800848a <SDMMC_GetResponse>
 8006898:	4602      	mov	r2, r0
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2108      	movs	r1, #8
 80068a4:	4618      	mov	r0, r3
 80068a6:	f001 fdf0 	bl	800848a <SDMMC_GetResponse>
 80068aa:	4602      	mov	r2, r0
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	210c      	movs	r1, #12
 80068b6:	4618      	mov	r0, r3
 80068b8:	f001 fde7 	bl	800848a <SDMMC_GetResponse>
 80068bc:	4602      	mov	r2, r0
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c6:	2b03      	cmp	r3, #3
 80068c8:	d01d      	beq.n	8006906 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80068ca:	e019      	b.n	8006900 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f107 020a 	add.w	r2, r7, #10
 80068d4:	4611      	mov	r1, r2
 80068d6:	4618      	mov	r0, r3
 80068d8:	f002 f82a 	bl	8008930 <SDMMC_CmdSetRelAdd>
 80068dc:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80068de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d001      	beq.n	80068e8 <SD_InitCard+0xb4>
      {
        return errorstate;
 80068e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e6:	e06f      	b.n	80069c8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80068e8:	f7fa fdfa 	bl	80014e0 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	f241 3287 	movw	r2, #4999	; 0x1387
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d902      	bls.n	8006900 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80068fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80068fe:	e063      	b.n	80069c8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8006900:	897b      	ldrh	r3, [r7, #10]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d0e2      	beq.n	80068cc <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690a:	2b03      	cmp	r3, #3
 800690c:	d036      	beq.n	800697c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800690e:	897b      	ldrh	r3, [r7, #10]
 8006910:	461a      	mov	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800691e:	041b      	lsls	r3, r3, #16
 8006920:	4619      	mov	r1, r3
 8006922:	4610      	mov	r0, r2
 8006924:	f001 ffe4 	bl	80088f0 <SDMMC_CmdSendCSD>
 8006928:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800692a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692c:	2b00      	cmp	r3, #0
 800692e:	d001      	beq.n	8006934 <SD_InitCard+0x100>
    {
      return errorstate;
 8006930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006932:	e049      	b.n	80069c8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2100      	movs	r1, #0
 800693a:	4618      	mov	r0, r3
 800693c:	f001 fda5 	bl	800848a <SDMMC_GetResponse>
 8006940:	4602      	mov	r2, r0
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2104      	movs	r1, #4
 800694c:	4618      	mov	r0, r3
 800694e:	f001 fd9c 	bl	800848a <SDMMC_GetResponse>
 8006952:	4602      	mov	r2, r0
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2108      	movs	r1, #8
 800695e:	4618      	mov	r0, r3
 8006960:	f001 fd93 	bl	800848a <SDMMC_GetResponse>
 8006964:	4602      	mov	r2, r0
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	210c      	movs	r1, #12
 8006970:	4618      	mov	r0, r3
 8006972:	f001 fd8a 	bl	800848a <SDMMC_GetResponse>
 8006976:	4602      	mov	r2, r0
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2104      	movs	r1, #4
 8006982:	4618      	mov	r0, r3
 8006984:	f001 fd81 	bl	800848a <SDMMC_GetResponse>
 8006988:	4603      	mov	r3, r0
 800698a:	0d1a      	lsrs	r2, r3, #20
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006990:	f107 030c 	add.w	r3, r7, #12
 8006994:	4619      	mov	r1, r3
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f7ff fbb8 	bl	800610c <HAL_SD_GetCardCSD>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d002      	beq.n	80069a8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80069a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80069a6:	e00f      	b.n	80069c8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b0:	041b      	lsls	r3, r3, #16
 80069b2:	4619      	mov	r1, r3
 80069b4:	4610      	mov	r0, r2
 80069b6:	f001 fe93 	bl	80086e0 <SDMMC_CmdSelDesel>
 80069ba:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80069bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <SD_InitCard+0x192>
  {
    return errorstate;
 80069c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c4:	e000      	b.n	80069c8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3740      	adds	r7, #64	; 0x40
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069d8:	2300      	movs	r3, #0
 80069da:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80069dc:	2300      	movs	r3, #0
 80069de:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80069e0:	2300      	movs	r3, #0
 80069e2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4618      	mov	r0, r3
 80069ea:	f001 fe9c 	bl	8008726 <SDMMC_CmdGoIdleState>
 80069ee:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <SD_PowerON+0x2a>
  {
    return errorstate;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	e072      	b.n	8006ae0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f001 feaf 	bl	8008762 <SDMMC_CmdOperCond>
 8006a04:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a0c:	d10d      	bne.n	8006a2a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f001 fe84 	bl	8008726 <SDMMC_CmdGoIdleState>
 8006a1e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d004      	beq.n	8006a30 <SD_PowerON+0x60>
    {
      return errorstate;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	e05a      	b.n	8006ae0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d137      	bne.n	8006aa8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f001 feaf 	bl	80087a2 <SDMMC_CmdAppCommand>
 8006a44:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d02d      	beq.n	8006aa8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006a50:	e046      	b.n	8006ae0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2100      	movs	r1, #0
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f001 fea2 	bl	80087a2 <SDMMC_CmdAppCommand>
 8006a5e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <SD_PowerON+0x9a>
    {
      return errorstate;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	e03a      	b.n	8006ae0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	491e      	ldr	r1, [pc, #120]	; (8006ae8 <SD_PowerON+0x118>)
 8006a70:	4618      	mov	r0, r3
 8006a72:	f001 feb9 	bl	80087e8 <SDMMC_CmdAppOperCommand>
 8006a76:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d002      	beq.n	8006a84 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006a82:	e02d      	b.n	8006ae0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2100      	movs	r1, #0
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f001 fcfd 	bl	800848a <SDMMC_GetResponse>
 8006a90:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	0fdb      	lsrs	r3, r3, #31
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d101      	bne.n	8006a9e <SD_PowerON+0xce>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e000      	b.n	8006aa0 <SD_PowerON+0xd0>
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	613b      	str	r3, [r7, #16]

    count++;
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d802      	bhi.n	8006ab8 <SD_PowerON+0xe8>
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d0cc      	beq.n	8006a52 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d902      	bls.n	8006ac8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006ac2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ac6:	e00b      	b.n	8006ae0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d002      	beq.n	8006ade <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	c1100000 	.word	0xc1100000

08006aec <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b08c      	sub	sp, #48	; 0x30
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006af6:	f7fa fcf3 	bl	80014e0 <HAL_GetTick>
 8006afa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2100      	movs	r1, #0
 8006b06:	4618      	mov	r0, r3
 8006b08:	f001 fcbf 	bl	800848a <SDMMC_GetResponse>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b16:	d102      	bne.n	8006b1e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006b18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b1c:	e0b0      	b.n	8006c80 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2140      	movs	r1, #64	; 0x40
 8006b24:	4618      	mov	r0, r3
 8006b26:	f001 fcef 	bl	8008508 <SDMMC_CmdBlockLength>
 8006b2a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b2c:	6a3b      	ldr	r3, [r7, #32]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d005      	beq.n	8006b3e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006b3a:	6a3b      	ldr	r3, [r7, #32]
 8006b3c:	e0a0      	b.n	8006c80 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b46:	041b      	lsls	r3, r3, #16
 8006b48:	4619      	mov	r1, r3
 8006b4a:	4610      	mov	r0, r2
 8006b4c:	f001 fe29 	bl	80087a2 <SDMMC_CmdAppCommand>
 8006b50:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b52:	6a3b      	ldr	r3, [r7, #32]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d005      	beq.n	8006b64 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006b60:	6a3b      	ldr	r3, [r7, #32]
 8006b62:	e08d      	b.n	8006c80 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006b64:	f04f 33ff 	mov.w	r3, #4294967295
 8006b68:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8006b6a:	2340      	movs	r3, #64	; 0x40
 8006b6c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006b6e:	2360      	movs	r3, #96	; 0x60
 8006b70:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006b72:	2302      	movs	r3, #2
 8006b74:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006b76:	2300      	movs	r3, #0
 8006b78:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f107 0208 	add.w	r2, r7, #8
 8006b86:	4611      	mov	r1, r2
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f001 fc91 	bl	80084b0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f001 ff11 	bl	80089ba <SDMMC_CmdStatusRegister>
 8006b98:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b9a:	6a3b      	ldr	r3, [r7, #32]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d02b      	beq.n	8006bf8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006ba8:	6a3b      	ldr	r3, [r7, #32]
 8006baa:	e069      	b.n	8006c80 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d013      	beq.n	8006be2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8006bba:	2300      	movs	r3, #0
 8006bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bbe:	e00d      	b.n	8006bdc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f001 fbeb 	bl	80083a0 <SDMMC_ReadFIFO>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bce:	601a      	str	r2, [r3, #0]
        pData++;
 8006bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8006bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd8:	3301      	adds	r3, #1
 8006bda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bde:	2b07      	cmp	r3, #7
 8006be0:	d9ee      	bls.n	8006bc0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006be2:	f7fa fc7d 	bl	80014e0 <HAL_GetTick>
 8006be6:	4602      	mov	r2, r0
 8006be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf0:	d102      	bne.n	8006bf8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006bf2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006bf6:	e043      	b.n	8006c80 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bfe:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d0d2      	beq.n	8006bac <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c0c:	f003 0308 	and.w	r3, r3, #8
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d001      	beq.n	8006c18 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006c14:	2308      	movs	r3, #8
 8006c16:	e033      	b.n	8006c80 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d001      	beq.n	8006c2a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006c26:	2302      	movs	r3, #2
 8006c28:	e02a      	b.n	8006c80 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c30:	f003 0320 	and.w	r3, r3, #32
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d017      	beq.n	8006c68 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8006c38:	2320      	movs	r3, #32
 8006c3a:	e021      	b.n	8006c80 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4618      	mov	r0, r3
 8006c42:	f001 fbad 	bl	80083a0 <SDMMC_ReadFIFO>
 8006c46:	4602      	mov	r2, r0
 8006c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4a:	601a      	str	r2, [r3, #0]
    pData++;
 8006c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4e:	3304      	adds	r3, #4
 8006c50:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006c52:	f7fa fc45 	bl	80014e0 <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c60:	d102      	bne.n	8006c68 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006c62:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006c66:	e00b      	b.n	8006c80 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1e2      	bne.n	8006c3c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a03      	ldr	r2, [pc, #12]	; (8006c88 <SD_SendSDStatus+0x19c>)
 8006c7c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3730      	adds	r7, #48	; 0x30
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	18000f3a 	.word	0x18000f3a

08006c8c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d102      	bne.n	8006ca2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006c9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ca0:	e018      	b.n	8006cd4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006caa:	041b      	lsls	r3, r3, #16
 8006cac:	4619      	mov	r1, r3
 8006cae:	4610      	mov	r0, r2
 8006cb0:	f001 fe60 	bl	8008974 <SDMMC_CmdSendStatus>
 8006cb4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d001      	beq.n	8006cc0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	e009      	b.n	8006cd4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f001 fbdf 	bl	800848a <SDMMC_GetResponse>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	60fb      	str	r3, [r7, #12]
 8006ce8:	2300      	movs	r3, #0
 8006cea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f001 fbc9 	bl	800848a <SDMMC_GetResponse>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d02:	d102      	bne.n	8006d0a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006d04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d08:	e02f      	b.n	8006d6a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006d0a:	f107 030c 	add.w	r3, r7, #12
 8006d0e:	4619      	mov	r1, r3
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 f879 	bl	8006e08 <SD_FindSCR>
 8006d16:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d001      	beq.n	8006d22 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	e023      	b.n	8006d6a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d01c      	beq.n	8006d66 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d34:	041b      	lsls	r3, r3, #16
 8006d36:	4619      	mov	r1, r3
 8006d38:	4610      	mov	r0, r2
 8006d3a:	f001 fd32 	bl	80087a2 <SDMMC_CmdAppCommand>
 8006d3e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d001      	beq.n	8006d4a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	e00f      	b.n	8006d6a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2102      	movs	r1, #2
 8006d50:	4618      	mov	r0, r3
 8006d52:	f001 fd69 	bl	8008828 <SDMMC_CmdBusWidth>
 8006d56:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	e003      	b.n	8006d6a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006d62:	2300      	movs	r3, #0
 8006d64:	e001      	b.n	8006d6a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006d66:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3718      	adds	r7, #24
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b086      	sub	sp, #24
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	60fb      	str	r3, [r7, #12]
 8006d7e:	2300      	movs	r3, #0
 8006d80:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2100      	movs	r1, #0
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f001 fb7e 	bl	800848a <SDMMC_GetResponse>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d98:	d102      	bne.n	8006da0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006d9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d9e:	e02f      	b.n	8006e00 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006da0:	f107 030c 	add.w	r3, r7, #12
 8006da4:	4619      	mov	r1, r3
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f82e 	bl	8006e08 <SD_FindSCR>
 8006dac:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d001      	beq.n	8006db8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	e023      	b.n	8006e00 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d01c      	beq.n	8006dfc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dca:	041b      	lsls	r3, r3, #16
 8006dcc:	4619      	mov	r1, r3
 8006dce:	4610      	mov	r0, r2
 8006dd0:	f001 fce7 	bl	80087a2 <SDMMC_CmdAppCommand>
 8006dd4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d001      	beq.n	8006de0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	e00f      	b.n	8006e00 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2100      	movs	r1, #0
 8006de6:	4618      	mov	r0, r3
 8006de8:	f001 fd1e 	bl	8008828 <SDMMC_CmdBusWidth>
 8006dec:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d001      	beq.n	8006df8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	e003      	b.n	8006e00 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	e001      	b.n	8006e00 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006dfc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3718      	adds	r7, #24
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b08e      	sub	sp, #56	; 0x38
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006e12:	f7fa fb65 	bl	80014e0 <HAL_GetTick>
 8006e16:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	60bb      	str	r3, [r7, #8]
 8006e20:	2300      	movs	r3, #0
 8006e22:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2108      	movs	r1, #8
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f001 fb6a 	bl	8008508 <SDMMC_CmdBlockLength>
 8006e34:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d001      	beq.n	8006e40 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3e:	e0ad      	b.n	8006f9c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e48:	041b      	lsls	r3, r3, #16
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	f001 fca8 	bl	80087a2 <SDMMC_CmdAppCommand>
 8006e52:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d001      	beq.n	8006e5e <SD_FindSCR+0x56>
  {
    return errorstate;
 8006e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5c:	e09e      	b.n	8006f9c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e62:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006e64:	2308      	movs	r3, #8
 8006e66:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006e68:	2330      	movs	r3, #48	; 0x30
 8006e6a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006e74:	2301      	movs	r3, #1
 8006e76:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f107 0210 	add.w	r2, r7, #16
 8006e80:	4611      	mov	r1, r2
 8006e82:	4618      	mov	r0, r3
 8006e84:	f001 fb14 	bl	80084b0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f001 fcee 	bl	800886e <SDMMC_CmdSendSCR>
 8006e92:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d027      	beq.n	8006eea <SD_FindSCR+0xe2>
  {
    return errorstate;
 8006e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9c:	e07e      	b.n	8006f9c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d113      	bne.n	8006ed4 <SD_FindSCR+0xcc>
 8006eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d110      	bne.n	8006ed4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f001 fa72 	bl	80083a0 <SDMMC_ReadFIFO>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f001 fa6b 	bl	80083a0 <SDMMC_ReadFIFO>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	60fb      	str	r3, [r7, #12]
      index++;
 8006ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006ed4:	f7fa fb04 	bl	80014e0 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee2:	d102      	bne.n	8006eea <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006ee4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ee8:	e058      	b.n	8006f9c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ef0:	f240 532a 	movw	r3, #1322	; 0x52a
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d0d1      	beq.n	8006e9e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f00:	f003 0308 	and.w	r3, r3, #8
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d005      	beq.n	8006f14 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2208      	movs	r2, #8
 8006f0e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006f10:	2308      	movs	r3, #8
 8006f12:	e043      	b.n	8006f9c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f1a:	f003 0302 	and.w	r3, r3, #2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d005      	beq.n	8006f2e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2202      	movs	r2, #2
 8006f28:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006f2a:	2302      	movs	r3, #2
 8006f2c:	e036      	b.n	8006f9c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f34:	f003 0320 	and.w	r3, r3, #32
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d005      	beq.n	8006f48 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2220      	movs	r2, #32
 8006f42:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006f44:	2320      	movs	r3, #32
 8006f46:	e029      	b.n	8006f9c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a15      	ldr	r2, [pc, #84]	; (8006fa4 <SD_FindSCR+0x19c>)
 8006f4e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	061a      	lsls	r2, r3, #24
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	021b      	lsls	r3, r3, #8
 8006f58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006f5c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	0a1b      	lsrs	r3, r3, #8
 8006f62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006f66:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	0e1b      	lsrs	r3, r3, #24
 8006f6c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f70:	601a      	str	r2, [r3, #0]
    scr++;
 8006f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f74:	3304      	adds	r3, #4
 8006f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	061a      	lsls	r2, r3, #24
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	021b      	lsls	r3, r3, #8
 8006f80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006f84:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	0a1b      	lsrs	r3, r3, #8
 8006f8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006f8e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	0e1b      	lsrs	r3, r3, #24
 8006f94:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f98:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3738      	adds	r7, #56	; 0x38
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	18000f3a 	.word	0x18000f3a

08006fa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e042      	b.n	8007040 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d106      	bne.n	8006fd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f7f9 ffa1 	bl	8000f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2224      	movs	r2, #36	; 0x24
 8006fd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f022 0201 	bic.w	r2, r2, #1
 8006fe8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f996 	bl	800731c <UART_SetConfig>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d101      	bne.n	8006ffa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e022      	b.n	8007040 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d002      	beq.n	8007008 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 feea 	bl	8007ddc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	685a      	ldr	r2, [r3, #4]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007016:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	689a      	ldr	r2, [r3, #8]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007026:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f042 0201 	orr.w	r2, r2, #1
 8007036:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 ff71 	bl	8007f20 <UART_CheckIdleState>
 800703e:	4603      	mov	r3, r0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b08a      	sub	sp, #40	; 0x28
 800704c:	af02      	add	r7, sp, #8
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	603b      	str	r3, [r7, #0]
 8007054:	4613      	mov	r3, r2
 8007056:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800705e:	2b20      	cmp	r3, #32
 8007060:	f040 8083 	bne.w	800716a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d002      	beq.n	8007070 <HAL_UART_Transmit+0x28>
 800706a:	88fb      	ldrh	r3, [r7, #6]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d101      	bne.n	8007074 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e07b      	b.n	800716c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800707a:	2b01      	cmp	r3, #1
 800707c:	d101      	bne.n	8007082 <HAL_UART_Transmit+0x3a>
 800707e:	2302      	movs	r3, #2
 8007080:	e074      	b.n	800716c <HAL_UART_Transmit+0x124>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2221      	movs	r2, #33	; 0x21
 8007096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800709a:	f7fa fa21 	bl	80014e0 <HAL_GetTick>
 800709e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	88fa      	ldrh	r2, [r7, #6]
 80070a4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	88fa      	ldrh	r2, [r7, #6]
 80070ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070b8:	d108      	bne.n	80070cc <HAL_UART_Transmit+0x84>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d104      	bne.n	80070cc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80070c2:	2300      	movs	r3, #0
 80070c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	61bb      	str	r3, [r7, #24]
 80070ca:	e003      	b.n	80070d4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070d0:	2300      	movs	r3, #0
 80070d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80070dc:	e02c      	b.n	8007138 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	9300      	str	r3, [sp, #0]
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	2200      	movs	r2, #0
 80070e6:	2180      	movs	r1, #128	; 0x80
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f000 ff64 	bl	8007fb6 <UART_WaitOnFlagUntilTimeout>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d001      	beq.n	80070f8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e039      	b.n	800716c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d10b      	bne.n	8007116 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	881b      	ldrh	r3, [r3, #0]
 8007102:	461a      	mov	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800710c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	3302      	adds	r3, #2
 8007112:	61bb      	str	r3, [r7, #24]
 8007114:	e007      	b.n	8007126 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	781a      	ldrb	r2, [r3, #0]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	3301      	adds	r3, #1
 8007124:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800712c:	b29b      	uxth	r3, r3
 800712e:	3b01      	subs	r3, #1
 8007130:	b29a      	uxth	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800713e:	b29b      	uxth	r3, r3
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1cc      	bne.n	80070de <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	2200      	movs	r2, #0
 800714c:	2140      	movs	r1, #64	; 0x40
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f000 ff31 	bl	8007fb6 <UART_WaitOnFlagUntilTimeout>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d001      	beq.n	800715e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e006      	b.n	800716c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2220      	movs	r2, #32
 8007162:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007166:	2300      	movs	r3, #0
 8007168:	e000      	b.n	800716c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800716a:	2302      	movs	r3, #2
  }
}
 800716c:	4618      	mov	r0, r3
 800716e:	3720      	adds	r7, #32
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b08a      	sub	sp, #40	; 0x28
 8007178:	af02      	add	r7, sp, #8
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	603b      	str	r3, [r7, #0]
 8007180:	4613      	mov	r3, r2
 8007182:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800718a:	2b20      	cmp	r3, #32
 800718c:	f040 80c0 	bne.w	8007310 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d002      	beq.n	800719c <HAL_UART_Receive+0x28>
 8007196:	88fb      	ldrh	r3, [r7, #6]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d101      	bne.n	80071a0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e0b8      	b.n	8007312 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d101      	bne.n	80071ae <HAL_UART_Receive+0x3a>
 80071aa:	2302      	movs	r3, #2
 80071ac:	e0b1      	b.n	8007312 <HAL_UART_Receive+0x19e>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2222      	movs	r2, #34	; 0x22
 80071c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071cc:	f7fa f988 	bl	80014e0 <HAL_GetTick>
 80071d0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	88fa      	ldrh	r2, [r7, #6]
 80071d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	88fa      	ldrh	r2, [r7, #6]
 80071de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ea:	d10e      	bne.n	800720a <HAL_UART_Receive+0x96>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d105      	bne.n	8007200 <HAL_UART_Receive+0x8c>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80071fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80071fe:	e02d      	b.n	800725c <HAL_UART_Receive+0xe8>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	22ff      	movs	r2, #255	; 0xff
 8007204:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007208:	e028      	b.n	800725c <HAL_UART_Receive+0xe8>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10d      	bne.n	800722e <HAL_UART_Receive+0xba>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d104      	bne.n	8007224 <HAL_UART_Receive+0xb0>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	22ff      	movs	r2, #255	; 0xff
 800721e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007222:	e01b      	b.n	800725c <HAL_UART_Receive+0xe8>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	227f      	movs	r2, #127	; 0x7f
 8007228:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800722c:	e016      	b.n	800725c <HAL_UART_Receive+0xe8>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007236:	d10d      	bne.n	8007254 <HAL_UART_Receive+0xe0>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d104      	bne.n	800724a <HAL_UART_Receive+0xd6>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	227f      	movs	r2, #127	; 0x7f
 8007244:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007248:	e008      	b.n	800725c <HAL_UART_Receive+0xe8>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	223f      	movs	r2, #63	; 0x3f
 800724e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007252:	e003      	b.n	800725c <HAL_UART_Receive+0xe8>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007262:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800726c:	d108      	bne.n	8007280 <HAL_UART_Receive+0x10c>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d104      	bne.n	8007280 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8007276:	2300      	movs	r3, #0
 8007278:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	61bb      	str	r3, [r7, #24]
 800727e:	e003      	b.n	8007288 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007284:	2300      	movs	r3, #0
 8007286:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007290:	e032      	b.n	80072f8 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	2200      	movs	r2, #0
 800729a:	2120      	movs	r1, #32
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f000 fe8a 	bl	8007fb6 <UART_WaitOnFlagUntilTimeout>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d001      	beq.n	80072ac <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e032      	b.n	8007312 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10c      	bne.n	80072cc <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	8a7b      	ldrh	r3, [r7, #18]
 80072bc:	4013      	ands	r3, r2
 80072be:	b29a      	uxth	r2, r3
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	3302      	adds	r3, #2
 80072c8:	61bb      	str	r3, [r7, #24]
 80072ca:	e00c      	b.n	80072e6 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	8a7b      	ldrh	r3, [r7, #18]
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	4013      	ands	r3, r2
 80072da:	b2da      	uxtb	r2, r3
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	3301      	adds	r3, #1
 80072e4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	3b01      	subs	r3, #1
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072fe:	b29b      	uxth	r3, r3
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1c6      	bne.n	8007292 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2220      	movs	r2, #32
 8007308:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800730c:	2300      	movs	r3, #0
 800730e:	e000      	b.n	8007312 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8007310:	2302      	movs	r3, #2
  }
}
 8007312:	4618      	mov	r0, r3
 8007314:	3720      	adds	r7, #32
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
	...

0800731c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800731c:	b5b0      	push	{r4, r5, r7, lr}
 800731e:	b08e      	sub	sp, #56	; 0x38
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	689a      	ldr	r2, [r3, #8]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	431a      	orrs	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	695b      	ldr	r3, [r3, #20]
 8007338:	431a      	orrs	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	69db      	ldr	r3, [r3, #28]
 800733e:	4313      	orrs	r3, r2
 8007340:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	4bbf      	ldr	r3, [pc, #764]	; (8007648 <UART_SetConfig+0x32c>)
 800734a:	4013      	ands	r3, r2
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	6812      	ldr	r2, [r2, #0]
 8007350:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007352:	430b      	orrs	r3, r1
 8007354:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	68da      	ldr	r2, [r3, #12]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4ab5      	ldr	r2, [pc, #724]	; (800764c <UART_SetConfig+0x330>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d004      	beq.n	8007386 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a1b      	ldr	r3, [r3, #32]
 8007380:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007382:	4313      	orrs	r3, r2
 8007384:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	689a      	ldr	r2, [r3, #8]
 800738c:	4bb0      	ldr	r3, [pc, #704]	; (8007650 <UART_SetConfig+0x334>)
 800738e:	4013      	ands	r3, r2
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	6812      	ldr	r2, [r2, #0]
 8007394:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007396:	430b      	orrs	r3, r1
 8007398:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a0:	f023 010f 	bic.w	r1, r3, #15
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	430a      	orrs	r2, r1
 80073ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4aa7      	ldr	r2, [pc, #668]	; (8007654 <UART_SetConfig+0x338>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d176      	bne.n	80074a8 <UART_SetConfig+0x18c>
 80073ba:	4ba7      	ldr	r3, [pc, #668]	; (8007658 <UART_SetConfig+0x33c>)
 80073bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073c2:	2b28      	cmp	r3, #40	; 0x28
 80073c4:	d86c      	bhi.n	80074a0 <UART_SetConfig+0x184>
 80073c6:	a201      	add	r2, pc, #4	; (adr r2, 80073cc <UART_SetConfig+0xb0>)
 80073c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073cc:	08007471 	.word	0x08007471
 80073d0:	080074a1 	.word	0x080074a1
 80073d4:	080074a1 	.word	0x080074a1
 80073d8:	080074a1 	.word	0x080074a1
 80073dc:	080074a1 	.word	0x080074a1
 80073e0:	080074a1 	.word	0x080074a1
 80073e4:	080074a1 	.word	0x080074a1
 80073e8:	080074a1 	.word	0x080074a1
 80073ec:	08007479 	.word	0x08007479
 80073f0:	080074a1 	.word	0x080074a1
 80073f4:	080074a1 	.word	0x080074a1
 80073f8:	080074a1 	.word	0x080074a1
 80073fc:	080074a1 	.word	0x080074a1
 8007400:	080074a1 	.word	0x080074a1
 8007404:	080074a1 	.word	0x080074a1
 8007408:	080074a1 	.word	0x080074a1
 800740c:	08007481 	.word	0x08007481
 8007410:	080074a1 	.word	0x080074a1
 8007414:	080074a1 	.word	0x080074a1
 8007418:	080074a1 	.word	0x080074a1
 800741c:	080074a1 	.word	0x080074a1
 8007420:	080074a1 	.word	0x080074a1
 8007424:	080074a1 	.word	0x080074a1
 8007428:	080074a1 	.word	0x080074a1
 800742c:	08007489 	.word	0x08007489
 8007430:	080074a1 	.word	0x080074a1
 8007434:	080074a1 	.word	0x080074a1
 8007438:	080074a1 	.word	0x080074a1
 800743c:	080074a1 	.word	0x080074a1
 8007440:	080074a1 	.word	0x080074a1
 8007444:	080074a1 	.word	0x080074a1
 8007448:	080074a1 	.word	0x080074a1
 800744c:	08007491 	.word	0x08007491
 8007450:	080074a1 	.word	0x080074a1
 8007454:	080074a1 	.word	0x080074a1
 8007458:	080074a1 	.word	0x080074a1
 800745c:	080074a1 	.word	0x080074a1
 8007460:	080074a1 	.word	0x080074a1
 8007464:	080074a1 	.word	0x080074a1
 8007468:	080074a1 	.word	0x080074a1
 800746c:	08007499 	.word	0x08007499
 8007470:	2301      	movs	r3, #1
 8007472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007476:	e222      	b.n	80078be <UART_SetConfig+0x5a2>
 8007478:	2304      	movs	r3, #4
 800747a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800747e:	e21e      	b.n	80078be <UART_SetConfig+0x5a2>
 8007480:	2308      	movs	r3, #8
 8007482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007486:	e21a      	b.n	80078be <UART_SetConfig+0x5a2>
 8007488:	2310      	movs	r3, #16
 800748a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800748e:	e216      	b.n	80078be <UART_SetConfig+0x5a2>
 8007490:	2320      	movs	r3, #32
 8007492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007496:	e212      	b.n	80078be <UART_SetConfig+0x5a2>
 8007498:	2340      	movs	r3, #64	; 0x40
 800749a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800749e:	e20e      	b.n	80078be <UART_SetConfig+0x5a2>
 80074a0:	2380      	movs	r3, #128	; 0x80
 80074a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074a6:	e20a      	b.n	80078be <UART_SetConfig+0x5a2>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a6b      	ldr	r2, [pc, #428]	; (800765c <UART_SetConfig+0x340>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d130      	bne.n	8007514 <UART_SetConfig+0x1f8>
 80074b2:	4b69      	ldr	r3, [pc, #420]	; (8007658 <UART_SetConfig+0x33c>)
 80074b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074b6:	f003 0307 	and.w	r3, r3, #7
 80074ba:	2b05      	cmp	r3, #5
 80074bc:	d826      	bhi.n	800750c <UART_SetConfig+0x1f0>
 80074be:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <UART_SetConfig+0x1a8>)
 80074c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c4:	080074dd 	.word	0x080074dd
 80074c8:	080074e5 	.word	0x080074e5
 80074cc:	080074ed 	.word	0x080074ed
 80074d0:	080074f5 	.word	0x080074f5
 80074d4:	080074fd 	.word	0x080074fd
 80074d8:	08007505 	.word	0x08007505
 80074dc:	2300      	movs	r3, #0
 80074de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074e2:	e1ec      	b.n	80078be <UART_SetConfig+0x5a2>
 80074e4:	2304      	movs	r3, #4
 80074e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ea:	e1e8      	b.n	80078be <UART_SetConfig+0x5a2>
 80074ec:	2308      	movs	r3, #8
 80074ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074f2:	e1e4      	b.n	80078be <UART_SetConfig+0x5a2>
 80074f4:	2310      	movs	r3, #16
 80074f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074fa:	e1e0      	b.n	80078be <UART_SetConfig+0x5a2>
 80074fc:	2320      	movs	r3, #32
 80074fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007502:	e1dc      	b.n	80078be <UART_SetConfig+0x5a2>
 8007504:	2340      	movs	r3, #64	; 0x40
 8007506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800750a:	e1d8      	b.n	80078be <UART_SetConfig+0x5a2>
 800750c:	2380      	movs	r3, #128	; 0x80
 800750e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007512:	e1d4      	b.n	80078be <UART_SetConfig+0x5a2>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a51      	ldr	r2, [pc, #324]	; (8007660 <UART_SetConfig+0x344>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d130      	bne.n	8007580 <UART_SetConfig+0x264>
 800751e:	4b4e      	ldr	r3, [pc, #312]	; (8007658 <UART_SetConfig+0x33c>)
 8007520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007522:	f003 0307 	and.w	r3, r3, #7
 8007526:	2b05      	cmp	r3, #5
 8007528:	d826      	bhi.n	8007578 <UART_SetConfig+0x25c>
 800752a:	a201      	add	r2, pc, #4	; (adr r2, 8007530 <UART_SetConfig+0x214>)
 800752c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007530:	08007549 	.word	0x08007549
 8007534:	08007551 	.word	0x08007551
 8007538:	08007559 	.word	0x08007559
 800753c:	08007561 	.word	0x08007561
 8007540:	08007569 	.word	0x08007569
 8007544:	08007571 	.word	0x08007571
 8007548:	2300      	movs	r3, #0
 800754a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800754e:	e1b6      	b.n	80078be <UART_SetConfig+0x5a2>
 8007550:	2304      	movs	r3, #4
 8007552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007556:	e1b2      	b.n	80078be <UART_SetConfig+0x5a2>
 8007558:	2308      	movs	r3, #8
 800755a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800755e:	e1ae      	b.n	80078be <UART_SetConfig+0x5a2>
 8007560:	2310      	movs	r3, #16
 8007562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007566:	e1aa      	b.n	80078be <UART_SetConfig+0x5a2>
 8007568:	2320      	movs	r3, #32
 800756a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800756e:	e1a6      	b.n	80078be <UART_SetConfig+0x5a2>
 8007570:	2340      	movs	r3, #64	; 0x40
 8007572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007576:	e1a2      	b.n	80078be <UART_SetConfig+0x5a2>
 8007578:	2380      	movs	r3, #128	; 0x80
 800757a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800757e:	e19e      	b.n	80078be <UART_SetConfig+0x5a2>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a37      	ldr	r2, [pc, #220]	; (8007664 <UART_SetConfig+0x348>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d130      	bne.n	80075ec <UART_SetConfig+0x2d0>
 800758a:	4b33      	ldr	r3, [pc, #204]	; (8007658 <UART_SetConfig+0x33c>)
 800758c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800758e:	f003 0307 	and.w	r3, r3, #7
 8007592:	2b05      	cmp	r3, #5
 8007594:	d826      	bhi.n	80075e4 <UART_SetConfig+0x2c8>
 8007596:	a201      	add	r2, pc, #4	; (adr r2, 800759c <UART_SetConfig+0x280>)
 8007598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800759c:	080075b5 	.word	0x080075b5
 80075a0:	080075bd 	.word	0x080075bd
 80075a4:	080075c5 	.word	0x080075c5
 80075a8:	080075cd 	.word	0x080075cd
 80075ac:	080075d5 	.word	0x080075d5
 80075b0:	080075dd 	.word	0x080075dd
 80075b4:	2300      	movs	r3, #0
 80075b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075ba:	e180      	b.n	80078be <UART_SetConfig+0x5a2>
 80075bc:	2304      	movs	r3, #4
 80075be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075c2:	e17c      	b.n	80078be <UART_SetConfig+0x5a2>
 80075c4:	2308      	movs	r3, #8
 80075c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075ca:	e178      	b.n	80078be <UART_SetConfig+0x5a2>
 80075cc:	2310      	movs	r3, #16
 80075ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075d2:	e174      	b.n	80078be <UART_SetConfig+0x5a2>
 80075d4:	2320      	movs	r3, #32
 80075d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075da:	e170      	b.n	80078be <UART_SetConfig+0x5a2>
 80075dc:	2340      	movs	r3, #64	; 0x40
 80075de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075e2:	e16c      	b.n	80078be <UART_SetConfig+0x5a2>
 80075e4:	2380      	movs	r3, #128	; 0x80
 80075e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075ea:	e168      	b.n	80078be <UART_SetConfig+0x5a2>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a1d      	ldr	r2, [pc, #116]	; (8007668 <UART_SetConfig+0x34c>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d142      	bne.n	800767c <UART_SetConfig+0x360>
 80075f6:	4b18      	ldr	r3, [pc, #96]	; (8007658 <UART_SetConfig+0x33c>)
 80075f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075fa:	f003 0307 	and.w	r3, r3, #7
 80075fe:	2b05      	cmp	r3, #5
 8007600:	d838      	bhi.n	8007674 <UART_SetConfig+0x358>
 8007602:	a201      	add	r2, pc, #4	; (adr r2, 8007608 <UART_SetConfig+0x2ec>)
 8007604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007608:	08007621 	.word	0x08007621
 800760c:	08007629 	.word	0x08007629
 8007610:	08007631 	.word	0x08007631
 8007614:	08007639 	.word	0x08007639
 8007618:	08007641 	.word	0x08007641
 800761c:	0800766d 	.word	0x0800766d
 8007620:	2300      	movs	r3, #0
 8007622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007626:	e14a      	b.n	80078be <UART_SetConfig+0x5a2>
 8007628:	2304      	movs	r3, #4
 800762a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800762e:	e146      	b.n	80078be <UART_SetConfig+0x5a2>
 8007630:	2308      	movs	r3, #8
 8007632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007636:	e142      	b.n	80078be <UART_SetConfig+0x5a2>
 8007638:	2310      	movs	r3, #16
 800763a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800763e:	e13e      	b.n	80078be <UART_SetConfig+0x5a2>
 8007640:	2320      	movs	r3, #32
 8007642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007646:	e13a      	b.n	80078be <UART_SetConfig+0x5a2>
 8007648:	cfff69f3 	.word	0xcfff69f3
 800764c:	58000c00 	.word	0x58000c00
 8007650:	11fff4ff 	.word	0x11fff4ff
 8007654:	40011000 	.word	0x40011000
 8007658:	58024400 	.word	0x58024400
 800765c:	40004400 	.word	0x40004400
 8007660:	40004800 	.word	0x40004800
 8007664:	40004c00 	.word	0x40004c00
 8007668:	40005000 	.word	0x40005000
 800766c:	2340      	movs	r3, #64	; 0x40
 800766e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007672:	e124      	b.n	80078be <UART_SetConfig+0x5a2>
 8007674:	2380      	movs	r3, #128	; 0x80
 8007676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800767a:	e120      	b.n	80078be <UART_SetConfig+0x5a2>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4acc      	ldr	r2, [pc, #816]	; (80079b4 <UART_SetConfig+0x698>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d176      	bne.n	8007774 <UART_SetConfig+0x458>
 8007686:	4bcc      	ldr	r3, [pc, #816]	; (80079b8 <UART_SetConfig+0x69c>)
 8007688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800768a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800768e:	2b28      	cmp	r3, #40	; 0x28
 8007690:	d86c      	bhi.n	800776c <UART_SetConfig+0x450>
 8007692:	a201      	add	r2, pc, #4	; (adr r2, 8007698 <UART_SetConfig+0x37c>)
 8007694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007698:	0800773d 	.word	0x0800773d
 800769c:	0800776d 	.word	0x0800776d
 80076a0:	0800776d 	.word	0x0800776d
 80076a4:	0800776d 	.word	0x0800776d
 80076a8:	0800776d 	.word	0x0800776d
 80076ac:	0800776d 	.word	0x0800776d
 80076b0:	0800776d 	.word	0x0800776d
 80076b4:	0800776d 	.word	0x0800776d
 80076b8:	08007745 	.word	0x08007745
 80076bc:	0800776d 	.word	0x0800776d
 80076c0:	0800776d 	.word	0x0800776d
 80076c4:	0800776d 	.word	0x0800776d
 80076c8:	0800776d 	.word	0x0800776d
 80076cc:	0800776d 	.word	0x0800776d
 80076d0:	0800776d 	.word	0x0800776d
 80076d4:	0800776d 	.word	0x0800776d
 80076d8:	0800774d 	.word	0x0800774d
 80076dc:	0800776d 	.word	0x0800776d
 80076e0:	0800776d 	.word	0x0800776d
 80076e4:	0800776d 	.word	0x0800776d
 80076e8:	0800776d 	.word	0x0800776d
 80076ec:	0800776d 	.word	0x0800776d
 80076f0:	0800776d 	.word	0x0800776d
 80076f4:	0800776d 	.word	0x0800776d
 80076f8:	08007755 	.word	0x08007755
 80076fc:	0800776d 	.word	0x0800776d
 8007700:	0800776d 	.word	0x0800776d
 8007704:	0800776d 	.word	0x0800776d
 8007708:	0800776d 	.word	0x0800776d
 800770c:	0800776d 	.word	0x0800776d
 8007710:	0800776d 	.word	0x0800776d
 8007714:	0800776d 	.word	0x0800776d
 8007718:	0800775d 	.word	0x0800775d
 800771c:	0800776d 	.word	0x0800776d
 8007720:	0800776d 	.word	0x0800776d
 8007724:	0800776d 	.word	0x0800776d
 8007728:	0800776d 	.word	0x0800776d
 800772c:	0800776d 	.word	0x0800776d
 8007730:	0800776d 	.word	0x0800776d
 8007734:	0800776d 	.word	0x0800776d
 8007738:	08007765 	.word	0x08007765
 800773c:	2301      	movs	r3, #1
 800773e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007742:	e0bc      	b.n	80078be <UART_SetConfig+0x5a2>
 8007744:	2304      	movs	r3, #4
 8007746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800774a:	e0b8      	b.n	80078be <UART_SetConfig+0x5a2>
 800774c:	2308      	movs	r3, #8
 800774e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007752:	e0b4      	b.n	80078be <UART_SetConfig+0x5a2>
 8007754:	2310      	movs	r3, #16
 8007756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800775a:	e0b0      	b.n	80078be <UART_SetConfig+0x5a2>
 800775c:	2320      	movs	r3, #32
 800775e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007762:	e0ac      	b.n	80078be <UART_SetConfig+0x5a2>
 8007764:	2340      	movs	r3, #64	; 0x40
 8007766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800776a:	e0a8      	b.n	80078be <UART_SetConfig+0x5a2>
 800776c:	2380      	movs	r3, #128	; 0x80
 800776e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007772:	e0a4      	b.n	80078be <UART_SetConfig+0x5a2>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a90      	ldr	r2, [pc, #576]	; (80079bc <UART_SetConfig+0x6a0>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d130      	bne.n	80077e0 <UART_SetConfig+0x4c4>
 800777e:	4b8e      	ldr	r3, [pc, #568]	; (80079b8 <UART_SetConfig+0x69c>)
 8007780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007782:	f003 0307 	and.w	r3, r3, #7
 8007786:	2b05      	cmp	r3, #5
 8007788:	d826      	bhi.n	80077d8 <UART_SetConfig+0x4bc>
 800778a:	a201      	add	r2, pc, #4	; (adr r2, 8007790 <UART_SetConfig+0x474>)
 800778c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007790:	080077a9 	.word	0x080077a9
 8007794:	080077b1 	.word	0x080077b1
 8007798:	080077b9 	.word	0x080077b9
 800779c:	080077c1 	.word	0x080077c1
 80077a0:	080077c9 	.word	0x080077c9
 80077a4:	080077d1 	.word	0x080077d1
 80077a8:	2300      	movs	r3, #0
 80077aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077ae:	e086      	b.n	80078be <UART_SetConfig+0x5a2>
 80077b0:	2304      	movs	r3, #4
 80077b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077b6:	e082      	b.n	80078be <UART_SetConfig+0x5a2>
 80077b8:	2308      	movs	r3, #8
 80077ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077be:	e07e      	b.n	80078be <UART_SetConfig+0x5a2>
 80077c0:	2310      	movs	r3, #16
 80077c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077c6:	e07a      	b.n	80078be <UART_SetConfig+0x5a2>
 80077c8:	2320      	movs	r3, #32
 80077ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077ce:	e076      	b.n	80078be <UART_SetConfig+0x5a2>
 80077d0:	2340      	movs	r3, #64	; 0x40
 80077d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077d6:	e072      	b.n	80078be <UART_SetConfig+0x5a2>
 80077d8:	2380      	movs	r3, #128	; 0x80
 80077da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077de:	e06e      	b.n	80078be <UART_SetConfig+0x5a2>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a76      	ldr	r2, [pc, #472]	; (80079c0 <UART_SetConfig+0x6a4>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d130      	bne.n	800784c <UART_SetConfig+0x530>
 80077ea:	4b73      	ldr	r3, [pc, #460]	; (80079b8 <UART_SetConfig+0x69c>)
 80077ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ee:	f003 0307 	and.w	r3, r3, #7
 80077f2:	2b05      	cmp	r3, #5
 80077f4:	d826      	bhi.n	8007844 <UART_SetConfig+0x528>
 80077f6:	a201      	add	r2, pc, #4	; (adr r2, 80077fc <UART_SetConfig+0x4e0>)
 80077f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077fc:	08007815 	.word	0x08007815
 8007800:	0800781d 	.word	0x0800781d
 8007804:	08007825 	.word	0x08007825
 8007808:	0800782d 	.word	0x0800782d
 800780c:	08007835 	.word	0x08007835
 8007810:	0800783d 	.word	0x0800783d
 8007814:	2300      	movs	r3, #0
 8007816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800781a:	e050      	b.n	80078be <UART_SetConfig+0x5a2>
 800781c:	2304      	movs	r3, #4
 800781e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007822:	e04c      	b.n	80078be <UART_SetConfig+0x5a2>
 8007824:	2308      	movs	r3, #8
 8007826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800782a:	e048      	b.n	80078be <UART_SetConfig+0x5a2>
 800782c:	2310      	movs	r3, #16
 800782e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007832:	e044      	b.n	80078be <UART_SetConfig+0x5a2>
 8007834:	2320      	movs	r3, #32
 8007836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800783a:	e040      	b.n	80078be <UART_SetConfig+0x5a2>
 800783c:	2340      	movs	r3, #64	; 0x40
 800783e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007842:	e03c      	b.n	80078be <UART_SetConfig+0x5a2>
 8007844:	2380      	movs	r3, #128	; 0x80
 8007846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800784a:	e038      	b.n	80078be <UART_SetConfig+0x5a2>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a5c      	ldr	r2, [pc, #368]	; (80079c4 <UART_SetConfig+0x6a8>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d130      	bne.n	80078b8 <UART_SetConfig+0x59c>
 8007856:	4b58      	ldr	r3, [pc, #352]	; (80079b8 <UART_SetConfig+0x69c>)
 8007858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800785a:	f003 0307 	and.w	r3, r3, #7
 800785e:	2b05      	cmp	r3, #5
 8007860:	d826      	bhi.n	80078b0 <UART_SetConfig+0x594>
 8007862:	a201      	add	r2, pc, #4	; (adr r2, 8007868 <UART_SetConfig+0x54c>)
 8007864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007868:	08007881 	.word	0x08007881
 800786c:	08007889 	.word	0x08007889
 8007870:	08007891 	.word	0x08007891
 8007874:	08007899 	.word	0x08007899
 8007878:	080078a1 	.word	0x080078a1
 800787c:	080078a9 	.word	0x080078a9
 8007880:	2302      	movs	r3, #2
 8007882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007886:	e01a      	b.n	80078be <UART_SetConfig+0x5a2>
 8007888:	2304      	movs	r3, #4
 800788a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800788e:	e016      	b.n	80078be <UART_SetConfig+0x5a2>
 8007890:	2308      	movs	r3, #8
 8007892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007896:	e012      	b.n	80078be <UART_SetConfig+0x5a2>
 8007898:	2310      	movs	r3, #16
 800789a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800789e:	e00e      	b.n	80078be <UART_SetConfig+0x5a2>
 80078a0:	2320      	movs	r3, #32
 80078a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078a6:	e00a      	b.n	80078be <UART_SetConfig+0x5a2>
 80078a8:	2340      	movs	r3, #64	; 0x40
 80078aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078ae:	e006      	b.n	80078be <UART_SetConfig+0x5a2>
 80078b0:	2380      	movs	r3, #128	; 0x80
 80078b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078b6:	e002      	b.n	80078be <UART_SetConfig+0x5a2>
 80078b8:	2380      	movs	r3, #128	; 0x80
 80078ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a40      	ldr	r2, [pc, #256]	; (80079c4 <UART_SetConfig+0x6a8>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	f040 80ef 	bne.w	8007aa8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80078ce:	2b20      	cmp	r3, #32
 80078d0:	dc46      	bgt.n	8007960 <UART_SetConfig+0x644>
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	f2c0 8081 	blt.w	80079da <UART_SetConfig+0x6be>
 80078d8:	3b02      	subs	r3, #2
 80078da:	2b1e      	cmp	r3, #30
 80078dc:	d87d      	bhi.n	80079da <UART_SetConfig+0x6be>
 80078de:	a201      	add	r2, pc, #4	; (adr r2, 80078e4 <UART_SetConfig+0x5c8>)
 80078e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e4:	08007967 	.word	0x08007967
 80078e8:	080079db 	.word	0x080079db
 80078ec:	0800796f 	.word	0x0800796f
 80078f0:	080079db 	.word	0x080079db
 80078f4:	080079db 	.word	0x080079db
 80078f8:	080079db 	.word	0x080079db
 80078fc:	0800797f 	.word	0x0800797f
 8007900:	080079db 	.word	0x080079db
 8007904:	080079db 	.word	0x080079db
 8007908:	080079db 	.word	0x080079db
 800790c:	080079db 	.word	0x080079db
 8007910:	080079db 	.word	0x080079db
 8007914:	080079db 	.word	0x080079db
 8007918:	080079db 	.word	0x080079db
 800791c:	0800798f 	.word	0x0800798f
 8007920:	080079db 	.word	0x080079db
 8007924:	080079db 	.word	0x080079db
 8007928:	080079db 	.word	0x080079db
 800792c:	080079db 	.word	0x080079db
 8007930:	080079db 	.word	0x080079db
 8007934:	080079db 	.word	0x080079db
 8007938:	080079db 	.word	0x080079db
 800793c:	080079db 	.word	0x080079db
 8007940:	080079db 	.word	0x080079db
 8007944:	080079db 	.word	0x080079db
 8007948:	080079db 	.word	0x080079db
 800794c:	080079db 	.word	0x080079db
 8007950:	080079db 	.word	0x080079db
 8007954:	080079db 	.word	0x080079db
 8007958:	080079db 	.word	0x080079db
 800795c:	080079cd 	.word	0x080079cd
 8007960:	2b40      	cmp	r3, #64	; 0x40
 8007962:	d036      	beq.n	80079d2 <UART_SetConfig+0x6b6>
 8007964:	e039      	b.n	80079da <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007966:	f7fd fa2b 	bl	8004dc0 <HAL_RCCEx_GetD3PCLK1Freq>
 800796a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800796c:	e03b      	b.n	80079e6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800796e:	f107 0314 	add.w	r3, r7, #20
 8007972:	4618      	mov	r0, r3
 8007974:	f7fd fa3a 	bl	8004dec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800797c:	e033      	b.n	80079e6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800797e:	f107 0308 	add.w	r3, r7, #8
 8007982:	4618      	mov	r0, r3
 8007984:	f7fd fb86 	bl	8005094 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800798c:	e02b      	b.n	80079e6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800798e:	4b0a      	ldr	r3, [pc, #40]	; (80079b8 <UART_SetConfig+0x69c>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 0320 	and.w	r3, r3, #32
 8007996:	2b00      	cmp	r3, #0
 8007998:	d009      	beq.n	80079ae <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800799a:	4b07      	ldr	r3, [pc, #28]	; (80079b8 <UART_SetConfig+0x69c>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	08db      	lsrs	r3, r3, #3
 80079a0:	f003 0303 	and.w	r3, r3, #3
 80079a4:	4a08      	ldr	r2, [pc, #32]	; (80079c8 <UART_SetConfig+0x6ac>)
 80079a6:	fa22 f303 	lsr.w	r3, r2, r3
 80079aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80079ac:	e01b      	b.n	80079e6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80079ae:	4b06      	ldr	r3, [pc, #24]	; (80079c8 <UART_SetConfig+0x6ac>)
 80079b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079b2:	e018      	b.n	80079e6 <UART_SetConfig+0x6ca>
 80079b4:	40011400 	.word	0x40011400
 80079b8:	58024400 	.word	0x58024400
 80079bc:	40007800 	.word	0x40007800
 80079c0:	40007c00 	.word	0x40007c00
 80079c4:	58000c00 	.word	0x58000c00
 80079c8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80079cc:	4bc4      	ldr	r3, [pc, #784]	; (8007ce0 <UART_SetConfig+0x9c4>)
 80079ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079d0:	e009      	b.n	80079e6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079d8:	e005      	b.n	80079e6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80079da:	2300      	movs	r3, #0
 80079dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80079e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80079e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f000 81da 	beq.w	8007da2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f2:	4abc      	ldr	r2, [pc, #752]	; (8007ce4 <UART_SetConfig+0x9c8>)
 80079f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079f8:	461a      	mov	r2, r3
 80079fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a00:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	685a      	ldr	r2, [r3, #4]
 8007a06:	4613      	mov	r3, r2
 8007a08:	005b      	lsls	r3, r3, #1
 8007a0a:	4413      	add	r3, r2
 8007a0c:	6a3a      	ldr	r2, [r7, #32]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d305      	bcc.n	8007a1e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a18:	6a3a      	ldr	r2, [r7, #32]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d903      	bls.n	8007a26 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007a24:	e1bd      	b.n	8007da2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f04f 0100 	mov.w	r1, #0
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a32:	4aac      	ldr	r2, [pc, #688]	; (8007ce4 <UART_SetConfig+0x9c8>)
 8007a34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	f04f 0300 	mov.w	r3, #0
 8007a3e:	f7f8 fc9f 	bl	8000380 <__aeabi_uldivmod>
 8007a42:	4602      	mov	r2, r0
 8007a44:	460b      	mov	r3, r1
 8007a46:	4610      	mov	r0, r2
 8007a48:	4619      	mov	r1, r3
 8007a4a:	f04f 0200 	mov.w	r2, #0
 8007a4e:	f04f 0300 	mov.w	r3, #0
 8007a52:	020b      	lsls	r3, r1, #8
 8007a54:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007a58:	0202      	lsls	r2, r0, #8
 8007a5a:	6879      	ldr	r1, [r7, #4]
 8007a5c:	6849      	ldr	r1, [r1, #4]
 8007a5e:	0849      	lsrs	r1, r1, #1
 8007a60:	4608      	mov	r0, r1
 8007a62:	f04f 0100 	mov.w	r1, #0
 8007a66:	1814      	adds	r4, r2, r0
 8007a68:	eb43 0501 	adc.w	r5, r3, r1
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	461a      	mov	r2, r3
 8007a72:	f04f 0300 	mov.w	r3, #0
 8007a76:	4620      	mov	r0, r4
 8007a78:	4629      	mov	r1, r5
 8007a7a:	f7f8 fc81 	bl	8000380 <__aeabi_uldivmod>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	460b      	mov	r3, r1
 8007a82:	4613      	mov	r3, r2
 8007a84:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a8c:	d308      	bcc.n	8007aa0 <UART_SetConfig+0x784>
 8007a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a94:	d204      	bcs.n	8007aa0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a9c:	60da      	str	r2, [r3, #12]
 8007a9e:	e180      	b.n	8007da2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007aa6:	e17c      	b.n	8007da2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	69db      	ldr	r3, [r3, #28]
 8007aac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ab0:	f040 80be 	bne.w	8007c30 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8007ab4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007ab8:	2b20      	cmp	r3, #32
 8007aba:	dc49      	bgt.n	8007b50 <UART_SetConfig+0x834>
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	db7c      	blt.n	8007bba <UART_SetConfig+0x89e>
 8007ac0:	2b20      	cmp	r3, #32
 8007ac2:	d87a      	bhi.n	8007bba <UART_SetConfig+0x89e>
 8007ac4:	a201      	add	r2, pc, #4	; (adr r2, 8007acc <UART_SetConfig+0x7b0>)
 8007ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aca:	bf00      	nop
 8007acc:	08007b57 	.word	0x08007b57
 8007ad0:	08007b5f 	.word	0x08007b5f
 8007ad4:	08007bbb 	.word	0x08007bbb
 8007ad8:	08007bbb 	.word	0x08007bbb
 8007adc:	08007b67 	.word	0x08007b67
 8007ae0:	08007bbb 	.word	0x08007bbb
 8007ae4:	08007bbb 	.word	0x08007bbb
 8007ae8:	08007bbb 	.word	0x08007bbb
 8007aec:	08007b77 	.word	0x08007b77
 8007af0:	08007bbb 	.word	0x08007bbb
 8007af4:	08007bbb 	.word	0x08007bbb
 8007af8:	08007bbb 	.word	0x08007bbb
 8007afc:	08007bbb 	.word	0x08007bbb
 8007b00:	08007bbb 	.word	0x08007bbb
 8007b04:	08007bbb 	.word	0x08007bbb
 8007b08:	08007bbb 	.word	0x08007bbb
 8007b0c:	08007b87 	.word	0x08007b87
 8007b10:	08007bbb 	.word	0x08007bbb
 8007b14:	08007bbb 	.word	0x08007bbb
 8007b18:	08007bbb 	.word	0x08007bbb
 8007b1c:	08007bbb 	.word	0x08007bbb
 8007b20:	08007bbb 	.word	0x08007bbb
 8007b24:	08007bbb 	.word	0x08007bbb
 8007b28:	08007bbb 	.word	0x08007bbb
 8007b2c:	08007bbb 	.word	0x08007bbb
 8007b30:	08007bbb 	.word	0x08007bbb
 8007b34:	08007bbb 	.word	0x08007bbb
 8007b38:	08007bbb 	.word	0x08007bbb
 8007b3c:	08007bbb 	.word	0x08007bbb
 8007b40:	08007bbb 	.word	0x08007bbb
 8007b44:	08007bbb 	.word	0x08007bbb
 8007b48:	08007bbb 	.word	0x08007bbb
 8007b4c:	08007bad 	.word	0x08007bad
 8007b50:	2b40      	cmp	r3, #64	; 0x40
 8007b52:	d02e      	beq.n	8007bb2 <UART_SetConfig+0x896>
 8007b54:	e031      	b.n	8007bba <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b56:	f7fb fcf5 	bl	8003544 <HAL_RCC_GetPCLK1Freq>
 8007b5a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007b5c:	e033      	b.n	8007bc6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b5e:	f7fb fd07 	bl	8003570 <HAL_RCC_GetPCLK2Freq>
 8007b62:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007b64:	e02f      	b.n	8007bc6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b66:	f107 0314 	add.w	r3, r7, #20
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7fd f93e 	bl	8004dec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b74:	e027      	b.n	8007bc6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b76:	f107 0308 	add.w	r3, r7, #8
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7fd fa8a 	bl	8005094 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b84:	e01f      	b.n	8007bc6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b86:	4b58      	ldr	r3, [pc, #352]	; (8007ce8 <UART_SetConfig+0x9cc>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 0320 	and.w	r3, r3, #32
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d009      	beq.n	8007ba6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b92:	4b55      	ldr	r3, [pc, #340]	; (8007ce8 <UART_SetConfig+0x9cc>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	08db      	lsrs	r3, r3, #3
 8007b98:	f003 0303 	and.w	r3, r3, #3
 8007b9c:	4a53      	ldr	r2, [pc, #332]	; (8007cec <UART_SetConfig+0x9d0>)
 8007b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8007ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ba4:	e00f      	b.n	8007bc6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8007ba6:	4b51      	ldr	r3, [pc, #324]	; (8007cec <UART_SetConfig+0x9d0>)
 8007ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007baa:	e00c      	b.n	8007bc6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007bac:	4b4c      	ldr	r3, [pc, #304]	; (8007ce0 <UART_SetConfig+0x9c4>)
 8007bae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007bb0:	e009      	b.n	8007bc6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007bb8:	e005      	b.n	8007bc6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007bc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f000 80ea 	beq.w	8007da2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd2:	4a44      	ldr	r2, [pc, #272]	; (8007ce4 <UART_SetConfig+0x9c8>)
 8007bd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bd8:	461a      	mov	r2, r3
 8007bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007be0:	005a      	lsls	r2, r3, #1
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	085b      	lsrs	r3, r3, #1
 8007be8:	441a      	add	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bf2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf6:	2b0f      	cmp	r3, #15
 8007bf8:	d916      	bls.n	8007c28 <UART_SetConfig+0x90c>
 8007bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c00:	d212      	bcs.n	8007c28 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	f023 030f 	bic.w	r3, r3, #15
 8007c0a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c0e:	085b      	lsrs	r3, r3, #1
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	f003 0307 	and.w	r3, r3, #7
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007c24:	60da      	str	r2, [r3, #12]
 8007c26:	e0bc      	b.n	8007da2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007c2e:	e0b8      	b.n	8007da2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007c34:	2b20      	cmp	r3, #32
 8007c36:	dc4b      	bgt.n	8007cd0 <UART_SetConfig+0x9b4>
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f2c0 8087 	blt.w	8007d4c <UART_SetConfig+0xa30>
 8007c3e:	2b20      	cmp	r3, #32
 8007c40:	f200 8084 	bhi.w	8007d4c <UART_SetConfig+0xa30>
 8007c44:	a201      	add	r2, pc, #4	; (adr r2, 8007c4c <UART_SetConfig+0x930>)
 8007c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c4a:	bf00      	nop
 8007c4c:	08007cd7 	.word	0x08007cd7
 8007c50:	08007cf1 	.word	0x08007cf1
 8007c54:	08007d4d 	.word	0x08007d4d
 8007c58:	08007d4d 	.word	0x08007d4d
 8007c5c:	08007cf9 	.word	0x08007cf9
 8007c60:	08007d4d 	.word	0x08007d4d
 8007c64:	08007d4d 	.word	0x08007d4d
 8007c68:	08007d4d 	.word	0x08007d4d
 8007c6c:	08007d09 	.word	0x08007d09
 8007c70:	08007d4d 	.word	0x08007d4d
 8007c74:	08007d4d 	.word	0x08007d4d
 8007c78:	08007d4d 	.word	0x08007d4d
 8007c7c:	08007d4d 	.word	0x08007d4d
 8007c80:	08007d4d 	.word	0x08007d4d
 8007c84:	08007d4d 	.word	0x08007d4d
 8007c88:	08007d4d 	.word	0x08007d4d
 8007c8c:	08007d19 	.word	0x08007d19
 8007c90:	08007d4d 	.word	0x08007d4d
 8007c94:	08007d4d 	.word	0x08007d4d
 8007c98:	08007d4d 	.word	0x08007d4d
 8007c9c:	08007d4d 	.word	0x08007d4d
 8007ca0:	08007d4d 	.word	0x08007d4d
 8007ca4:	08007d4d 	.word	0x08007d4d
 8007ca8:	08007d4d 	.word	0x08007d4d
 8007cac:	08007d4d 	.word	0x08007d4d
 8007cb0:	08007d4d 	.word	0x08007d4d
 8007cb4:	08007d4d 	.word	0x08007d4d
 8007cb8:	08007d4d 	.word	0x08007d4d
 8007cbc:	08007d4d 	.word	0x08007d4d
 8007cc0:	08007d4d 	.word	0x08007d4d
 8007cc4:	08007d4d 	.word	0x08007d4d
 8007cc8:	08007d4d 	.word	0x08007d4d
 8007ccc:	08007d3f 	.word	0x08007d3f
 8007cd0:	2b40      	cmp	r3, #64	; 0x40
 8007cd2:	d037      	beq.n	8007d44 <UART_SetConfig+0xa28>
 8007cd4:	e03a      	b.n	8007d4c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cd6:	f7fb fc35 	bl	8003544 <HAL_RCC_GetPCLK1Freq>
 8007cda:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007cdc:	e03c      	b.n	8007d58 <UART_SetConfig+0xa3c>
 8007cde:	bf00      	nop
 8007ce0:	003d0900 	.word	0x003d0900
 8007ce4:	0800a424 	.word	0x0800a424
 8007ce8:	58024400 	.word	0x58024400
 8007cec:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cf0:	f7fb fc3e 	bl	8003570 <HAL_RCC_GetPCLK2Freq>
 8007cf4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007cf6:	e02f      	b.n	8007d58 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cf8:	f107 0314 	add.w	r3, r7, #20
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f7fd f875 	bl	8004dec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d06:	e027      	b.n	8007d58 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d08:	f107 0308 	add.w	r3, r7, #8
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7fd f9c1 	bl	8005094 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d16:	e01f      	b.n	8007d58 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d18:	4b2c      	ldr	r3, [pc, #176]	; (8007dcc <UART_SetConfig+0xab0>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 0320 	and.w	r3, r3, #32
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d009      	beq.n	8007d38 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007d24:	4b29      	ldr	r3, [pc, #164]	; (8007dcc <UART_SetConfig+0xab0>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	08db      	lsrs	r3, r3, #3
 8007d2a:	f003 0303 	and.w	r3, r3, #3
 8007d2e:	4a28      	ldr	r2, [pc, #160]	; (8007dd0 <UART_SetConfig+0xab4>)
 8007d30:	fa22 f303 	lsr.w	r3, r2, r3
 8007d34:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d36:	e00f      	b.n	8007d58 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8007d38:	4b25      	ldr	r3, [pc, #148]	; (8007dd0 <UART_SetConfig+0xab4>)
 8007d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d3c:	e00c      	b.n	8007d58 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d3e:	4b25      	ldr	r3, [pc, #148]	; (8007dd4 <UART_SetConfig+0xab8>)
 8007d40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d42:	e009      	b.n	8007d58 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d4a:	e005      	b.n	8007d58 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007d56:	bf00      	nop
    }

    if (pclk != 0U)
 8007d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d021      	beq.n	8007da2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d62:	4a1d      	ldr	r2, [pc, #116]	; (8007dd8 <UART_SetConfig+0xabc>)
 8007d64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d68:	461a      	mov	r2, r3
 8007d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	085b      	lsrs	r3, r3, #1
 8007d76:	441a      	add	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d80:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d84:	2b0f      	cmp	r3, #15
 8007d86:	d909      	bls.n	8007d9c <UART_SetConfig+0xa80>
 8007d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d8e:	d205      	bcs.n	8007d9c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d92:	b29a      	uxth	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	60da      	str	r2, [r3, #12]
 8007d9a:	e002      	b.n	8007da2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007dbe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3738      	adds	r7, #56	; 0x38
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	58024400 	.word	0x58024400
 8007dd0:	03d09000 	.word	0x03d09000
 8007dd4:	003d0900 	.word	0x003d0900
 8007dd8:	0800a424 	.word	0x0800a424

08007ddc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de8:	f003 0301 	and.w	r3, r3, #1
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00a      	beq.n	8007e06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	430a      	orrs	r2, r1
 8007e04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0a:	f003 0302 	and.w	r3, r3, #2
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00a      	beq.n	8007e28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	430a      	orrs	r2, r1
 8007e26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e2c:	f003 0304 	and.w	r3, r3, #4
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00a      	beq.n	8007e4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	430a      	orrs	r2, r1
 8007e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e4e:	f003 0308 	and.w	r3, r3, #8
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00a      	beq.n	8007e6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	430a      	orrs	r2, r1
 8007e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e70:	f003 0310 	and.w	r3, r3, #16
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00a      	beq.n	8007e8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e92:	f003 0320 	and.w	r3, r3, #32
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00a      	beq.n	8007eb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	430a      	orrs	r2, r1
 8007eae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d01a      	beq.n	8007ef2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007eda:	d10a      	bne.n	8007ef2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00a      	beq.n	8007f14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	430a      	orrs	r2, r1
 8007f12:	605a      	str	r2, [r3, #4]
  }
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b086      	sub	sp, #24
 8007f24:	af02      	add	r7, sp, #8
 8007f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f30:	f7f9 fad6 	bl	80014e0 <HAL_GetTick>
 8007f34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0308 	and.w	r3, r3, #8
 8007f40:	2b08      	cmp	r3, #8
 8007f42:	d10e      	bne.n	8007f62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f82f 	bl	8007fb6 <UART_WaitOnFlagUntilTimeout>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d001      	beq.n	8007f62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e025      	b.n	8007fae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0304 	and.w	r3, r3, #4
 8007f6c:	2b04      	cmp	r3, #4
 8007f6e:	d10e      	bne.n	8007f8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f819 	bl	8007fb6 <UART_WaitOnFlagUntilTimeout>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d001      	beq.n	8007f8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	e00f      	b.n	8007fae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2220      	movs	r2, #32
 8007f92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2220      	movs	r2, #32
 8007f9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b09c      	sub	sp, #112	; 0x70
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	60f8      	str	r0, [r7, #12]
 8007fbe:	60b9      	str	r1, [r7, #8]
 8007fc0:	603b      	str	r3, [r7, #0]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fc6:	e0a9      	b.n	800811c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fce:	f000 80a5 	beq.w	800811c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fd2:	f7f9 fa85 	bl	80014e0 <HAL_GetTick>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	1ad3      	subs	r3, r2, r3
 8007fdc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d302      	bcc.n	8007fe8 <UART_WaitOnFlagUntilTimeout+0x32>
 8007fe2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d140      	bne.n	800806a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ff0:	e853 3f00 	ldrex	r3, [r3]
 8007ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ff8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ffc:	667b      	str	r3, [r7, #100]	; 0x64
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	461a      	mov	r2, r3
 8008004:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008006:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008008:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800800c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800800e:	e841 2300 	strex	r3, r2, [r1]
 8008012:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008016:	2b00      	cmp	r3, #0
 8008018:	d1e6      	bne.n	8007fe8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	3308      	adds	r3, #8
 8008020:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008024:	e853 3f00 	ldrex	r3, [r3]
 8008028:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800802a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802c:	f023 0301 	bic.w	r3, r3, #1
 8008030:	663b      	str	r3, [r7, #96]	; 0x60
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	3308      	adds	r3, #8
 8008038:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800803a:	64ba      	str	r2, [r7, #72]	; 0x48
 800803c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008040:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008042:	e841 2300 	strex	r3, r2, [r1]
 8008046:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1e5      	bne.n	800801a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2220      	movs	r2, #32
 8008052:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2220      	movs	r2, #32
 800805a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008066:	2303      	movs	r3, #3
 8008068:	e069      	b.n	800813e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 0304 	and.w	r3, r3, #4
 8008074:	2b00      	cmp	r3, #0
 8008076:	d051      	beq.n	800811c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	69db      	ldr	r3, [r3, #28]
 800807e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008082:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008086:	d149      	bne.n	800811c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008090:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809a:	e853 3f00 	ldrex	r3, [r3]
 800809e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80080a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	461a      	mov	r2, r3
 80080ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080b0:	637b      	str	r3, [r7, #52]	; 0x34
 80080b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080b8:	e841 2300 	strex	r3, r2, [r1]
 80080bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80080be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1e6      	bne.n	8008092 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	3308      	adds	r3, #8
 80080ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	e853 3f00 	ldrex	r3, [r3]
 80080d2:	613b      	str	r3, [r7, #16]
   return(result);
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	f023 0301 	bic.w	r3, r3, #1
 80080da:	66bb      	str	r3, [r7, #104]	; 0x68
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	3308      	adds	r3, #8
 80080e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80080e4:	623a      	str	r2, [r7, #32]
 80080e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e8:	69f9      	ldr	r1, [r7, #28]
 80080ea:	6a3a      	ldr	r2, [r7, #32]
 80080ec:	e841 2300 	strex	r3, r2, [r1]
 80080f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1e5      	bne.n	80080c4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2220      	movs	r2, #32
 80080fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2220      	movs	r2, #32
 8008104:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2220      	movs	r2, #32
 800810c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2200      	movs	r2, #0
 8008114:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008118:	2303      	movs	r3, #3
 800811a:	e010      	b.n	800813e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	69da      	ldr	r2, [r3, #28]
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	4013      	ands	r3, r2
 8008126:	68ba      	ldr	r2, [r7, #8]
 8008128:	429a      	cmp	r2, r3
 800812a:	bf0c      	ite	eq
 800812c:	2301      	moveq	r3, #1
 800812e:	2300      	movne	r3, #0
 8008130:	b2db      	uxtb	r3, r3
 8008132:	461a      	mov	r2, r3
 8008134:	79fb      	ldrb	r3, [r7, #7]
 8008136:	429a      	cmp	r2, r3
 8008138:	f43f af46 	beq.w	8007fc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3770      	adds	r7, #112	; 0x70
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008146:	b480      	push	{r7}
 8008148:	b085      	sub	sp, #20
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008154:	2b01      	cmp	r3, #1
 8008156:	d101      	bne.n	800815c <HAL_UARTEx_DisableFifoMode+0x16>
 8008158:	2302      	movs	r3, #2
 800815a:	e027      	b.n	80081ac <HAL_UARTEx_DisableFifoMode+0x66>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2224      	movs	r2, #36	; 0x24
 8008168:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f022 0201 	bic.w	r2, r2, #1
 8008182:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800818a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2220      	movs	r2, #32
 800819e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3714      	adds	r7, #20
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d101      	bne.n	80081d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80081cc:	2302      	movs	r3, #2
 80081ce:	e02d      	b.n	800822c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2224      	movs	r2, #36	; 0x24
 80081dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f022 0201 	bic.w	r2, r2, #1
 80081f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	683a      	ldr	r2, [r7, #0]
 8008208:	430a      	orrs	r2, r1
 800820a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 f84f 	bl	80082b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2220      	movs	r2, #32
 800821e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	4618      	mov	r0, r3
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008244:	2b01      	cmp	r3, #1
 8008246:	d101      	bne.n	800824c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008248:	2302      	movs	r3, #2
 800824a:	e02d      	b.n	80082a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2224      	movs	r2, #36	; 0x24
 8008258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f022 0201 	bic.w	r2, r2, #1
 8008272:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	430a      	orrs	r2, r1
 8008286:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f811 	bl	80082b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2220      	movs	r2, #32
 800829a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80082a6:	2300      	movs	r3, #0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b085      	sub	sp, #20
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d108      	bne.n	80082d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80082d0:	e031      	b.n	8008336 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80082d2:	2310      	movs	r3, #16
 80082d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80082d6:	2310      	movs	r3, #16
 80082d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	0e5b      	lsrs	r3, r3, #25
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	f003 0307 	and.w	r3, r3, #7
 80082e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	0f5b      	lsrs	r3, r3, #29
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	f003 0307 	and.w	r3, r3, #7
 80082f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082fa:	7bbb      	ldrb	r3, [r7, #14]
 80082fc:	7b3a      	ldrb	r2, [r7, #12]
 80082fe:	4911      	ldr	r1, [pc, #68]	; (8008344 <UARTEx_SetNbDataToProcess+0x94>)
 8008300:	5c8a      	ldrb	r2, [r1, r2]
 8008302:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008306:	7b3a      	ldrb	r2, [r7, #12]
 8008308:	490f      	ldr	r1, [pc, #60]	; (8008348 <UARTEx_SetNbDataToProcess+0x98>)
 800830a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800830c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008310:	b29a      	uxth	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008318:	7bfb      	ldrb	r3, [r7, #15]
 800831a:	7b7a      	ldrb	r2, [r7, #13]
 800831c:	4909      	ldr	r1, [pc, #36]	; (8008344 <UARTEx_SetNbDataToProcess+0x94>)
 800831e:	5c8a      	ldrb	r2, [r1, r2]
 8008320:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008324:	7b7a      	ldrb	r2, [r7, #13]
 8008326:	4908      	ldr	r1, [pc, #32]	; (8008348 <UARTEx_SetNbDataToProcess+0x98>)
 8008328:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800832a:	fb93 f3f2 	sdiv	r3, r3, r2
 800832e:	b29a      	uxth	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008336:	bf00      	nop
 8008338:	3714      	adds	r7, #20
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	0800a43c 	.word	0x0800a43c
 8008348:	0800a444 	.word	0x0800a444

0800834c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800834c:	b084      	sub	sp, #16
 800834e:	b480      	push	{r7}
 8008350:	b085      	sub	sp, #20
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
 8008356:	f107 001c 	add.w	r0, r7, #28
 800835a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800835e:	2300      	movs	r3, #0
 8008360:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8008362:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8008364:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8008366:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8008368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800836a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800836c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800836e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8008372:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	4313      	orrs	r3, r2
 8008378:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	685a      	ldr	r2, [r3, #4]
 800837e:	4b07      	ldr	r3, [pc, #28]	; (800839c <SDMMC_Init+0x50>)
 8008380:	4013      	ands	r3, r2
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	431a      	orrs	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3714      	adds	r7, #20
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	b004      	add	sp, #16
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	ffc02c00 	.word	0xffc02c00

080083a0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	370c      	adds	r7, #12
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr

080083ba <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80083ba:	b480      	push	{r7}
 80083bc:	b083      	sub	sp, #12
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f043 0203 	orr.w	r2, r3, #3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	370c      	adds	r7, #12
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr

080083fe <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80083fe:	b480      	push	{r7}
 8008400:	b083      	sub	sp, #12
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 0303 	and.w	r3, r3, #3
}
 800840e:	4618      	mov	r0, r3
 8008410:	370c      	adds	r7, #12
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr
	...

0800841c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800841c:	b480      	push	{r7}
 800841e:	b085      	sub	sp, #20
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008426:	2300      	movs	r3, #0
 8008428:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800843a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8008440:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8008446:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	4313      	orrs	r3, r2
 800844c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68da      	ldr	r2, [r3, #12]
 8008452:	4b06      	ldr	r3, [pc, #24]	; (800846c <SDMMC_SendCommand+0x50>)
 8008454:	4013      	ands	r3, r2
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	431a      	orrs	r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3714      	adds	r7, #20
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr
 800846c:	fffee0c0 	.word	0xfffee0c0

08008470 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	691b      	ldr	r3, [r3, #16]
 800847c:	b2db      	uxtb	r3, r3
}
 800847e:	4618      	mov	r0, r3
 8008480:	370c      	adds	r7, #12
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr

0800848a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800848a:	b480      	push	{r7}
 800848c:	b085      	sub	sp, #20
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
 8008492:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	3314      	adds	r3, #20
 8008498:	461a      	mov	r2, r3
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	4413      	add	r3, r2
 800849e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3714      	adds	r7, #20
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b085      	sub	sp, #20
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80084ba:	2300      	movs	r3, #0
 80084bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	685a      	ldr	r2, [r3, #4]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80084d6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80084dc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80084e2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	431a      	orrs	r2, r3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80084fa:	2300      	movs	r3, #0

}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3714      	adds	r7, #20
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b088      	sub	sp, #32
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008516:	2310      	movs	r3, #16
 8008518:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800851a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800851e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008520:	2300      	movs	r3, #0
 8008522:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008528:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800852a:	f107 0308 	add.w	r3, r7, #8
 800852e:	4619      	mov	r1, r3
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f7ff ff73 	bl	800841c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008536:	f241 3288 	movw	r2, #5000	; 0x1388
 800853a:	2110      	movs	r1, #16
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 fa5f 	bl	8008a00 <SDMMC_GetCmdResp1>
 8008542:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008544:	69fb      	ldr	r3, [r7, #28]
}
 8008546:	4618      	mov	r0, r3
 8008548:	3720      	adds	r7, #32
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b088      	sub	sp, #32
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800855c:	2311      	movs	r3, #17
 800855e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008560:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008564:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008566:	2300      	movs	r3, #0
 8008568:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800856a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800856e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008570:	f107 0308 	add.w	r3, r7, #8
 8008574:	4619      	mov	r1, r3
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7ff ff50 	bl	800841c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800857c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008580:	2111      	movs	r1, #17
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 fa3c 	bl	8008a00 <SDMMC_GetCmdResp1>
 8008588:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800858a:	69fb      	ldr	r3, [r7, #28]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3720      	adds	r7, #32
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b088      	sub	sp, #32
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80085a2:	2312      	movs	r3, #18
 80085a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80085a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80085ac:	2300      	movs	r3, #0
 80085ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80085b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80085b6:	f107 0308 	add.w	r3, r7, #8
 80085ba:	4619      	mov	r1, r3
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f7ff ff2d 	bl	800841c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80085c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80085c6:	2112      	movs	r1, #18
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 fa19 	bl	8008a00 <SDMMC_GetCmdResp1>
 80085ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085d0:	69fb      	ldr	r3, [r7, #28]
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3720      	adds	r7, #32
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b088      	sub	sp, #32
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80085e8:	2318      	movs	r3, #24
 80085ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80085ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80085f2:	2300      	movs	r3, #0
 80085f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80085f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80085fc:	f107 0308 	add.w	r3, r7, #8
 8008600:	4619      	mov	r1, r3
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f7ff ff0a 	bl	800841c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008608:	f241 3288 	movw	r2, #5000	; 0x1388
 800860c:	2118      	movs	r1, #24
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f9f6 	bl	8008a00 <SDMMC_GetCmdResp1>
 8008614:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008616:	69fb      	ldr	r3, [r7, #28]
}
 8008618:	4618      	mov	r0, r3
 800861a:	3720      	adds	r7, #32
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b088      	sub	sp, #32
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800862e:	2319      	movs	r3, #25
 8008630:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008632:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008636:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008638:	2300      	movs	r3, #0
 800863a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800863c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008640:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008642:	f107 0308 	add.w	r3, r7, #8
 8008646:	4619      	mov	r1, r3
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f7ff fee7 	bl	800841c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800864e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008652:	2119      	movs	r1, #25
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 f9d3 	bl	8008a00 <SDMMC_GetCmdResp1>
 800865a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800865c:	69fb      	ldr	r3, [r7, #28]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3720      	adds	r7, #32
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
	...

08008668 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b088      	sub	sp, #32
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008670:	2300      	movs	r3, #0
 8008672:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008674:	230c      	movs	r3, #12
 8008676:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800867c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800867e:	2300      	movs	r3, #0
 8008680:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008686:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80086a0:	f107 0308 	add.w	r3, r7, #8
 80086a4:	4619      	mov	r1, r3
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f7ff feb8 	bl	800841c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80086ac:	4a0b      	ldr	r2, [pc, #44]	; (80086dc <SDMMC_CmdStopTransfer+0x74>)
 80086ae:	210c      	movs	r1, #12
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f9a5 	bl	8008a00 <SDMMC_GetCmdResp1>
 80086b6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086ca:	d101      	bne.n	80086d0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80086cc:	2300      	movs	r3, #0
 80086ce:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80086d0:	69fb      	ldr	r3, [r7, #28]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3720      	adds	r7, #32
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	05f5e100 	.word	0x05f5e100

080086e0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b088      	sub	sp, #32
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80086ee:	2307      	movs	r3, #7
 80086f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80086f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80086f8:	2300      	movs	r3, #0
 80086fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80086fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008700:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008702:	f107 0308 	add.w	r3, r7, #8
 8008706:	4619      	mov	r1, r3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f7ff fe87 	bl	800841c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800870e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008712:	2107      	movs	r1, #7
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 f973 	bl	8008a00 <SDMMC_GetCmdResp1>
 800871a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800871c:	69fb      	ldr	r3, [r7, #28]
}
 800871e:	4618      	mov	r0, r3
 8008720:	3720      	adds	r7, #32
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b088      	sub	sp, #32
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800872e:	2300      	movs	r3, #0
 8008730:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008732:	2300      	movs	r3, #0
 8008734:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008736:	2300      	movs	r3, #0
 8008738:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800873a:	2300      	movs	r3, #0
 800873c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800873e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008742:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008744:	f107 0308 	add.w	r3, r7, #8
 8008748:	4619      	mov	r1, r3
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f7ff fe66 	bl	800841c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 fb97 	bl	8008e84 <SDMMC_GetCmdError>
 8008756:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008758:	69fb      	ldr	r3, [r7, #28]
}
 800875a:	4618      	mov	r0, r3
 800875c:	3720      	adds	r7, #32
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b088      	sub	sp, #32
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800876a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800876e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008770:	2308      	movs	r3, #8
 8008772:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008774:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008778:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800877a:	2300      	movs	r3, #0
 800877c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800877e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008782:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008784:	f107 0308 	add.w	r3, r7, #8
 8008788:	4619      	mov	r1, r3
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f7ff fe46 	bl	800841c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 fb29 	bl	8008de8 <SDMMC_GetCmdResp7>
 8008796:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008798:	69fb      	ldr	r3, [r7, #28]
}
 800879a:	4618      	mov	r0, r3
 800879c:	3720      	adds	r7, #32
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b088      	sub	sp, #32
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
 80087aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80087b0:	2337      	movs	r3, #55	; 0x37
 80087b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80087b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80087ba:	2300      	movs	r3, #0
 80087bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80087be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80087c4:	f107 0308 	add.w	r3, r7, #8
 80087c8:	4619      	mov	r1, r3
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f7ff fe26 	bl	800841c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80087d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80087d4:	2137      	movs	r1, #55	; 0x37
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f912 	bl	8008a00 <SDMMC_GetCmdResp1>
 80087dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087de:	69fb      	ldr	r3, [r7, #28]
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3720      	adds	r7, #32
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b088      	sub	sp, #32
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80087f6:	2329      	movs	r3, #41	; 0x29
 80087f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80087fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008800:	2300      	movs	r3, #0
 8008802:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008808:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800880a:	f107 0308 	add.w	r3, r7, #8
 800880e:	4619      	mov	r1, r3
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f7ff fe03 	bl	800841c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fa2e 	bl	8008c78 <SDMMC_GetCmdResp3>
 800881c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800881e:	69fb      	ldr	r3, [r7, #28]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3720      	adds	r7, #32
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b088      	sub	sp, #32
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008836:	2306      	movs	r3, #6
 8008838:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800883a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800883e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008840:	2300      	movs	r3, #0
 8008842:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008848:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800884a:	f107 0308 	add.w	r3, r7, #8
 800884e:	4619      	mov	r1, r3
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f7ff fde3 	bl	800841c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008856:	f241 3288 	movw	r2, #5000	; 0x1388
 800885a:	2106      	movs	r1, #6
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 f8cf 	bl	8008a00 <SDMMC_GetCmdResp1>
 8008862:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008864:	69fb      	ldr	r3, [r7, #28]
}
 8008866:	4618      	mov	r0, r3
 8008868:	3720      	adds	r7, #32
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b088      	sub	sp, #32
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008876:	2300      	movs	r3, #0
 8008878:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800887a:	2333      	movs	r3, #51	; 0x33
 800887c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800887e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008882:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008884:	2300      	movs	r3, #0
 8008886:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800888c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800888e:	f107 0308 	add.w	r3, r7, #8
 8008892:	4619      	mov	r1, r3
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f7ff fdc1 	bl	800841c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800889a:	f241 3288 	movw	r2, #5000	; 0x1388
 800889e:	2133      	movs	r1, #51	; 0x33
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 f8ad 	bl	8008a00 <SDMMC_GetCmdResp1>
 80088a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088a8:	69fb      	ldr	r3, [r7, #28]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3720      	adds	r7, #32
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b088      	sub	sp, #32
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80088ba:	2300      	movs	r3, #0
 80088bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80088be:	2302      	movs	r3, #2
 80088c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80088c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80088c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80088c8:	2300      	movs	r3, #0
 80088ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80088cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80088d2:	f107 0308 	add.w	r3, r7, #8
 80088d6:	4619      	mov	r1, r3
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f7ff fd9f 	bl	800841c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 f980 	bl	8008be4 <SDMMC_GetCmdResp2>
 80088e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088e6:	69fb      	ldr	r3, [r7, #28]
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3720      	adds	r7, #32
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b088      	sub	sp, #32
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80088fe:	2309      	movs	r3, #9
 8008900:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008902:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008906:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008908:	2300      	movs	r3, #0
 800890a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800890c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008910:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008912:	f107 0308 	add.w	r3, r7, #8
 8008916:	4619      	mov	r1, r3
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f7ff fd7f 	bl	800841c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 f960 	bl	8008be4 <SDMMC_GetCmdResp2>
 8008924:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008926:	69fb      	ldr	r3, [r7, #28]
}
 8008928:	4618      	mov	r0, r3
 800892a:	3720      	adds	r7, #32
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b088      	sub	sp, #32
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800893a:	2300      	movs	r3, #0
 800893c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800893e:	2303      	movs	r3, #3
 8008940:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008942:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008946:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008948:	2300      	movs	r3, #0
 800894a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800894c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008950:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008952:	f107 0308 	add.w	r3, r7, #8
 8008956:	4619      	mov	r1, r3
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f7ff fd5f 	bl	800841c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	2103      	movs	r1, #3
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 f9c8 	bl	8008cf8 <SDMMC_GetCmdResp6>
 8008968:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800896a:	69fb      	ldr	r3, [r7, #28]
}
 800896c:	4618      	mov	r0, r3
 800896e:	3720      	adds	r7, #32
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b088      	sub	sp, #32
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008982:	230d      	movs	r3, #13
 8008984:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008986:	f44f 7380 	mov.w	r3, #256	; 0x100
 800898a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800898c:	2300      	movs	r3, #0
 800898e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008994:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008996:	f107 0308 	add.w	r3, r7, #8
 800899a:	4619      	mov	r1, r3
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f7ff fd3d 	bl	800841c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80089a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80089a6:	210d      	movs	r1, #13
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 f829 	bl	8008a00 <SDMMC_GetCmdResp1>
 80089ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089b0:	69fb      	ldr	r3, [r7, #28]
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3720      	adds	r7, #32
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b088      	sub	sp, #32
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80089c2:	2300      	movs	r3, #0
 80089c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80089c6:	230d      	movs	r3, #13
 80089c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80089ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80089d0:	2300      	movs	r3, #0
 80089d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80089d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80089da:	f107 0308 	add.w	r3, r7, #8
 80089de:	4619      	mov	r1, r3
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f7ff fd1b 	bl	800841c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80089e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80089ea:	210d      	movs	r1, #13
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 f807 	bl	8008a00 <SDMMC_GetCmdResp1>
 80089f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089f4:	69fb      	ldr	r3, [r7, #28]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3720      	adds	r7, #32
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
	...

08008a00 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b088      	sub	sp, #32
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	460b      	mov	r3, r1
 8008a0a:	607a      	str	r2, [r7, #4]
 8008a0c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008a0e:	4b70      	ldr	r3, [pc, #448]	; (8008bd0 <SDMMC_GetCmdResp1+0x1d0>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a70      	ldr	r2, [pc, #448]	; (8008bd4 <SDMMC_GetCmdResp1+0x1d4>)
 8008a14:	fba2 2303 	umull	r2, r3, r2, r3
 8008a18:	0a5a      	lsrs	r2, r3, #9
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	fb02 f303 	mul.w	r3, r2, r3
 8008a20:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	1e5a      	subs	r2, r3, #1
 8008a26:	61fa      	str	r2, [r7, #28]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d102      	bne.n	8008a32 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008a2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a30:	e0c9      	b.n	8008bc6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a36:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8008a38:	69ba      	ldr	r2, [r7, #24]
 8008a3a:	4b67      	ldr	r3, [pc, #412]	; (8008bd8 <SDMMC_GetCmdResp1+0x1d8>)
 8008a3c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d0ef      	beq.n	8008a22 <SDMMC_GetCmdResp1+0x22>
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d1ea      	bne.n	8008a22 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a50:	f003 0304 	and.w	r3, r3, #4
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d004      	beq.n	8008a62 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2204      	movs	r2, #4
 8008a5c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008a5e:	2304      	movs	r3, #4
 8008a60:	e0b1      	b.n	8008bc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a66:	f003 0301 	and.w	r3, r3, #1
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d004      	beq.n	8008a78 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2201      	movs	r2, #1
 8008a72:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a74:	2301      	movs	r3, #1
 8008a76:	e0a6      	b.n	8008bc6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	4a58      	ldr	r2, [pc, #352]	; (8008bdc <SDMMC_GetCmdResp1+0x1dc>)
 8008a7c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008a7e:	68f8      	ldr	r0, [r7, #12]
 8008a80:	f7ff fcf6 	bl	8008470 <SDMMC_GetCommandResponse>
 8008a84:	4603      	mov	r3, r0
 8008a86:	461a      	mov	r2, r3
 8008a88:	7afb      	ldrb	r3, [r7, #11]
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d001      	beq.n	8008a92 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e099      	b.n	8008bc6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008a92:	2100      	movs	r1, #0
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f7ff fcf8 	bl	800848a <SDMMC_GetResponse>
 8008a9a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008a9c:	697a      	ldr	r2, [r7, #20]
 8008a9e:	4b50      	ldr	r3, [pc, #320]	; (8008be0 <SDMMC_GetCmdResp1+0x1e0>)
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d101      	bne.n	8008aaa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	e08d      	b.n	8008bc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	da02      	bge.n	8008ab6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008ab0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008ab4:	e087      	b.n	8008bc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d001      	beq.n	8008ac4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008ac0:	2340      	movs	r3, #64	; 0x40
 8008ac2:	e080      	b.n	8008bc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d001      	beq.n	8008ad2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008ace:	2380      	movs	r3, #128	; 0x80
 8008ad0:	e079      	b.n	8008bc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d002      	beq.n	8008ae2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008adc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ae0:	e071      	b.n	8008bc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d002      	beq.n	8008af2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008aec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008af0:	e069      	b.n	8008bc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d002      	beq.n	8008b02 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b00:	e061      	b.n	8008bc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d002      	beq.n	8008b12 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008b0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b10:	e059      	b.n	8008bc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d002      	beq.n	8008b22 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b20:	e051      	b.n	8008bc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d002      	beq.n	8008b32 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008b2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b30:	e049      	b.n	8008bc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d002      	beq.n	8008b42 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008b3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008b40:	e041      	b.n	8008bc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d002      	beq.n	8008b52 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008b4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b50:	e039      	b.n	8008bc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d002      	beq.n	8008b62 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008b5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008b60:	e031      	b.n	8008bc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d002      	beq.n	8008b72 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008b6c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008b70:	e029      	b.n	8008bc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d002      	beq.n	8008b82 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008b7c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008b80:	e021      	b.n	8008bc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d002      	beq.n	8008b92 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008b8c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008b90:	e019      	b.n	8008bc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d002      	beq.n	8008ba2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008b9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008ba0:	e011      	b.n	8008bc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d002      	beq.n	8008bb2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008bac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008bb0:	e009      	b.n	8008bc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	f003 0308 	and.w	r3, r3, #8
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d002      	beq.n	8008bc2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008bbc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008bc0:	e001      	b.n	8008bc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008bc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3720      	adds	r7, #32
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	24000000 	.word	0x24000000
 8008bd4:	10624dd3 	.word	0x10624dd3
 8008bd8:	00200045 	.word	0x00200045
 8008bdc:	002000c5 	.word	0x002000c5
 8008be0:	fdffe008 	.word	0xfdffe008

08008be4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008bec:	4b1f      	ldr	r3, [pc, #124]	; (8008c6c <SDMMC_GetCmdResp2+0x88>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a1f      	ldr	r2, [pc, #124]	; (8008c70 <SDMMC_GetCmdResp2+0x8c>)
 8008bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8008bf6:	0a5b      	lsrs	r3, r3, #9
 8008bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bfc:	fb02 f303 	mul.w	r3, r2, r3
 8008c00:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	1e5a      	subs	r2, r3, #1
 8008c06:	60fa      	str	r2, [r7, #12]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d102      	bne.n	8008c12 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008c0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c10:	e026      	b.n	8008c60 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c16:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d0ef      	beq.n	8008c02 <SDMMC_GetCmdResp2+0x1e>
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d1ea      	bne.n	8008c02 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c30:	f003 0304 	and.w	r3, r3, #4
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d004      	beq.n	8008c42 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2204      	movs	r2, #4
 8008c3c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c3e:	2304      	movs	r3, #4
 8008c40:	e00e      	b.n	8008c60 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c46:	f003 0301 	and.w	r3, r3, #1
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d004      	beq.n	8008c58 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2201      	movs	r2, #1
 8008c52:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e003      	b.n	8008c60 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4a06      	ldr	r2, [pc, #24]	; (8008c74 <SDMMC_GetCmdResp2+0x90>)
 8008c5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3714      	adds	r7, #20
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr
 8008c6c:	24000000 	.word	0x24000000
 8008c70:	10624dd3 	.word	0x10624dd3
 8008c74:	002000c5 	.word	0x002000c5

08008c78 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b085      	sub	sp, #20
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008c80:	4b1a      	ldr	r3, [pc, #104]	; (8008cec <SDMMC_GetCmdResp3+0x74>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a1a      	ldr	r2, [pc, #104]	; (8008cf0 <SDMMC_GetCmdResp3+0x78>)
 8008c86:	fba2 2303 	umull	r2, r3, r2, r3
 8008c8a:	0a5b      	lsrs	r3, r3, #9
 8008c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c90:	fb02 f303 	mul.w	r3, r2, r3
 8008c94:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	1e5a      	subs	r2, r3, #1
 8008c9a:	60fa      	str	r2, [r7, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d102      	bne.n	8008ca6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008ca0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ca4:	e01b      	b.n	8008cde <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008caa:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d0ef      	beq.n	8008c96 <SDMMC_GetCmdResp3+0x1e>
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1ea      	bne.n	8008c96 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cc4:	f003 0304 	and.w	r3, r3, #4
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d004      	beq.n	8008cd6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2204      	movs	r2, #4
 8008cd0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008cd2:	2304      	movs	r3, #4
 8008cd4:	e003      	b.n	8008cde <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a06      	ldr	r2, [pc, #24]	; (8008cf4 <SDMMC_GetCmdResp3+0x7c>)
 8008cda:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3714      	adds	r7, #20
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	24000000 	.word	0x24000000
 8008cf0:	10624dd3 	.word	0x10624dd3
 8008cf4:	002000c5 	.word	0x002000c5

08008cf8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b088      	sub	sp, #32
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	460b      	mov	r3, r1
 8008d02:	607a      	str	r2, [r7, #4]
 8008d04:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008d06:	4b35      	ldr	r3, [pc, #212]	; (8008ddc <SDMMC_GetCmdResp6+0xe4>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a35      	ldr	r2, [pc, #212]	; (8008de0 <SDMMC_GetCmdResp6+0xe8>)
 8008d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d10:	0a5b      	lsrs	r3, r3, #9
 8008d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d16:	fb02 f303 	mul.w	r3, r2, r3
 8008d1a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	1e5a      	subs	r2, r3, #1
 8008d20:	61fa      	str	r2, [r7, #28]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d102      	bne.n	8008d2c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008d26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d2a:	e052      	b.n	8008dd2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d30:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d0ef      	beq.n	8008d1c <SDMMC_GetCmdResp6+0x24>
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1ea      	bne.n	8008d1c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d4a:	f003 0304 	and.w	r3, r3, #4
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d004      	beq.n	8008d5c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2204      	movs	r2, #4
 8008d56:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008d58:	2304      	movs	r3, #4
 8008d5a:	e03a      	b.n	8008dd2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d60:	f003 0301 	and.w	r3, r3, #1
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d004      	beq.n	8008d72 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e02f      	b.n	8008dd2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008d72:	68f8      	ldr	r0, [r7, #12]
 8008d74:	f7ff fb7c 	bl	8008470 <SDMMC_GetCommandResponse>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	7afb      	ldrb	r3, [r7, #11]
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d001      	beq.n	8008d86 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d82:	2301      	movs	r3, #1
 8008d84:	e025      	b.n	8008dd2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	4a16      	ldr	r2, [pc, #88]	; (8008de4 <SDMMC_GetCmdResp6+0xec>)
 8008d8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008d8c:	2100      	movs	r1, #0
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f7ff fb7b 	bl	800848a <SDMMC_GetResponse>
 8008d94:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d106      	bne.n	8008dae <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	0c1b      	lsrs	r3, r3, #16
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8008daa:	2300      	movs	r3, #0
 8008dac:	e011      	b.n	8008dd2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d002      	beq.n	8008dbe <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008db8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008dbc:	e009      	b.n	8008dd2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d002      	beq.n	8008dce <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dcc:	e001      	b.n	8008dd2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008dce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3720      	adds	r7, #32
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	24000000 	.word	0x24000000
 8008de0:	10624dd3 	.word	0x10624dd3
 8008de4:	002000c5 	.word	0x002000c5

08008de8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b085      	sub	sp, #20
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008df0:	4b22      	ldr	r3, [pc, #136]	; (8008e7c <SDMMC_GetCmdResp7+0x94>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a22      	ldr	r2, [pc, #136]	; (8008e80 <SDMMC_GetCmdResp7+0x98>)
 8008df6:	fba2 2303 	umull	r2, r3, r2, r3
 8008dfa:	0a5b      	lsrs	r3, r3, #9
 8008dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e00:	fb02 f303 	mul.w	r3, r2, r3
 8008e04:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	1e5a      	subs	r2, r3, #1
 8008e0a:	60fa      	str	r2, [r7, #12]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d102      	bne.n	8008e16 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e14:	e02c      	b.n	8008e70 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e1a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d0ef      	beq.n	8008e06 <SDMMC_GetCmdResp7+0x1e>
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d1ea      	bne.n	8008e06 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e34:	f003 0304 	and.w	r3, r3, #4
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d004      	beq.n	8008e46 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2204      	movs	r2, #4
 8008e40:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008e42:	2304      	movs	r3, #4
 8008e44:	e014      	b.n	8008e70 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e4a:	f003 0301 	and.w	r3, r3, #1
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d004      	beq.n	8008e5c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2201      	movs	r2, #1
 8008e56:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e009      	b.n	8008e70 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d002      	beq.n	8008e6e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2240      	movs	r2, #64	; 0x40
 8008e6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008e6e:	2300      	movs	r3, #0

}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3714      	adds	r7, #20
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr
 8008e7c:	24000000 	.word	0x24000000
 8008e80:	10624dd3 	.word	0x10624dd3

08008e84 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b085      	sub	sp, #20
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008e8c:	4b11      	ldr	r3, [pc, #68]	; (8008ed4 <SDMMC_GetCmdError+0x50>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a11      	ldr	r2, [pc, #68]	; (8008ed8 <SDMMC_GetCmdError+0x54>)
 8008e92:	fba2 2303 	umull	r2, r3, r2, r3
 8008e96:	0a5b      	lsrs	r3, r3, #9
 8008e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e9c:	fb02 f303 	mul.w	r3, r2, r3
 8008ea0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	1e5a      	subs	r2, r3, #1
 8008ea6:	60fa      	str	r2, [r7, #12]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d102      	bne.n	8008eb2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008eac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008eb0:	e009      	b.n	8008ec6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d0f1      	beq.n	8008ea2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4a06      	ldr	r2, [pc, #24]	; (8008edc <SDMMC_GetCmdError+0x58>)
 8008ec2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3714      	adds	r7, #20
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	24000000 	.word	0x24000000
 8008ed8:	10624dd3 	.word	0x10624dd3
 8008edc:	002000c5 	.word	0x002000c5

08008ee0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ee0:	b084      	sub	sp, #16
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b084      	sub	sp, #16
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
 8008eea:	f107 001c 	add.w	r0, r7, #28
 8008eee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d120      	bne.n	8008f3a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008efc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	68da      	ldr	r2, [r3, #12]
 8008f08:	4b2a      	ldr	r3, [pc, #168]	; (8008fb4 <USB_CoreInit+0xd4>)
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d105      	bne.n	8008f2e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 faa8 	bl	8009484 <USB_CoreReset>
 8008f34:	4603      	mov	r3, r0
 8008f36:	73fb      	strb	r3, [r7, #15]
 8008f38:	e01a      	b.n	8008f70 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fa9c 	bl	8009484 <USB_CoreReset>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d106      	bne.n	8008f64 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	639a      	str	r2, [r3, #56]	; 0x38
 8008f62:	e005      	b.n	8008f70 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d116      	bne.n	8008fa4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f7a:	b29a      	uxth	r2, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008f84:	4b0c      	ldr	r3, [pc, #48]	; (8008fb8 <USB_CoreInit+0xd8>)
 8008f86:	4313      	orrs	r3, r2
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	f043 0206 	orr.w	r2, r3, #6
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	f043 0220 	orr.w	r2, r3, #32
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3710      	adds	r7, #16
 8008faa:	46bd      	mov	sp, r7
 8008fac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fb0:	b004      	add	sp, #16
 8008fb2:	4770      	bx	lr
 8008fb4:	ffbdffbf 	.word	0xffbdffbf
 8008fb8:	03ee0000 	.word	0x03ee0000

08008fbc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	f023 0201 	bic.w	r2, r3, #1
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	370c      	adds	r7, #12
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr

08008fde <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b084      	sub	sp, #16
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008fea:	2300      	movs	r3, #0
 8008fec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008ffa:	78fb      	ldrb	r3, [r7, #3]
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d115      	bne.n	800902c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800900c:	2001      	movs	r0, #1
 800900e:	f7f8 fa73 	bl	80014f8 <HAL_Delay>
      ms++;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	3301      	adds	r3, #1
 8009016:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 fa25 	bl	8009468 <USB_GetMode>
 800901e:	4603      	mov	r3, r0
 8009020:	2b01      	cmp	r3, #1
 8009022:	d01e      	beq.n	8009062 <USB_SetCurrentMode+0x84>
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2b31      	cmp	r3, #49	; 0x31
 8009028:	d9f0      	bls.n	800900c <USB_SetCurrentMode+0x2e>
 800902a:	e01a      	b.n	8009062 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800902c:	78fb      	ldrb	r3, [r7, #3]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d115      	bne.n	800905e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800903e:	2001      	movs	r0, #1
 8009040:	f7f8 fa5a 	bl	80014f8 <HAL_Delay>
      ms++;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	3301      	adds	r3, #1
 8009048:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fa0c 	bl	8009468 <USB_GetMode>
 8009050:	4603      	mov	r3, r0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d005      	beq.n	8009062 <USB_SetCurrentMode+0x84>
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2b31      	cmp	r3, #49	; 0x31
 800905a:	d9f0      	bls.n	800903e <USB_SetCurrentMode+0x60>
 800905c:	e001      	b.n	8009062 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	e005      	b.n	800906e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2b32      	cmp	r3, #50	; 0x32
 8009066:	d101      	bne.n	800906c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	e000      	b.n	800906e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3710      	adds	r7, #16
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
	...

08009078 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009078:	b084      	sub	sp, #16
 800907a:	b580      	push	{r7, lr}
 800907c:	b086      	sub	sp, #24
 800907e:	af00      	add	r7, sp, #0
 8009080:	6078      	str	r0, [r7, #4]
 8009082:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009086:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800908a:	2300      	movs	r3, #0
 800908c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009092:	2300      	movs	r3, #0
 8009094:	613b      	str	r3, [r7, #16]
 8009096:	e009      	b.n	80090ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	3340      	adds	r3, #64	; 0x40
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	4413      	add	r3, r2
 80090a2:	2200      	movs	r2, #0
 80090a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	3301      	adds	r3, #1
 80090aa:	613b      	str	r3, [r7, #16]
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	2b0e      	cmp	r3, #14
 80090b0:	d9f2      	bls.n	8009098 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80090b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d11c      	bne.n	80090f2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090c6:	f043 0302 	orr.w	r3, r3, #2
 80090ca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	601a      	str	r2, [r3, #0]
 80090f0:	e005      	b.n	80090fe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009104:	461a      	mov	r2, r3
 8009106:	2300      	movs	r3, #0
 8009108:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009110:	4619      	mov	r1, r3
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009118:	461a      	mov	r2, r3
 800911a:	680b      	ldr	r3, [r1, #0]
 800911c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800911e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009120:	2b01      	cmp	r3, #1
 8009122:	d10c      	bne.n	800913e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009126:	2b00      	cmp	r3, #0
 8009128:	d104      	bne.n	8009134 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800912a:	2100      	movs	r1, #0
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 f961 	bl	80093f4 <USB_SetDevSpeed>
 8009132:	e008      	b.n	8009146 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009134:	2101      	movs	r1, #1
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 f95c 	bl	80093f4 <USB_SetDevSpeed>
 800913c:	e003      	b.n	8009146 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800913e:	2103      	movs	r1, #3
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 f957 	bl	80093f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009146:	2110      	movs	r1, #16
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f8f3 	bl	8009334 <USB_FlushTxFifo>
 800914e:	4603      	mov	r3, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d001      	beq.n	8009158 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 f91d 	bl	8009398 <USB_FlushRxFifo>
 800915e:	4603      	mov	r3, r0
 8009160:	2b00      	cmp	r3, #0
 8009162:	d001      	beq.n	8009168 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009164:	2301      	movs	r3, #1
 8009166:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800916e:	461a      	mov	r2, r3
 8009170:	2300      	movs	r3, #0
 8009172:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800917a:	461a      	mov	r2, r3
 800917c:	2300      	movs	r3, #0
 800917e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009186:	461a      	mov	r2, r3
 8009188:	2300      	movs	r3, #0
 800918a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800918c:	2300      	movs	r3, #0
 800918e:	613b      	str	r3, [r7, #16]
 8009190:	e043      	b.n	800921a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	015a      	lsls	r2, r3, #5
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	4413      	add	r3, r2
 800919a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091a8:	d118      	bne.n	80091dc <USB_DevInit+0x164>
    {
      if (i == 0U)
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d10a      	bne.n	80091c6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	015a      	lsls	r2, r3, #5
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	4413      	add	r3, r2
 80091b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091bc:	461a      	mov	r2, r3
 80091be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80091c2:	6013      	str	r3, [r2, #0]
 80091c4:	e013      	b.n	80091ee <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	015a      	lsls	r2, r3, #5
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	4413      	add	r3, r2
 80091ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091d2:	461a      	mov	r2, r3
 80091d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80091d8:	6013      	str	r3, [r2, #0]
 80091da:	e008      	b.n	80091ee <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	015a      	lsls	r2, r3, #5
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	4413      	add	r3, r2
 80091e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091e8:	461a      	mov	r2, r3
 80091ea:	2300      	movs	r3, #0
 80091ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	015a      	lsls	r2, r3, #5
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	4413      	add	r3, r2
 80091f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091fa:	461a      	mov	r2, r3
 80091fc:	2300      	movs	r3, #0
 80091fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	015a      	lsls	r2, r3, #5
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	4413      	add	r3, r2
 8009208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800920c:	461a      	mov	r2, r3
 800920e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009212:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	3301      	adds	r3, #1
 8009218:	613b      	str	r3, [r7, #16]
 800921a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921c:	693a      	ldr	r2, [r7, #16]
 800921e:	429a      	cmp	r2, r3
 8009220:	d3b7      	bcc.n	8009192 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009222:	2300      	movs	r3, #0
 8009224:	613b      	str	r3, [r7, #16]
 8009226:	e043      	b.n	80092b0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	015a      	lsls	r2, r3, #5
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	4413      	add	r3, r2
 8009230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800923a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800923e:	d118      	bne.n	8009272 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d10a      	bne.n	800925c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	015a      	lsls	r2, r3, #5
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	4413      	add	r3, r2
 800924e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009252:	461a      	mov	r2, r3
 8009254:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009258:	6013      	str	r3, [r2, #0]
 800925a:	e013      	b.n	8009284 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	015a      	lsls	r2, r3, #5
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	4413      	add	r3, r2
 8009264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009268:	461a      	mov	r2, r3
 800926a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800926e:	6013      	str	r3, [r2, #0]
 8009270:	e008      	b.n	8009284 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	015a      	lsls	r2, r3, #5
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	4413      	add	r3, r2
 800927a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800927e:	461a      	mov	r2, r3
 8009280:	2300      	movs	r3, #0
 8009282:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	015a      	lsls	r2, r3, #5
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	4413      	add	r3, r2
 800928c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009290:	461a      	mov	r2, r3
 8009292:	2300      	movs	r3, #0
 8009294:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	015a      	lsls	r2, r3, #5
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	4413      	add	r3, r2
 800929e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092a2:	461a      	mov	r2, r3
 80092a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80092a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	3301      	adds	r3, #1
 80092ae:	613b      	str	r3, [r7, #16]
 80092b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b2:	693a      	ldr	r2, [r7, #16]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d3b7      	bcc.n	8009228 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092be:	691b      	ldr	r3, [r3, #16]
 80092c0:	68fa      	ldr	r2, [r7, #12]
 80092c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80092d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80092da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d105      	bne.n	80092ec <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	699b      	ldr	r3, [r3, #24]
 80092e4:	f043 0210 	orr.w	r2, r3, #16
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	699a      	ldr	r2, [r3, #24]
 80092f0:	4b0e      	ldr	r3, [pc, #56]	; (800932c <USB_DevInit+0x2b4>)
 80092f2:	4313      	orrs	r3, r2
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80092f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d005      	beq.n	800930a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	699b      	ldr	r3, [r3, #24]
 8009302:	f043 0208 	orr.w	r2, r3, #8
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800930a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800930c:	2b01      	cmp	r3, #1
 800930e:	d105      	bne.n	800931c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	699a      	ldr	r2, [r3, #24]
 8009314:	4b06      	ldr	r3, [pc, #24]	; (8009330 <USB_DevInit+0x2b8>)
 8009316:	4313      	orrs	r3, r2
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800931c:	7dfb      	ldrb	r3, [r7, #23]
}
 800931e:	4618      	mov	r0, r3
 8009320:	3718      	adds	r7, #24
 8009322:	46bd      	mov	sp, r7
 8009324:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009328:	b004      	add	sp, #16
 800932a:	4770      	bx	lr
 800932c:	803c3800 	.word	0x803c3800
 8009330:	40000004 	.word	0x40000004

08009334 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800933e:	2300      	movs	r3, #0
 8009340:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	3301      	adds	r3, #1
 8009346:	60fb      	str	r3, [r7, #12]
 8009348:	4a12      	ldr	r2, [pc, #72]	; (8009394 <USB_FlushTxFifo+0x60>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d901      	bls.n	8009352 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800934e:	2303      	movs	r3, #3
 8009350:	e01a      	b.n	8009388 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	691b      	ldr	r3, [r3, #16]
 8009356:	2b00      	cmp	r3, #0
 8009358:	daf3      	bge.n	8009342 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800935a:	2300      	movs	r3, #0
 800935c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	019b      	lsls	r3, r3, #6
 8009362:	f043 0220 	orr.w	r2, r3, #32
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	3301      	adds	r3, #1
 800936e:	60fb      	str	r3, [r7, #12]
 8009370:	4a08      	ldr	r2, [pc, #32]	; (8009394 <USB_FlushTxFifo+0x60>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d901      	bls.n	800937a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8009376:	2303      	movs	r3, #3
 8009378:	e006      	b.n	8009388 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	691b      	ldr	r3, [r3, #16]
 800937e:	f003 0320 	and.w	r3, r3, #32
 8009382:	2b20      	cmp	r3, #32
 8009384:	d0f1      	beq.n	800936a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	3714      	adds	r7, #20
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr
 8009394:	00030d40 	.word	0x00030d40

08009398 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093a0:	2300      	movs	r3, #0
 80093a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	3301      	adds	r3, #1
 80093a8:	60fb      	str	r3, [r7, #12]
 80093aa:	4a11      	ldr	r2, [pc, #68]	; (80093f0 <USB_FlushRxFifo+0x58>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d901      	bls.n	80093b4 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80093b0:	2303      	movs	r3, #3
 80093b2:	e017      	b.n	80093e4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	691b      	ldr	r3, [r3, #16]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	daf3      	bge.n	80093a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80093bc:	2300      	movs	r3, #0
 80093be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2210      	movs	r2, #16
 80093c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	3301      	adds	r3, #1
 80093ca:	60fb      	str	r3, [r7, #12]
 80093cc:	4a08      	ldr	r2, [pc, #32]	; (80093f0 <USB_FlushRxFifo+0x58>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d901      	bls.n	80093d6 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80093d2:	2303      	movs	r3, #3
 80093d4:	e006      	b.n	80093e4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	f003 0310 	and.w	r3, r3, #16
 80093de:	2b10      	cmp	r3, #16
 80093e0:	d0f1      	beq.n	80093c6 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3714      	adds	r7, #20
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr
 80093f0:	00030d40 	.word	0x00030d40

080093f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	460b      	mov	r3, r1
 80093fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	78fb      	ldrb	r3, [r7, #3]
 800940e:	68f9      	ldr	r1, [r7, #12]
 8009410:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009414:	4313      	orrs	r3, r2
 8009416:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009418:	2300      	movs	r3, #0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3714      	adds	r7, #20
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr

08009426 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009426:	b480      	push	{r7}
 8009428:	b085      	sub	sp, #20
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009440:	f023 0303 	bic.w	r3, r3, #3
 8009444:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009454:	f043 0302 	orr.w	r3, r3, #2
 8009458:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3714      	adds	r7, #20
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	695b      	ldr	r3, [r3, #20]
 8009474:	f003 0301 	and.w	r3, r3, #1
}
 8009478:	4618      	mov	r0, r3
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800948c:	2300      	movs	r3, #0
 800948e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	3301      	adds	r3, #1
 8009494:	60fb      	str	r3, [r7, #12]
 8009496:	4a13      	ldr	r2, [pc, #76]	; (80094e4 <USB_CoreReset+0x60>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d901      	bls.n	80094a0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800949c:	2303      	movs	r3, #3
 800949e:	e01a      	b.n	80094d6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	daf3      	bge.n	8009490 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80094a8:	2300      	movs	r3, #0
 80094aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	691b      	ldr	r3, [r3, #16]
 80094b0:	f043 0201 	orr.w	r2, r3, #1
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	3301      	adds	r3, #1
 80094bc:	60fb      	str	r3, [r7, #12]
 80094be:	4a09      	ldr	r2, [pc, #36]	; (80094e4 <USB_CoreReset+0x60>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d901      	bls.n	80094c8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80094c4:	2303      	movs	r3, #3
 80094c6:	e006      	b.n	80094d6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	691b      	ldr	r3, [r3, #16]
 80094cc:	f003 0301 	and.w	r3, r3, #1
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d0f1      	beq.n	80094b8 <USB_CoreReset+0x34>

  return HAL_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3714      	adds	r7, #20
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	00030d40 	.word	0x00030d40

080094e8 <__errno>:
 80094e8:	4b01      	ldr	r3, [pc, #4]	; (80094f0 <__errno+0x8>)
 80094ea:	6818      	ldr	r0, [r3, #0]
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop
 80094f0:	24000010 	.word	0x24000010

080094f4 <__libc_init_array>:
 80094f4:	b570      	push	{r4, r5, r6, lr}
 80094f6:	4d0d      	ldr	r5, [pc, #52]	; (800952c <__libc_init_array+0x38>)
 80094f8:	4c0d      	ldr	r4, [pc, #52]	; (8009530 <__libc_init_array+0x3c>)
 80094fa:	1b64      	subs	r4, r4, r5
 80094fc:	10a4      	asrs	r4, r4, #2
 80094fe:	2600      	movs	r6, #0
 8009500:	42a6      	cmp	r6, r4
 8009502:	d109      	bne.n	8009518 <__libc_init_array+0x24>
 8009504:	4d0b      	ldr	r5, [pc, #44]	; (8009534 <__libc_init_array+0x40>)
 8009506:	4c0c      	ldr	r4, [pc, #48]	; (8009538 <__libc_init_array+0x44>)
 8009508:	f000 ff76 	bl	800a3f8 <_init>
 800950c:	1b64      	subs	r4, r4, r5
 800950e:	10a4      	asrs	r4, r4, #2
 8009510:	2600      	movs	r6, #0
 8009512:	42a6      	cmp	r6, r4
 8009514:	d105      	bne.n	8009522 <__libc_init_array+0x2e>
 8009516:	bd70      	pop	{r4, r5, r6, pc}
 8009518:	f855 3b04 	ldr.w	r3, [r5], #4
 800951c:	4798      	blx	r3
 800951e:	3601      	adds	r6, #1
 8009520:	e7ee      	b.n	8009500 <__libc_init_array+0xc>
 8009522:	f855 3b04 	ldr.w	r3, [r5], #4
 8009526:	4798      	blx	r3
 8009528:	3601      	adds	r6, #1
 800952a:	e7f2      	b.n	8009512 <__libc_init_array+0x1e>
 800952c:	0800a4ec 	.word	0x0800a4ec
 8009530:	0800a4ec 	.word	0x0800a4ec
 8009534:	0800a4ec 	.word	0x0800a4ec
 8009538:	0800a4f0 	.word	0x0800a4f0

0800953c <memset>:
 800953c:	4402      	add	r2, r0
 800953e:	4603      	mov	r3, r0
 8009540:	4293      	cmp	r3, r2
 8009542:	d100      	bne.n	8009546 <memset+0xa>
 8009544:	4770      	bx	lr
 8009546:	f803 1b01 	strb.w	r1, [r3], #1
 800954a:	e7f9      	b.n	8009540 <memset+0x4>

0800954c <iprintf>:
 800954c:	b40f      	push	{r0, r1, r2, r3}
 800954e:	4b0a      	ldr	r3, [pc, #40]	; (8009578 <iprintf+0x2c>)
 8009550:	b513      	push	{r0, r1, r4, lr}
 8009552:	681c      	ldr	r4, [r3, #0]
 8009554:	b124      	cbz	r4, 8009560 <iprintf+0x14>
 8009556:	69a3      	ldr	r3, [r4, #24]
 8009558:	b913      	cbnz	r3, 8009560 <iprintf+0x14>
 800955a:	4620      	mov	r0, r4
 800955c:	f000 f866 	bl	800962c <__sinit>
 8009560:	ab05      	add	r3, sp, #20
 8009562:	9a04      	ldr	r2, [sp, #16]
 8009564:	68a1      	ldr	r1, [r4, #8]
 8009566:	9301      	str	r3, [sp, #4]
 8009568:	4620      	mov	r0, r4
 800956a:	f000 f983 	bl	8009874 <_vfiprintf_r>
 800956e:	b002      	add	sp, #8
 8009570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009574:	b004      	add	sp, #16
 8009576:	4770      	bx	lr
 8009578:	24000010 	.word	0x24000010

0800957c <std>:
 800957c:	2300      	movs	r3, #0
 800957e:	b510      	push	{r4, lr}
 8009580:	4604      	mov	r4, r0
 8009582:	e9c0 3300 	strd	r3, r3, [r0]
 8009586:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800958a:	6083      	str	r3, [r0, #8]
 800958c:	8181      	strh	r1, [r0, #12]
 800958e:	6643      	str	r3, [r0, #100]	; 0x64
 8009590:	81c2      	strh	r2, [r0, #14]
 8009592:	6183      	str	r3, [r0, #24]
 8009594:	4619      	mov	r1, r3
 8009596:	2208      	movs	r2, #8
 8009598:	305c      	adds	r0, #92	; 0x5c
 800959a:	f7ff ffcf 	bl	800953c <memset>
 800959e:	4b05      	ldr	r3, [pc, #20]	; (80095b4 <std+0x38>)
 80095a0:	6263      	str	r3, [r4, #36]	; 0x24
 80095a2:	4b05      	ldr	r3, [pc, #20]	; (80095b8 <std+0x3c>)
 80095a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80095a6:	4b05      	ldr	r3, [pc, #20]	; (80095bc <std+0x40>)
 80095a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80095aa:	4b05      	ldr	r3, [pc, #20]	; (80095c0 <std+0x44>)
 80095ac:	6224      	str	r4, [r4, #32]
 80095ae:	6323      	str	r3, [r4, #48]	; 0x30
 80095b0:	bd10      	pop	{r4, pc}
 80095b2:	bf00      	nop
 80095b4:	08009e1d 	.word	0x08009e1d
 80095b8:	08009e3f 	.word	0x08009e3f
 80095bc:	08009e77 	.word	0x08009e77
 80095c0:	08009e9b 	.word	0x08009e9b

080095c4 <_cleanup_r>:
 80095c4:	4901      	ldr	r1, [pc, #4]	; (80095cc <_cleanup_r+0x8>)
 80095c6:	f000 b8af 	b.w	8009728 <_fwalk_reent>
 80095ca:	bf00      	nop
 80095cc:	0800a175 	.word	0x0800a175

080095d0 <__sfmoreglue>:
 80095d0:	b570      	push	{r4, r5, r6, lr}
 80095d2:	1e4a      	subs	r2, r1, #1
 80095d4:	2568      	movs	r5, #104	; 0x68
 80095d6:	4355      	muls	r5, r2
 80095d8:	460e      	mov	r6, r1
 80095da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80095de:	f000 f8c5 	bl	800976c <_malloc_r>
 80095e2:	4604      	mov	r4, r0
 80095e4:	b140      	cbz	r0, 80095f8 <__sfmoreglue+0x28>
 80095e6:	2100      	movs	r1, #0
 80095e8:	e9c0 1600 	strd	r1, r6, [r0]
 80095ec:	300c      	adds	r0, #12
 80095ee:	60a0      	str	r0, [r4, #8]
 80095f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80095f4:	f7ff ffa2 	bl	800953c <memset>
 80095f8:	4620      	mov	r0, r4
 80095fa:	bd70      	pop	{r4, r5, r6, pc}

080095fc <__sfp_lock_acquire>:
 80095fc:	4801      	ldr	r0, [pc, #4]	; (8009604 <__sfp_lock_acquire+0x8>)
 80095fe:	f000 b8b3 	b.w	8009768 <__retarget_lock_acquire_recursive>
 8009602:	bf00      	nop
 8009604:	24000740 	.word	0x24000740

08009608 <__sfp_lock_release>:
 8009608:	4801      	ldr	r0, [pc, #4]	; (8009610 <__sfp_lock_release+0x8>)
 800960a:	f000 b8ae 	b.w	800976a <__retarget_lock_release_recursive>
 800960e:	bf00      	nop
 8009610:	24000740 	.word	0x24000740

08009614 <__sinit_lock_acquire>:
 8009614:	4801      	ldr	r0, [pc, #4]	; (800961c <__sinit_lock_acquire+0x8>)
 8009616:	f000 b8a7 	b.w	8009768 <__retarget_lock_acquire_recursive>
 800961a:	bf00      	nop
 800961c:	2400073b 	.word	0x2400073b

08009620 <__sinit_lock_release>:
 8009620:	4801      	ldr	r0, [pc, #4]	; (8009628 <__sinit_lock_release+0x8>)
 8009622:	f000 b8a2 	b.w	800976a <__retarget_lock_release_recursive>
 8009626:	bf00      	nop
 8009628:	2400073b 	.word	0x2400073b

0800962c <__sinit>:
 800962c:	b510      	push	{r4, lr}
 800962e:	4604      	mov	r4, r0
 8009630:	f7ff fff0 	bl	8009614 <__sinit_lock_acquire>
 8009634:	69a3      	ldr	r3, [r4, #24]
 8009636:	b11b      	cbz	r3, 8009640 <__sinit+0x14>
 8009638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800963c:	f7ff bff0 	b.w	8009620 <__sinit_lock_release>
 8009640:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009644:	6523      	str	r3, [r4, #80]	; 0x50
 8009646:	4b13      	ldr	r3, [pc, #76]	; (8009694 <__sinit+0x68>)
 8009648:	4a13      	ldr	r2, [pc, #76]	; (8009698 <__sinit+0x6c>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	62a2      	str	r2, [r4, #40]	; 0x28
 800964e:	42a3      	cmp	r3, r4
 8009650:	bf04      	itt	eq
 8009652:	2301      	moveq	r3, #1
 8009654:	61a3      	streq	r3, [r4, #24]
 8009656:	4620      	mov	r0, r4
 8009658:	f000 f820 	bl	800969c <__sfp>
 800965c:	6060      	str	r0, [r4, #4]
 800965e:	4620      	mov	r0, r4
 8009660:	f000 f81c 	bl	800969c <__sfp>
 8009664:	60a0      	str	r0, [r4, #8]
 8009666:	4620      	mov	r0, r4
 8009668:	f000 f818 	bl	800969c <__sfp>
 800966c:	2200      	movs	r2, #0
 800966e:	60e0      	str	r0, [r4, #12]
 8009670:	2104      	movs	r1, #4
 8009672:	6860      	ldr	r0, [r4, #4]
 8009674:	f7ff ff82 	bl	800957c <std>
 8009678:	68a0      	ldr	r0, [r4, #8]
 800967a:	2201      	movs	r2, #1
 800967c:	2109      	movs	r1, #9
 800967e:	f7ff ff7d 	bl	800957c <std>
 8009682:	68e0      	ldr	r0, [r4, #12]
 8009684:	2202      	movs	r2, #2
 8009686:	2112      	movs	r1, #18
 8009688:	f7ff ff78 	bl	800957c <std>
 800968c:	2301      	movs	r3, #1
 800968e:	61a3      	str	r3, [r4, #24]
 8009690:	e7d2      	b.n	8009638 <__sinit+0xc>
 8009692:	bf00      	nop
 8009694:	0800a44c 	.word	0x0800a44c
 8009698:	080095c5 	.word	0x080095c5

0800969c <__sfp>:
 800969c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800969e:	4607      	mov	r7, r0
 80096a0:	f7ff ffac 	bl	80095fc <__sfp_lock_acquire>
 80096a4:	4b1e      	ldr	r3, [pc, #120]	; (8009720 <__sfp+0x84>)
 80096a6:	681e      	ldr	r6, [r3, #0]
 80096a8:	69b3      	ldr	r3, [r6, #24]
 80096aa:	b913      	cbnz	r3, 80096b2 <__sfp+0x16>
 80096ac:	4630      	mov	r0, r6
 80096ae:	f7ff ffbd 	bl	800962c <__sinit>
 80096b2:	3648      	adds	r6, #72	; 0x48
 80096b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80096b8:	3b01      	subs	r3, #1
 80096ba:	d503      	bpl.n	80096c4 <__sfp+0x28>
 80096bc:	6833      	ldr	r3, [r6, #0]
 80096be:	b30b      	cbz	r3, 8009704 <__sfp+0x68>
 80096c0:	6836      	ldr	r6, [r6, #0]
 80096c2:	e7f7      	b.n	80096b4 <__sfp+0x18>
 80096c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80096c8:	b9d5      	cbnz	r5, 8009700 <__sfp+0x64>
 80096ca:	4b16      	ldr	r3, [pc, #88]	; (8009724 <__sfp+0x88>)
 80096cc:	60e3      	str	r3, [r4, #12]
 80096ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80096d2:	6665      	str	r5, [r4, #100]	; 0x64
 80096d4:	f000 f847 	bl	8009766 <__retarget_lock_init_recursive>
 80096d8:	f7ff ff96 	bl	8009608 <__sfp_lock_release>
 80096dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80096e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80096e4:	6025      	str	r5, [r4, #0]
 80096e6:	61a5      	str	r5, [r4, #24]
 80096e8:	2208      	movs	r2, #8
 80096ea:	4629      	mov	r1, r5
 80096ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80096f0:	f7ff ff24 	bl	800953c <memset>
 80096f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80096f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80096fc:	4620      	mov	r0, r4
 80096fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009700:	3468      	adds	r4, #104	; 0x68
 8009702:	e7d9      	b.n	80096b8 <__sfp+0x1c>
 8009704:	2104      	movs	r1, #4
 8009706:	4638      	mov	r0, r7
 8009708:	f7ff ff62 	bl	80095d0 <__sfmoreglue>
 800970c:	4604      	mov	r4, r0
 800970e:	6030      	str	r0, [r6, #0]
 8009710:	2800      	cmp	r0, #0
 8009712:	d1d5      	bne.n	80096c0 <__sfp+0x24>
 8009714:	f7ff ff78 	bl	8009608 <__sfp_lock_release>
 8009718:	230c      	movs	r3, #12
 800971a:	603b      	str	r3, [r7, #0]
 800971c:	e7ee      	b.n	80096fc <__sfp+0x60>
 800971e:	bf00      	nop
 8009720:	0800a44c 	.word	0x0800a44c
 8009724:	ffff0001 	.word	0xffff0001

08009728 <_fwalk_reent>:
 8009728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800972c:	4606      	mov	r6, r0
 800972e:	4688      	mov	r8, r1
 8009730:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009734:	2700      	movs	r7, #0
 8009736:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800973a:	f1b9 0901 	subs.w	r9, r9, #1
 800973e:	d505      	bpl.n	800974c <_fwalk_reent+0x24>
 8009740:	6824      	ldr	r4, [r4, #0]
 8009742:	2c00      	cmp	r4, #0
 8009744:	d1f7      	bne.n	8009736 <_fwalk_reent+0xe>
 8009746:	4638      	mov	r0, r7
 8009748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800974c:	89ab      	ldrh	r3, [r5, #12]
 800974e:	2b01      	cmp	r3, #1
 8009750:	d907      	bls.n	8009762 <_fwalk_reent+0x3a>
 8009752:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009756:	3301      	adds	r3, #1
 8009758:	d003      	beq.n	8009762 <_fwalk_reent+0x3a>
 800975a:	4629      	mov	r1, r5
 800975c:	4630      	mov	r0, r6
 800975e:	47c0      	blx	r8
 8009760:	4307      	orrs	r7, r0
 8009762:	3568      	adds	r5, #104	; 0x68
 8009764:	e7e9      	b.n	800973a <_fwalk_reent+0x12>

08009766 <__retarget_lock_init_recursive>:
 8009766:	4770      	bx	lr

08009768 <__retarget_lock_acquire_recursive>:
 8009768:	4770      	bx	lr

0800976a <__retarget_lock_release_recursive>:
 800976a:	4770      	bx	lr

0800976c <_malloc_r>:
 800976c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800976e:	1ccd      	adds	r5, r1, #3
 8009770:	f025 0503 	bic.w	r5, r5, #3
 8009774:	3508      	adds	r5, #8
 8009776:	2d0c      	cmp	r5, #12
 8009778:	bf38      	it	cc
 800977a:	250c      	movcc	r5, #12
 800977c:	2d00      	cmp	r5, #0
 800977e:	4606      	mov	r6, r0
 8009780:	db01      	blt.n	8009786 <_malloc_r+0x1a>
 8009782:	42a9      	cmp	r1, r5
 8009784:	d903      	bls.n	800978e <_malloc_r+0x22>
 8009786:	230c      	movs	r3, #12
 8009788:	6033      	str	r3, [r6, #0]
 800978a:	2000      	movs	r0, #0
 800978c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800978e:	f000 fda3 	bl	800a2d8 <__malloc_lock>
 8009792:	4921      	ldr	r1, [pc, #132]	; (8009818 <_malloc_r+0xac>)
 8009794:	680a      	ldr	r2, [r1, #0]
 8009796:	4614      	mov	r4, r2
 8009798:	b99c      	cbnz	r4, 80097c2 <_malloc_r+0x56>
 800979a:	4f20      	ldr	r7, [pc, #128]	; (800981c <_malloc_r+0xb0>)
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	b923      	cbnz	r3, 80097aa <_malloc_r+0x3e>
 80097a0:	4621      	mov	r1, r4
 80097a2:	4630      	mov	r0, r6
 80097a4:	f000 fb2a 	bl	8009dfc <_sbrk_r>
 80097a8:	6038      	str	r0, [r7, #0]
 80097aa:	4629      	mov	r1, r5
 80097ac:	4630      	mov	r0, r6
 80097ae:	f000 fb25 	bl	8009dfc <_sbrk_r>
 80097b2:	1c43      	adds	r3, r0, #1
 80097b4:	d123      	bne.n	80097fe <_malloc_r+0x92>
 80097b6:	230c      	movs	r3, #12
 80097b8:	6033      	str	r3, [r6, #0]
 80097ba:	4630      	mov	r0, r6
 80097bc:	f000 fd92 	bl	800a2e4 <__malloc_unlock>
 80097c0:	e7e3      	b.n	800978a <_malloc_r+0x1e>
 80097c2:	6823      	ldr	r3, [r4, #0]
 80097c4:	1b5b      	subs	r3, r3, r5
 80097c6:	d417      	bmi.n	80097f8 <_malloc_r+0x8c>
 80097c8:	2b0b      	cmp	r3, #11
 80097ca:	d903      	bls.n	80097d4 <_malloc_r+0x68>
 80097cc:	6023      	str	r3, [r4, #0]
 80097ce:	441c      	add	r4, r3
 80097d0:	6025      	str	r5, [r4, #0]
 80097d2:	e004      	b.n	80097de <_malloc_r+0x72>
 80097d4:	6863      	ldr	r3, [r4, #4]
 80097d6:	42a2      	cmp	r2, r4
 80097d8:	bf0c      	ite	eq
 80097da:	600b      	streq	r3, [r1, #0]
 80097dc:	6053      	strne	r3, [r2, #4]
 80097de:	4630      	mov	r0, r6
 80097e0:	f000 fd80 	bl	800a2e4 <__malloc_unlock>
 80097e4:	f104 000b 	add.w	r0, r4, #11
 80097e8:	1d23      	adds	r3, r4, #4
 80097ea:	f020 0007 	bic.w	r0, r0, #7
 80097ee:	1ac2      	subs	r2, r0, r3
 80097f0:	d0cc      	beq.n	800978c <_malloc_r+0x20>
 80097f2:	1a1b      	subs	r3, r3, r0
 80097f4:	50a3      	str	r3, [r4, r2]
 80097f6:	e7c9      	b.n	800978c <_malloc_r+0x20>
 80097f8:	4622      	mov	r2, r4
 80097fa:	6864      	ldr	r4, [r4, #4]
 80097fc:	e7cc      	b.n	8009798 <_malloc_r+0x2c>
 80097fe:	1cc4      	adds	r4, r0, #3
 8009800:	f024 0403 	bic.w	r4, r4, #3
 8009804:	42a0      	cmp	r0, r4
 8009806:	d0e3      	beq.n	80097d0 <_malloc_r+0x64>
 8009808:	1a21      	subs	r1, r4, r0
 800980a:	4630      	mov	r0, r6
 800980c:	f000 faf6 	bl	8009dfc <_sbrk_r>
 8009810:	3001      	adds	r0, #1
 8009812:	d1dd      	bne.n	80097d0 <_malloc_r+0x64>
 8009814:	e7cf      	b.n	80097b6 <_malloc_r+0x4a>
 8009816:	bf00      	nop
 8009818:	2400015c 	.word	0x2400015c
 800981c:	24000160 	.word	0x24000160

08009820 <__sfputc_r>:
 8009820:	6893      	ldr	r3, [r2, #8]
 8009822:	3b01      	subs	r3, #1
 8009824:	2b00      	cmp	r3, #0
 8009826:	b410      	push	{r4}
 8009828:	6093      	str	r3, [r2, #8]
 800982a:	da08      	bge.n	800983e <__sfputc_r+0x1e>
 800982c:	6994      	ldr	r4, [r2, #24]
 800982e:	42a3      	cmp	r3, r4
 8009830:	db01      	blt.n	8009836 <__sfputc_r+0x16>
 8009832:	290a      	cmp	r1, #10
 8009834:	d103      	bne.n	800983e <__sfputc_r+0x1e>
 8009836:	f85d 4b04 	ldr.w	r4, [sp], #4
 800983a:	f000 bb33 	b.w	8009ea4 <__swbuf_r>
 800983e:	6813      	ldr	r3, [r2, #0]
 8009840:	1c58      	adds	r0, r3, #1
 8009842:	6010      	str	r0, [r2, #0]
 8009844:	7019      	strb	r1, [r3, #0]
 8009846:	4608      	mov	r0, r1
 8009848:	f85d 4b04 	ldr.w	r4, [sp], #4
 800984c:	4770      	bx	lr

0800984e <__sfputs_r>:
 800984e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009850:	4606      	mov	r6, r0
 8009852:	460f      	mov	r7, r1
 8009854:	4614      	mov	r4, r2
 8009856:	18d5      	adds	r5, r2, r3
 8009858:	42ac      	cmp	r4, r5
 800985a:	d101      	bne.n	8009860 <__sfputs_r+0x12>
 800985c:	2000      	movs	r0, #0
 800985e:	e007      	b.n	8009870 <__sfputs_r+0x22>
 8009860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009864:	463a      	mov	r2, r7
 8009866:	4630      	mov	r0, r6
 8009868:	f7ff ffda 	bl	8009820 <__sfputc_r>
 800986c:	1c43      	adds	r3, r0, #1
 800986e:	d1f3      	bne.n	8009858 <__sfputs_r+0xa>
 8009870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009874 <_vfiprintf_r>:
 8009874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009878:	460d      	mov	r5, r1
 800987a:	b09d      	sub	sp, #116	; 0x74
 800987c:	4614      	mov	r4, r2
 800987e:	4698      	mov	r8, r3
 8009880:	4606      	mov	r6, r0
 8009882:	b118      	cbz	r0, 800988c <_vfiprintf_r+0x18>
 8009884:	6983      	ldr	r3, [r0, #24]
 8009886:	b90b      	cbnz	r3, 800988c <_vfiprintf_r+0x18>
 8009888:	f7ff fed0 	bl	800962c <__sinit>
 800988c:	4b89      	ldr	r3, [pc, #548]	; (8009ab4 <_vfiprintf_r+0x240>)
 800988e:	429d      	cmp	r5, r3
 8009890:	d11b      	bne.n	80098ca <_vfiprintf_r+0x56>
 8009892:	6875      	ldr	r5, [r6, #4]
 8009894:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009896:	07d9      	lsls	r1, r3, #31
 8009898:	d405      	bmi.n	80098a6 <_vfiprintf_r+0x32>
 800989a:	89ab      	ldrh	r3, [r5, #12]
 800989c:	059a      	lsls	r2, r3, #22
 800989e:	d402      	bmi.n	80098a6 <_vfiprintf_r+0x32>
 80098a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098a2:	f7ff ff61 	bl	8009768 <__retarget_lock_acquire_recursive>
 80098a6:	89ab      	ldrh	r3, [r5, #12]
 80098a8:	071b      	lsls	r3, r3, #28
 80098aa:	d501      	bpl.n	80098b0 <_vfiprintf_r+0x3c>
 80098ac:	692b      	ldr	r3, [r5, #16]
 80098ae:	b9eb      	cbnz	r3, 80098ec <_vfiprintf_r+0x78>
 80098b0:	4629      	mov	r1, r5
 80098b2:	4630      	mov	r0, r6
 80098b4:	f000 fb5a 	bl	8009f6c <__swsetup_r>
 80098b8:	b1c0      	cbz	r0, 80098ec <_vfiprintf_r+0x78>
 80098ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098bc:	07dc      	lsls	r4, r3, #31
 80098be:	d50e      	bpl.n	80098de <_vfiprintf_r+0x6a>
 80098c0:	f04f 30ff 	mov.w	r0, #4294967295
 80098c4:	b01d      	add	sp, #116	; 0x74
 80098c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ca:	4b7b      	ldr	r3, [pc, #492]	; (8009ab8 <_vfiprintf_r+0x244>)
 80098cc:	429d      	cmp	r5, r3
 80098ce:	d101      	bne.n	80098d4 <_vfiprintf_r+0x60>
 80098d0:	68b5      	ldr	r5, [r6, #8]
 80098d2:	e7df      	b.n	8009894 <_vfiprintf_r+0x20>
 80098d4:	4b79      	ldr	r3, [pc, #484]	; (8009abc <_vfiprintf_r+0x248>)
 80098d6:	429d      	cmp	r5, r3
 80098d8:	bf08      	it	eq
 80098da:	68f5      	ldreq	r5, [r6, #12]
 80098dc:	e7da      	b.n	8009894 <_vfiprintf_r+0x20>
 80098de:	89ab      	ldrh	r3, [r5, #12]
 80098e0:	0598      	lsls	r0, r3, #22
 80098e2:	d4ed      	bmi.n	80098c0 <_vfiprintf_r+0x4c>
 80098e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098e6:	f7ff ff40 	bl	800976a <__retarget_lock_release_recursive>
 80098ea:	e7e9      	b.n	80098c0 <_vfiprintf_r+0x4c>
 80098ec:	2300      	movs	r3, #0
 80098ee:	9309      	str	r3, [sp, #36]	; 0x24
 80098f0:	2320      	movs	r3, #32
 80098f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80098fa:	2330      	movs	r3, #48	; 0x30
 80098fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ac0 <_vfiprintf_r+0x24c>
 8009900:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009904:	f04f 0901 	mov.w	r9, #1
 8009908:	4623      	mov	r3, r4
 800990a:	469a      	mov	sl, r3
 800990c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009910:	b10a      	cbz	r2, 8009916 <_vfiprintf_r+0xa2>
 8009912:	2a25      	cmp	r2, #37	; 0x25
 8009914:	d1f9      	bne.n	800990a <_vfiprintf_r+0x96>
 8009916:	ebba 0b04 	subs.w	fp, sl, r4
 800991a:	d00b      	beq.n	8009934 <_vfiprintf_r+0xc0>
 800991c:	465b      	mov	r3, fp
 800991e:	4622      	mov	r2, r4
 8009920:	4629      	mov	r1, r5
 8009922:	4630      	mov	r0, r6
 8009924:	f7ff ff93 	bl	800984e <__sfputs_r>
 8009928:	3001      	adds	r0, #1
 800992a:	f000 80aa 	beq.w	8009a82 <_vfiprintf_r+0x20e>
 800992e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009930:	445a      	add	r2, fp
 8009932:	9209      	str	r2, [sp, #36]	; 0x24
 8009934:	f89a 3000 	ldrb.w	r3, [sl]
 8009938:	2b00      	cmp	r3, #0
 800993a:	f000 80a2 	beq.w	8009a82 <_vfiprintf_r+0x20e>
 800993e:	2300      	movs	r3, #0
 8009940:	f04f 32ff 	mov.w	r2, #4294967295
 8009944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009948:	f10a 0a01 	add.w	sl, sl, #1
 800994c:	9304      	str	r3, [sp, #16]
 800994e:	9307      	str	r3, [sp, #28]
 8009950:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009954:	931a      	str	r3, [sp, #104]	; 0x68
 8009956:	4654      	mov	r4, sl
 8009958:	2205      	movs	r2, #5
 800995a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800995e:	4858      	ldr	r0, [pc, #352]	; (8009ac0 <_vfiprintf_r+0x24c>)
 8009960:	f7f6 fcbe 	bl	80002e0 <memchr>
 8009964:	9a04      	ldr	r2, [sp, #16]
 8009966:	b9d8      	cbnz	r0, 80099a0 <_vfiprintf_r+0x12c>
 8009968:	06d1      	lsls	r1, r2, #27
 800996a:	bf44      	itt	mi
 800996c:	2320      	movmi	r3, #32
 800996e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009972:	0713      	lsls	r3, r2, #28
 8009974:	bf44      	itt	mi
 8009976:	232b      	movmi	r3, #43	; 0x2b
 8009978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800997c:	f89a 3000 	ldrb.w	r3, [sl]
 8009980:	2b2a      	cmp	r3, #42	; 0x2a
 8009982:	d015      	beq.n	80099b0 <_vfiprintf_r+0x13c>
 8009984:	9a07      	ldr	r2, [sp, #28]
 8009986:	4654      	mov	r4, sl
 8009988:	2000      	movs	r0, #0
 800998a:	f04f 0c0a 	mov.w	ip, #10
 800998e:	4621      	mov	r1, r4
 8009990:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009994:	3b30      	subs	r3, #48	; 0x30
 8009996:	2b09      	cmp	r3, #9
 8009998:	d94e      	bls.n	8009a38 <_vfiprintf_r+0x1c4>
 800999a:	b1b0      	cbz	r0, 80099ca <_vfiprintf_r+0x156>
 800999c:	9207      	str	r2, [sp, #28]
 800999e:	e014      	b.n	80099ca <_vfiprintf_r+0x156>
 80099a0:	eba0 0308 	sub.w	r3, r0, r8
 80099a4:	fa09 f303 	lsl.w	r3, r9, r3
 80099a8:	4313      	orrs	r3, r2
 80099aa:	9304      	str	r3, [sp, #16]
 80099ac:	46a2      	mov	sl, r4
 80099ae:	e7d2      	b.n	8009956 <_vfiprintf_r+0xe2>
 80099b0:	9b03      	ldr	r3, [sp, #12]
 80099b2:	1d19      	adds	r1, r3, #4
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	9103      	str	r1, [sp, #12]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	bfbb      	ittet	lt
 80099bc:	425b      	neglt	r3, r3
 80099be:	f042 0202 	orrlt.w	r2, r2, #2
 80099c2:	9307      	strge	r3, [sp, #28]
 80099c4:	9307      	strlt	r3, [sp, #28]
 80099c6:	bfb8      	it	lt
 80099c8:	9204      	strlt	r2, [sp, #16]
 80099ca:	7823      	ldrb	r3, [r4, #0]
 80099cc:	2b2e      	cmp	r3, #46	; 0x2e
 80099ce:	d10c      	bne.n	80099ea <_vfiprintf_r+0x176>
 80099d0:	7863      	ldrb	r3, [r4, #1]
 80099d2:	2b2a      	cmp	r3, #42	; 0x2a
 80099d4:	d135      	bne.n	8009a42 <_vfiprintf_r+0x1ce>
 80099d6:	9b03      	ldr	r3, [sp, #12]
 80099d8:	1d1a      	adds	r2, r3, #4
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	9203      	str	r2, [sp, #12]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	bfb8      	it	lt
 80099e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80099e6:	3402      	adds	r4, #2
 80099e8:	9305      	str	r3, [sp, #20]
 80099ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009ad0 <_vfiprintf_r+0x25c>
 80099ee:	7821      	ldrb	r1, [r4, #0]
 80099f0:	2203      	movs	r2, #3
 80099f2:	4650      	mov	r0, sl
 80099f4:	f7f6 fc74 	bl	80002e0 <memchr>
 80099f8:	b140      	cbz	r0, 8009a0c <_vfiprintf_r+0x198>
 80099fa:	2340      	movs	r3, #64	; 0x40
 80099fc:	eba0 000a 	sub.w	r0, r0, sl
 8009a00:	fa03 f000 	lsl.w	r0, r3, r0
 8009a04:	9b04      	ldr	r3, [sp, #16]
 8009a06:	4303      	orrs	r3, r0
 8009a08:	3401      	adds	r4, #1
 8009a0a:	9304      	str	r3, [sp, #16]
 8009a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a10:	482c      	ldr	r0, [pc, #176]	; (8009ac4 <_vfiprintf_r+0x250>)
 8009a12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a16:	2206      	movs	r2, #6
 8009a18:	f7f6 fc62 	bl	80002e0 <memchr>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	d03f      	beq.n	8009aa0 <_vfiprintf_r+0x22c>
 8009a20:	4b29      	ldr	r3, [pc, #164]	; (8009ac8 <_vfiprintf_r+0x254>)
 8009a22:	bb1b      	cbnz	r3, 8009a6c <_vfiprintf_r+0x1f8>
 8009a24:	9b03      	ldr	r3, [sp, #12]
 8009a26:	3307      	adds	r3, #7
 8009a28:	f023 0307 	bic.w	r3, r3, #7
 8009a2c:	3308      	adds	r3, #8
 8009a2e:	9303      	str	r3, [sp, #12]
 8009a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a32:	443b      	add	r3, r7
 8009a34:	9309      	str	r3, [sp, #36]	; 0x24
 8009a36:	e767      	b.n	8009908 <_vfiprintf_r+0x94>
 8009a38:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a3c:	460c      	mov	r4, r1
 8009a3e:	2001      	movs	r0, #1
 8009a40:	e7a5      	b.n	800998e <_vfiprintf_r+0x11a>
 8009a42:	2300      	movs	r3, #0
 8009a44:	3401      	adds	r4, #1
 8009a46:	9305      	str	r3, [sp, #20]
 8009a48:	4619      	mov	r1, r3
 8009a4a:	f04f 0c0a 	mov.w	ip, #10
 8009a4e:	4620      	mov	r0, r4
 8009a50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a54:	3a30      	subs	r2, #48	; 0x30
 8009a56:	2a09      	cmp	r2, #9
 8009a58:	d903      	bls.n	8009a62 <_vfiprintf_r+0x1ee>
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d0c5      	beq.n	80099ea <_vfiprintf_r+0x176>
 8009a5e:	9105      	str	r1, [sp, #20]
 8009a60:	e7c3      	b.n	80099ea <_vfiprintf_r+0x176>
 8009a62:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a66:	4604      	mov	r4, r0
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e7f0      	b.n	8009a4e <_vfiprintf_r+0x1da>
 8009a6c:	ab03      	add	r3, sp, #12
 8009a6e:	9300      	str	r3, [sp, #0]
 8009a70:	462a      	mov	r2, r5
 8009a72:	4b16      	ldr	r3, [pc, #88]	; (8009acc <_vfiprintf_r+0x258>)
 8009a74:	a904      	add	r1, sp, #16
 8009a76:	4630      	mov	r0, r6
 8009a78:	f3af 8000 	nop.w
 8009a7c:	4607      	mov	r7, r0
 8009a7e:	1c78      	adds	r0, r7, #1
 8009a80:	d1d6      	bne.n	8009a30 <_vfiprintf_r+0x1bc>
 8009a82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a84:	07d9      	lsls	r1, r3, #31
 8009a86:	d405      	bmi.n	8009a94 <_vfiprintf_r+0x220>
 8009a88:	89ab      	ldrh	r3, [r5, #12]
 8009a8a:	059a      	lsls	r2, r3, #22
 8009a8c:	d402      	bmi.n	8009a94 <_vfiprintf_r+0x220>
 8009a8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a90:	f7ff fe6b 	bl	800976a <__retarget_lock_release_recursive>
 8009a94:	89ab      	ldrh	r3, [r5, #12]
 8009a96:	065b      	lsls	r3, r3, #25
 8009a98:	f53f af12 	bmi.w	80098c0 <_vfiprintf_r+0x4c>
 8009a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a9e:	e711      	b.n	80098c4 <_vfiprintf_r+0x50>
 8009aa0:	ab03      	add	r3, sp, #12
 8009aa2:	9300      	str	r3, [sp, #0]
 8009aa4:	462a      	mov	r2, r5
 8009aa6:	4b09      	ldr	r3, [pc, #36]	; (8009acc <_vfiprintf_r+0x258>)
 8009aa8:	a904      	add	r1, sp, #16
 8009aaa:	4630      	mov	r0, r6
 8009aac:	f000 f880 	bl	8009bb0 <_printf_i>
 8009ab0:	e7e4      	b.n	8009a7c <_vfiprintf_r+0x208>
 8009ab2:	bf00      	nop
 8009ab4:	0800a470 	.word	0x0800a470
 8009ab8:	0800a490 	.word	0x0800a490
 8009abc:	0800a450 	.word	0x0800a450
 8009ac0:	0800a4b0 	.word	0x0800a4b0
 8009ac4:	0800a4ba 	.word	0x0800a4ba
 8009ac8:	00000000 	.word	0x00000000
 8009acc:	0800984f 	.word	0x0800984f
 8009ad0:	0800a4b6 	.word	0x0800a4b6

08009ad4 <_printf_common>:
 8009ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ad8:	4616      	mov	r6, r2
 8009ada:	4699      	mov	r9, r3
 8009adc:	688a      	ldr	r2, [r1, #8]
 8009ade:	690b      	ldr	r3, [r1, #16]
 8009ae0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	bfb8      	it	lt
 8009ae8:	4613      	movlt	r3, r2
 8009aea:	6033      	str	r3, [r6, #0]
 8009aec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009af0:	4607      	mov	r7, r0
 8009af2:	460c      	mov	r4, r1
 8009af4:	b10a      	cbz	r2, 8009afa <_printf_common+0x26>
 8009af6:	3301      	adds	r3, #1
 8009af8:	6033      	str	r3, [r6, #0]
 8009afa:	6823      	ldr	r3, [r4, #0]
 8009afc:	0699      	lsls	r1, r3, #26
 8009afe:	bf42      	ittt	mi
 8009b00:	6833      	ldrmi	r3, [r6, #0]
 8009b02:	3302      	addmi	r3, #2
 8009b04:	6033      	strmi	r3, [r6, #0]
 8009b06:	6825      	ldr	r5, [r4, #0]
 8009b08:	f015 0506 	ands.w	r5, r5, #6
 8009b0c:	d106      	bne.n	8009b1c <_printf_common+0x48>
 8009b0e:	f104 0a19 	add.w	sl, r4, #25
 8009b12:	68e3      	ldr	r3, [r4, #12]
 8009b14:	6832      	ldr	r2, [r6, #0]
 8009b16:	1a9b      	subs	r3, r3, r2
 8009b18:	42ab      	cmp	r3, r5
 8009b1a:	dc26      	bgt.n	8009b6a <_printf_common+0x96>
 8009b1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b20:	1e13      	subs	r3, r2, #0
 8009b22:	6822      	ldr	r2, [r4, #0]
 8009b24:	bf18      	it	ne
 8009b26:	2301      	movne	r3, #1
 8009b28:	0692      	lsls	r2, r2, #26
 8009b2a:	d42b      	bmi.n	8009b84 <_printf_common+0xb0>
 8009b2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b30:	4649      	mov	r1, r9
 8009b32:	4638      	mov	r0, r7
 8009b34:	47c0      	blx	r8
 8009b36:	3001      	adds	r0, #1
 8009b38:	d01e      	beq.n	8009b78 <_printf_common+0xa4>
 8009b3a:	6823      	ldr	r3, [r4, #0]
 8009b3c:	68e5      	ldr	r5, [r4, #12]
 8009b3e:	6832      	ldr	r2, [r6, #0]
 8009b40:	f003 0306 	and.w	r3, r3, #6
 8009b44:	2b04      	cmp	r3, #4
 8009b46:	bf08      	it	eq
 8009b48:	1aad      	subeq	r5, r5, r2
 8009b4a:	68a3      	ldr	r3, [r4, #8]
 8009b4c:	6922      	ldr	r2, [r4, #16]
 8009b4e:	bf0c      	ite	eq
 8009b50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b54:	2500      	movne	r5, #0
 8009b56:	4293      	cmp	r3, r2
 8009b58:	bfc4      	itt	gt
 8009b5a:	1a9b      	subgt	r3, r3, r2
 8009b5c:	18ed      	addgt	r5, r5, r3
 8009b5e:	2600      	movs	r6, #0
 8009b60:	341a      	adds	r4, #26
 8009b62:	42b5      	cmp	r5, r6
 8009b64:	d11a      	bne.n	8009b9c <_printf_common+0xc8>
 8009b66:	2000      	movs	r0, #0
 8009b68:	e008      	b.n	8009b7c <_printf_common+0xa8>
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	4652      	mov	r2, sl
 8009b6e:	4649      	mov	r1, r9
 8009b70:	4638      	mov	r0, r7
 8009b72:	47c0      	blx	r8
 8009b74:	3001      	adds	r0, #1
 8009b76:	d103      	bne.n	8009b80 <_printf_common+0xac>
 8009b78:	f04f 30ff 	mov.w	r0, #4294967295
 8009b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b80:	3501      	adds	r5, #1
 8009b82:	e7c6      	b.n	8009b12 <_printf_common+0x3e>
 8009b84:	18e1      	adds	r1, r4, r3
 8009b86:	1c5a      	adds	r2, r3, #1
 8009b88:	2030      	movs	r0, #48	; 0x30
 8009b8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b8e:	4422      	add	r2, r4
 8009b90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b98:	3302      	adds	r3, #2
 8009b9a:	e7c7      	b.n	8009b2c <_printf_common+0x58>
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	4622      	mov	r2, r4
 8009ba0:	4649      	mov	r1, r9
 8009ba2:	4638      	mov	r0, r7
 8009ba4:	47c0      	blx	r8
 8009ba6:	3001      	adds	r0, #1
 8009ba8:	d0e6      	beq.n	8009b78 <_printf_common+0xa4>
 8009baa:	3601      	adds	r6, #1
 8009bac:	e7d9      	b.n	8009b62 <_printf_common+0x8e>
	...

08009bb0 <_printf_i>:
 8009bb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bb4:	460c      	mov	r4, r1
 8009bb6:	4691      	mov	r9, r2
 8009bb8:	7e27      	ldrb	r7, [r4, #24]
 8009bba:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009bbc:	2f78      	cmp	r7, #120	; 0x78
 8009bbe:	4680      	mov	r8, r0
 8009bc0:	469a      	mov	sl, r3
 8009bc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009bc6:	d807      	bhi.n	8009bd8 <_printf_i+0x28>
 8009bc8:	2f62      	cmp	r7, #98	; 0x62
 8009bca:	d80a      	bhi.n	8009be2 <_printf_i+0x32>
 8009bcc:	2f00      	cmp	r7, #0
 8009bce:	f000 80d8 	beq.w	8009d82 <_printf_i+0x1d2>
 8009bd2:	2f58      	cmp	r7, #88	; 0x58
 8009bd4:	f000 80a3 	beq.w	8009d1e <_printf_i+0x16e>
 8009bd8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009bdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009be0:	e03a      	b.n	8009c58 <_printf_i+0xa8>
 8009be2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009be6:	2b15      	cmp	r3, #21
 8009be8:	d8f6      	bhi.n	8009bd8 <_printf_i+0x28>
 8009bea:	a001      	add	r0, pc, #4	; (adr r0, 8009bf0 <_printf_i+0x40>)
 8009bec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009bf0:	08009c49 	.word	0x08009c49
 8009bf4:	08009c5d 	.word	0x08009c5d
 8009bf8:	08009bd9 	.word	0x08009bd9
 8009bfc:	08009bd9 	.word	0x08009bd9
 8009c00:	08009bd9 	.word	0x08009bd9
 8009c04:	08009bd9 	.word	0x08009bd9
 8009c08:	08009c5d 	.word	0x08009c5d
 8009c0c:	08009bd9 	.word	0x08009bd9
 8009c10:	08009bd9 	.word	0x08009bd9
 8009c14:	08009bd9 	.word	0x08009bd9
 8009c18:	08009bd9 	.word	0x08009bd9
 8009c1c:	08009d69 	.word	0x08009d69
 8009c20:	08009c8d 	.word	0x08009c8d
 8009c24:	08009d4b 	.word	0x08009d4b
 8009c28:	08009bd9 	.word	0x08009bd9
 8009c2c:	08009bd9 	.word	0x08009bd9
 8009c30:	08009d8b 	.word	0x08009d8b
 8009c34:	08009bd9 	.word	0x08009bd9
 8009c38:	08009c8d 	.word	0x08009c8d
 8009c3c:	08009bd9 	.word	0x08009bd9
 8009c40:	08009bd9 	.word	0x08009bd9
 8009c44:	08009d53 	.word	0x08009d53
 8009c48:	680b      	ldr	r3, [r1, #0]
 8009c4a:	1d1a      	adds	r2, r3, #4
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	600a      	str	r2, [r1, #0]
 8009c50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009c54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e0a3      	b.n	8009da4 <_printf_i+0x1f4>
 8009c5c:	6825      	ldr	r5, [r4, #0]
 8009c5e:	6808      	ldr	r0, [r1, #0]
 8009c60:	062e      	lsls	r6, r5, #24
 8009c62:	f100 0304 	add.w	r3, r0, #4
 8009c66:	d50a      	bpl.n	8009c7e <_printf_i+0xce>
 8009c68:	6805      	ldr	r5, [r0, #0]
 8009c6a:	600b      	str	r3, [r1, #0]
 8009c6c:	2d00      	cmp	r5, #0
 8009c6e:	da03      	bge.n	8009c78 <_printf_i+0xc8>
 8009c70:	232d      	movs	r3, #45	; 0x2d
 8009c72:	426d      	negs	r5, r5
 8009c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c78:	485e      	ldr	r0, [pc, #376]	; (8009df4 <_printf_i+0x244>)
 8009c7a:	230a      	movs	r3, #10
 8009c7c:	e019      	b.n	8009cb2 <_printf_i+0x102>
 8009c7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009c82:	6805      	ldr	r5, [r0, #0]
 8009c84:	600b      	str	r3, [r1, #0]
 8009c86:	bf18      	it	ne
 8009c88:	b22d      	sxthne	r5, r5
 8009c8a:	e7ef      	b.n	8009c6c <_printf_i+0xbc>
 8009c8c:	680b      	ldr	r3, [r1, #0]
 8009c8e:	6825      	ldr	r5, [r4, #0]
 8009c90:	1d18      	adds	r0, r3, #4
 8009c92:	6008      	str	r0, [r1, #0]
 8009c94:	0628      	lsls	r0, r5, #24
 8009c96:	d501      	bpl.n	8009c9c <_printf_i+0xec>
 8009c98:	681d      	ldr	r5, [r3, #0]
 8009c9a:	e002      	b.n	8009ca2 <_printf_i+0xf2>
 8009c9c:	0669      	lsls	r1, r5, #25
 8009c9e:	d5fb      	bpl.n	8009c98 <_printf_i+0xe8>
 8009ca0:	881d      	ldrh	r5, [r3, #0]
 8009ca2:	4854      	ldr	r0, [pc, #336]	; (8009df4 <_printf_i+0x244>)
 8009ca4:	2f6f      	cmp	r7, #111	; 0x6f
 8009ca6:	bf0c      	ite	eq
 8009ca8:	2308      	moveq	r3, #8
 8009caa:	230a      	movne	r3, #10
 8009cac:	2100      	movs	r1, #0
 8009cae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009cb2:	6866      	ldr	r6, [r4, #4]
 8009cb4:	60a6      	str	r6, [r4, #8]
 8009cb6:	2e00      	cmp	r6, #0
 8009cb8:	bfa2      	ittt	ge
 8009cba:	6821      	ldrge	r1, [r4, #0]
 8009cbc:	f021 0104 	bicge.w	r1, r1, #4
 8009cc0:	6021      	strge	r1, [r4, #0]
 8009cc2:	b90d      	cbnz	r5, 8009cc8 <_printf_i+0x118>
 8009cc4:	2e00      	cmp	r6, #0
 8009cc6:	d04d      	beq.n	8009d64 <_printf_i+0x1b4>
 8009cc8:	4616      	mov	r6, r2
 8009cca:	fbb5 f1f3 	udiv	r1, r5, r3
 8009cce:	fb03 5711 	mls	r7, r3, r1, r5
 8009cd2:	5dc7      	ldrb	r7, [r0, r7]
 8009cd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009cd8:	462f      	mov	r7, r5
 8009cda:	42bb      	cmp	r3, r7
 8009cdc:	460d      	mov	r5, r1
 8009cde:	d9f4      	bls.n	8009cca <_printf_i+0x11a>
 8009ce0:	2b08      	cmp	r3, #8
 8009ce2:	d10b      	bne.n	8009cfc <_printf_i+0x14c>
 8009ce4:	6823      	ldr	r3, [r4, #0]
 8009ce6:	07df      	lsls	r7, r3, #31
 8009ce8:	d508      	bpl.n	8009cfc <_printf_i+0x14c>
 8009cea:	6923      	ldr	r3, [r4, #16]
 8009cec:	6861      	ldr	r1, [r4, #4]
 8009cee:	4299      	cmp	r1, r3
 8009cf0:	bfde      	ittt	le
 8009cf2:	2330      	movle	r3, #48	; 0x30
 8009cf4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009cf8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009cfc:	1b92      	subs	r2, r2, r6
 8009cfe:	6122      	str	r2, [r4, #16]
 8009d00:	f8cd a000 	str.w	sl, [sp]
 8009d04:	464b      	mov	r3, r9
 8009d06:	aa03      	add	r2, sp, #12
 8009d08:	4621      	mov	r1, r4
 8009d0a:	4640      	mov	r0, r8
 8009d0c:	f7ff fee2 	bl	8009ad4 <_printf_common>
 8009d10:	3001      	adds	r0, #1
 8009d12:	d14c      	bne.n	8009dae <_printf_i+0x1fe>
 8009d14:	f04f 30ff 	mov.w	r0, #4294967295
 8009d18:	b004      	add	sp, #16
 8009d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d1e:	4835      	ldr	r0, [pc, #212]	; (8009df4 <_printf_i+0x244>)
 8009d20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009d24:	6823      	ldr	r3, [r4, #0]
 8009d26:	680e      	ldr	r6, [r1, #0]
 8009d28:	061f      	lsls	r7, r3, #24
 8009d2a:	f856 5b04 	ldr.w	r5, [r6], #4
 8009d2e:	600e      	str	r6, [r1, #0]
 8009d30:	d514      	bpl.n	8009d5c <_printf_i+0x1ac>
 8009d32:	07d9      	lsls	r1, r3, #31
 8009d34:	bf44      	itt	mi
 8009d36:	f043 0320 	orrmi.w	r3, r3, #32
 8009d3a:	6023      	strmi	r3, [r4, #0]
 8009d3c:	b91d      	cbnz	r5, 8009d46 <_printf_i+0x196>
 8009d3e:	6823      	ldr	r3, [r4, #0]
 8009d40:	f023 0320 	bic.w	r3, r3, #32
 8009d44:	6023      	str	r3, [r4, #0]
 8009d46:	2310      	movs	r3, #16
 8009d48:	e7b0      	b.n	8009cac <_printf_i+0xfc>
 8009d4a:	6823      	ldr	r3, [r4, #0]
 8009d4c:	f043 0320 	orr.w	r3, r3, #32
 8009d50:	6023      	str	r3, [r4, #0]
 8009d52:	2378      	movs	r3, #120	; 0x78
 8009d54:	4828      	ldr	r0, [pc, #160]	; (8009df8 <_printf_i+0x248>)
 8009d56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d5a:	e7e3      	b.n	8009d24 <_printf_i+0x174>
 8009d5c:	065e      	lsls	r6, r3, #25
 8009d5e:	bf48      	it	mi
 8009d60:	b2ad      	uxthmi	r5, r5
 8009d62:	e7e6      	b.n	8009d32 <_printf_i+0x182>
 8009d64:	4616      	mov	r6, r2
 8009d66:	e7bb      	b.n	8009ce0 <_printf_i+0x130>
 8009d68:	680b      	ldr	r3, [r1, #0]
 8009d6a:	6826      	ldr	r6, [r4, #0]
 8009d6c:	6960      	ldr	r0, [r4, #20]
 8009d6e:	1d1d      	adds	r5, r3, #4
 8009d70:	600d      	str	r5, [r1, #0]
 8009d72:	0635      	lsls	r5, r6, #24
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	d501      	bpl.n	8009d7c <_printf_i+0x1cc>
 8009d78:	6018      	str	r0, [r3, #0]
 8009d7a:	e002      	b.n	8009d82 <_printf_i+0x1d2>
 8009d7c:	0671      	lsls	r1, r6, #25
 8009d7e:	d5fb      	bpl.n	8009d78 <_printf_i+0x1c8>
 8009d80:	8018      	strh	r0, [r3, #0]
 8009d82:	2300      	movs	r3, #0
 8009d84:	6123      	str	r3, [r4, #16]
 8009d86:	4616      	mov	r6, r2
 8009d88:	e7ba      	b.n	8009d00 <_printf_i+0x150>
 8009d8a:	680b      	ldr	r3, [r1, #0]
 8009d8c:	1d1a      	adds	r2, r3, #4
 8009d8e:	600a      	str	r2, [r1, #0]
 8009d90:	681e      	ldr	r6, [r3, #0]
 8009d92:	6862      	ldr	r2, [r4, #4]
 8009d94:	2100      	movs	r1, #0
 8009d96:	4630      	mov	r0, r6
 8009d98:	f7f6 faa2 	bl	80002e0 <memchr>
 8009d9c:	b108      	cbz	r0, 8009da2 <_printf_i+0x1f2>
 8009d9e:	1b80      	subs	r0, r0, r6
 8009da0:	6060      	str	r0, [r4, #4]
 8009da2:	6863      	ldr	r3, [r4, #4]
 8009da4:	6123      	str	r3, [r4, #16]
 8009da6:	2300      	movs	r3, #0
 8009da8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dac:	e7a8      	b.n	8009d00 <_printf_i+0x150>
 8009dae:	6923      	ldr	r3, [r4, #16]
 8009db0:	4632      	mov	r2, r6
 8009db2:	4649      	mov	r1, r9
 8009db4:	4640      	mov	r0, r8
 8009db6:	47d0      	blx	sl
 8009db8:	3001      	adds	r0, #1
 8009dba:	d0ab      	beq.n	8009d14 <_printf_i+0x164>
 8009dbc:	6823      	ldr	r3, [r4, #0]
 8009dbe:	079b      	lsls	r3, r3, #30
 8009dc0:	d413      	bmi.n	8009dea <_printf_i+0x23a>
 8009dc2:	68e0      	ldr	r0, [r4, #12]
 8009dc4:	9b03      	ldr	r3, [sp, #12]
 8009dc6:	4298      	cmp	r0, r3
 8009dc8:	bfb8      	it	lt
 8009dca:	4618      	movlt	r0, r3
 8009dcc:	e7a4      	b.n	8009d18 <_printf_i+0x168>
 8009dce:	2301      	movs	r3, #1
 8009dd0:	4632      	mov	r2, r6
 8009dd2:	4649      	mov	r1, r9
 8009dd4:	4640      	mov	r0, r8
 8009dd6:	47d0      	blx	sl
 8009dd8:	3001      	adds	r0, #1
 8009dda:	d09b      	beq.n	8009d14 <_printf_i+0x164>
 8009ddc:	3501      	adds	r5, #1
 8009dde:	68e3      	ldr	r3, [r4, #12]
 8009de0:	9903      	ldr	r1, [sp, #12]
 8009de2:	1a5b      	subs	r3, r3, r1
 8009de4:	42ab      	cmp	r3, r5
 8009de6:	dcf2      	bgt.n	8009dce <_printf_i+0x21e>
 8009de8:	e7eb      	b.n	8009dc2 <_printf_i+0x212>
 8009dea:	2500      	movs	r5, #0
 8009dec:	f104 0619 	add.w	r6, r4, #25
 8009df0:	e7f5      	b.n	8009dde <_printf_i+0x22e>
 8009df2:	bf00      	nop
 8009df4:	0800a4c1 	.word	0x0800a4c1
 8009df8:	0800a4d2 	.word	0x0800a4d2

08009dfc <_sbrk_r>:
 8009dfc:	b538      	push	{r3, r4, r5, lr}
 8009dfe:	4d06      	ldr	r5, [pc, #24]	; (8009e18 <_sbrk_r+0x1c>)
 8009e00:	2300      	movs	r3, #0
 8009e02:	4604      	mov	r4, r0
 8009e04:	4608      	mov	r0, r1
 8009e06:	602b      	str	r3, [r5, #0]
 8009e08:	f7f7 f9fc 	bl	8001204 <_sbrk>
 8009e0c:	1c43      	adds	r3, r0, #1
 8009e0e:	d102      	bne.n	8009e16 <_sbrk_r+0x1a>
 8009e10:	682b      	ldr	r3, [r5, #0]
 8009e12:	b103      	cbz	r3, 8009e16 <_sbrk_r+0x1a>
 8009e14:	6023      	str	r3, [r4, #0]
 8009e16:	bd38      	pop	{r3, r4, r5, pc}
 8009e18:	24000744 	.word	0x24000744

08009e1c <__sread>:
 8009e1c:	b510      	push	{r4, lr}
 8009e1e:	460c      	mov	r4, r1
 8009e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e24:	f000 fab4 	bl	800a390 <_read_r>
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	bfab      	itete	ge
 8009e2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e2e:	89a3      	ldrhlt	r3, [r4, #12]
 8009e30:	181b      	addge	r3, r3, r0
 8009e32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e36:	bfac      	ite	ge
 8009e38:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e3a:	81a3      	strhlt	r3, [r4, #12]
 8009e3c:	bd10      	pop	{r4, pc}

08009e3e <__swrite>:
 8009e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e42:	461f      	mov	r7, r3
 8009e44:	898b      	ldrh	r3, [r1, #12]
 8009e46:	05db      	lsls	r3, r3, #23
 8009e48:	4605      	mov	r5, r0
 8009e4a:	460c      	mov	r4, r1
 8009e4c:	4616      	mov	r6, r2
 8009e4e:	d505      	bpl.n	8009e5c <__swrite+0x1e>
 8009e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e54:	2302      	movs	r3, #2
 8009e56:	2200      	movs	r2, #0
 8009e58:	f000 f9c8 	bl	800a1ec <_lseek_r>
 8009e5c:	89a3      	ldrh	r3, [r4, #12]
 8009e5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e66:	81a3      	strh	r3, [r4, #12]
 8009e68:	4632      	mov	r2, r6
 8009e6a:	463b      	mov	r3, r7
 8009e6c:	4628      	mov	r0, r5
 8009e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e72:	f000 b869 	b.w	8009f48 <_write_r>

08009e76 <__sseek>:
 8009e76:	b510      	push	{r4, lr}
 8009e78:	460c      	mov	r4, r1
 8009e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e7e:	f000 f9b5 	bl	800a1ec <_lseek_r>
 8009e82:	1c43      	adds	r3, r0, #1
 8009e84:	89a3      	ldrh	r3, [r4, #12]
 8009e86:	bf15      	itete	ne
 8009e88:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e92:	81a3      	strheq	r3, [r4, #12]
 8009e94:	bf18      	it	ne
 8009e96:	81a3      	strhne	r3, [r4, #12]
 8009e98:	bd10      	pop	{r4, pc}

08009e9a <__sclose>:
 8009e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e9e:	f000 b8d3 	b.w	800a048 <_close_r>
	...

08009ea4 <__swbuf_r>:
 8009ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ea6:	460e      	mov	r6, r1
 8009ea8:	4614      	mov	r4, r2
 8009eaa:	4605      	mov	r5, r0
 8009eac:	b118      	cbz	r0, 8009eb6 <__swbuf_r+0x12>
 8009eae:	6983      	ldr	r3, [r0, #24]
 8009eb0:	b90b      	cbnz	r3, 8009eb6 <__swbuf_r+0x12>
 8009eb2:	f7ff fbbb 	bl	800962c <__sinit>
 8009eb6:	4b21      	ldr	r3, [pc, #132]	; (8009f3c <__swbuf_r+0x98>)
 8009eb8:	429c      	cmp	r4, r3
 8009eba:	d12b      	bne.n	8009f14 <__swbuf_r+0x70>
 8009ebc:	686c      	ldr	r4, [r5, #4]
 8009ebe:	69a3      	ldr	r3, [r4, #24]
 8009ec0:	60a3      	str	r3, [r4, #8]
 8009ec2:	89a3      	ldrh	r3, [r4, #12]
 8009ec4:	071a      	lsls	r2, r3, #28
 8009ec6:	d52f      	bpl.n	8009f28 <__swbuf_r+0x84>
 8009ec8:	6923      	ldr	r3, [r4, #16]
 8009eca:	b36b      	cbz	r3, 8009f28 <__swbuf_r+0x84>
 8009ecc:	6923      	ldr	r3, [r4, #16]
 8009ece:	6820      	ldr	r0, [r4, #0]
 8009ed0:	1ac0      	subs	r0, r0, r3
 8009ed2:	6963      	ldr	r3, [r4, #20]
 8009ed4:	b2f6      	uxtb	r6, r6
 8009ed6:	4283      	cmp	r3, r0
 8009ed8:	4637      	mov	r7, r6
 8009eda:	dc04      	bgt.n	8009ee6 <__swbuf_r+0x42>
 8009edc:	4621      	mov	r1, r4
 8009ede:	4628      	mov	r0, r5
 8009ee0:	f000 f948 	bl	800a174 <_fflush_r>
 8009ee4:	bb30      	cbnz	r0, 8009f34 <__swbuf_r+0x90>
 8009ee6:	68a3      	ldr	r3, [r4, #8]
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	60a3      	str	r3, [r4, #8]
 8009eec:	6823      	ldr	r3, [r4, #0]
 8009eee:	1c5a      	adds	r2, r3, #1
 8009ef0:	6022      	str	r2, [r4, #0]
 8009ef2:	701e      	strb	r6, [r3, #0]
 8009ef4:	6963      	ldr	r3, [r4, #20]
 8009ef6:	3001      	adds	r0, #1
 8009ef8:	4283      	cmp	r3, r0
 8009efa:	d004      	beq.n	8009f06 <__swbuf_r+0x62>
 8009efc:	89a3      	ldrh	r3, [r4, #12]
 8009efe:	07db      	lsls	r3, r3, #31
 8009f00:	d506      	bpl.n	8009f10 <__swbuf_r+0x6c>
 8009f02:	2e0a      	cmp	r6, #10
 8009f04:	d104      	bne.n	8009f10 <__swbuf_r+0x6c>
 8009f06:	4621      	mov	r1, r4
 8009f08:	4628      	mov	r0, r5
 8009f0a:	f000 f933 	bl	800a174 <_fflush_r>
 8009f0e:	b988      	cbnz	r0, 8009f34 <__swbuf_r+0x90>
 8009f10:	4638      	mov	r0, r7
 8009f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f14:	4b0a      	ldr	r3, [pc, #40]	; (8009f40 <__swbuf_r+0x9c>)
 8009f16:	429c      	cmp	r4, r3
 8009f18:	d101      	bne.n	8009f1e <__swbuf_r+0x7a>
 8009f1a:	68ac      	ldr	r4, [r5, #8]
 8009f1c:	e7cf      	b.n	8009ebe <__swbuf_r+0x1a>
 8009f1e:	4b09      	ldr	r3, [pc, #36]	; (8009f44 <__swbuf_r+0xa0>)
 8009f20:	429c      	cmp	r4, r3
 8009f22:	bf08      	it	eq
 8009f24:	68ec      	ldreq	r4, [r5, #12]
 8009f26:	e7ca      	b.n	8009ebe <__swbuf_r+0x1a>
 8009f28:	4621      	mov	r1, r4
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	f000 f81e 	bl	8009f6c <__swsetup_r>
 8009f30:	2800      	cmp	r0, #0
 8009f32:	d0cb      	beq.n	8009ecc <__swbuf_r+0x28>
 8009f34:	f04f 37ff 	mov.w	r7, #4294967295
 8009f38:	e7ea      	b.n	8009f10 <__swbuf_r+0x6c>
 8009f3a:	bf00      	nop
 8009f3c:	0800a470 	.word	0x0800a470
 8009f40:	0800a490 	.word	0x0800a490
 8009f44:	0800a450 	.word	0x0800a450

08009f48 <_write_r>:
 8009f48:	b538      	push	{r3, r4, r5, lr}
 8009f4a:	4d07      	ldr	r5, [pc, #28]	; (8009f68 <_write_r+0x20>)
 8009f4c:	4604      	mov	r4, r0
 8009f4e:	4608      	mov	r0, r1
 8009f50:	4611      	mov	r1, r2
 8009f52:	2200      	movs	r2, #0
 8009f54:	602a      	str	r2, [r5, #0]
 8009f56:	461a      	mov	r2, r3
 8009f58:	f7f7 f903 	bl	8001162 <_write>
 8009f5c:	1c43      	adds	r3, r0, #1
 8009f5e:	d102      	bne.n	8009f66 <_write_r+0x1e>
 8009f60:	682b      	ldr	r3, [r5, #0]
 8009f62:	b103      	cbz	r3, 8009f66 <_write_r+0x1e>
 8009f64:	6023      	str	r3, [r4, #0]
 8009f66:	bd38      	pop	{r3, r4, r5, pc}
 8009f68:	24000744 	.word	0x24000744

08009f6c <__swsetup_r>:
 8009f6c:	4b32      	ldr	r3, [pc, #200]	; (800a038 <__swsetup_r+0xcc>)
 8009f6e:	b570      	push	{r4, r5, r6, lr}
 8009f70:	681d      	ldr	r5, [r3, #0]
 8009f72:	4606      	mov	r6, r0
 8009f74:	460c      	mov	r4, r1
 8009f76:	b125      	cbz	r5, 8009f82 <__swsetup_r+0x16>
 8009f78:	69ab      	ldr	r3, [r5, #24]
 8009f7a:	b913      	cbnz	r3, 8009f82 <__swsetup_r+0x16>
 8009f7c:	4628      	mov	r0, r5
 8009f7e:	f7ff fb55 	bl	800962c <__sinit>
 8009f82:	4b2e      	ldr	r3, [pc, #184]	; (800a03c <__swsetup_r+0xd0>)
 8009f84:	429c      	cmp	r4, r3
 8009f86:	d10f      	bne.n	8009fa8 <__swsetup_r+0x3c>
 8009f88:	686c      	ldr	r4, [r5, #4]
 8009f8a:	89a3      	ldrh	r3, [r4, #12]
 8009f8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f90:	0719      	lsls	r1, r3, #28
 8009f92:	d42c      	bmi.n	8009fee <__swsetup_r+0x82>
 8009f94:	06dd      	lsls	r5, r3, #27
 8009f96:	d411      	bmi.n	8009fbc <__swsetup_r+0x50>
 8009f98:	2309      	movs	r3, #9
 8009f9a:	6033      	str	r3, [r6, #0]
 8009f9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009fa0:	81a3      	strh	r3, [r4, #12]
 8009fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa6:	e03e      	b.n	800a026 <__swsetup_r+0xba>
 8009fa8:	4b25      	ldr	r3, [pc, #148]	; (800a040 <__swsetup_r+0xd4>)
 8009faa:	429c      	cmp	r4, r3
 8009fac:	d101      	bne.n	8009fb2 <__swsetup_r+0x46>
 8009fae:	68ac      	ldr	r4, [r5, #8]
 8009fb0:	e7eb      	b.n	8009f8a <__swsetup_r+0x1e>
 8009fb2:	4b24      	ldr	r3, [pc, #144]	; (800a044 <__swsetup_r+0xd8>)
 8009fb4:	429c      	cmp	r4, r3
 8009fb6:	bf08      	it	eq
 8009fb8:	68ec      	ldreq	r4, [r5, #12]
 8009fba:	e7e6      	b.n	8009f8a <__swsetup_r+0x1e>
 8009fbc:	0758      	lsls	r0, r3, #29
 8009fbe:	d512      	bpl.n	8009fe6 <__swsetup_r+0x7a>
 8009fc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fc2:	b141      	cbz	r1, 8009fd6 <__swsetup_r+0x6a>
 8009fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fc8:	4299      	cmp	r1, r3
 8009fca:	d002      	beq.n	8009fd2 <__swsetup_r+0x66>
 8009fcc:	4630      	mov	r0, r6
 8009fce:	f000 f98f 	bl	800a2f0 <_free_r>
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	6363      	str	r3, [r4, #52]	; 0x34
 8009fd6:	89a3      	ldrh	r3, [r4, #12]
 8009fd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009fdc:	81a3      	strh	r3, [r4, #12]
 8009fde:	2300      	movs	r3, #0
 8009fe0:	6063      	str	r3, [r4, #4]
 8009fe2:	6923      	ldr	r3, [r4, #16]
 8009fe4:	6023      	str	r3, [r4, #0]
 8009fe6:	89a3      	ldrh	r3, [r4, #12]
 8009fe8:	f043 0308 	orr.w	r3, r3, #8
 8009fec:	81a3      	strh	r3, [r4, #12]
 8009fee:	6923      	ldr	r3, [r4, #16]
 8009ff0:	b94b      	cbnz	r3, 800a006 <__swsetup_r+0x9a>
 8009ff2:	89a3      	ldrh	r3, [r4, #12]
 8009ff4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ffc:	d003      	beq.n	800a006 <__swsetup_r+0x9a>
 8009ffe:	4621      	mov	r1, r4
 800a000:	4630      	mov	r0, r6
 800a002:	f000 f929 	bl	800a258 <__smakebuf_r>
 800a006:	89a0      	ldrh	r0, [r4, #12]
 800a008:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a00c:	f010 0301 	ands.w	r3, r0, #1
 800a010:	d00a      	beq.n	800a028 <__swsetup_r+0xbc>
 800a012:	2300      	movs	r3, #0
 800a014:	60a3      	str	r3, [r4, #8]
 800a016:	6963      	ldr	r3, [r4, #20]
 800a018:	425b      	negs	r3, r3
 800a01a:	61a3      	str	r3, [r4, #24]
 800a01c:	6923      	ldr	r3, [r4, #16]
 800a01e:	b943      	cbnz	r3, 800a032 <__swsetup_r+0xc6>
 800a020:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a024:	d1ba      	bne.n	8009f9c <__swsetup_r+0x30>
 800a026:	bd70      	pop	{r4, r5, r6, pc}
 800a028:	0781      	lsls	r1, r0, #30
 800a02a:	bf58      	it	pl
 800a02c:	6963      	ldrpl	r3, [r4, #20]
 800a02e:	60a3      	str	r3, [r4, #8]
 800a030:	e7f4      	b.n	800a01c <__swsetup_r+0xb0>
 800a032:	2000      	movs	r0, #0
 800a034:	e7f7      	b.n	800a026 <__swsetup_r+0xba>
 800a036:	bf00      	nop
 800a038:	24000010 	.word	0x24000010
 800a03c:	0800a470 	.word	0x0800a470
 800a040:	0800a490 	.word	0x0800a490
 800a044:	0800a450 	.word	0x0800a450

0800a048 <_close_r>:
 800a048:	b538      	push	{r3, r4, r5, lr}
 800a04a:	4d06      	ldr	r5, [pc, #24]	; (800a064 <_close_r+0x1c>)
 800a04c:	2300      	movs	r3, #0
 800a04e:	4604      	mov	r4, r0
 800a050:	4608      	mov	r0, r1
 800a052:	602b      	str	r3, [r5, #0]
 800a054:	f7f7 f8a1 	bl	800119a <_close>
 800a058:	1c43      	adds	r3, r0, #1
 800a05a:	d102      	bne.n	800a062 <_close_r+0x1a>
 800a05c:	682b      	ldr	r3, [r5, #0]
 800a05e:	b103      	cbz	r3, 800a062 <_close_r+0x1a>
 800a060:	6023      	str	r3, [r4, #0]
 800a062:	bd38      	pop	{r3, r4, r5, pc}
 800a064:	24000744 	.word	0x24000744

0800a068 <__sflush_r>:
 800a068:	898a      	ldrh	r2, [r1, #12]
 800a06a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a06e:	4605      	mov	r5, r0
 800a070:	0710      	lsls	r0, r2, #28
 800a072:	460c      	mov	r4, r1
 800a074:	d458      	bmi.n	800a128 <__sflush_r+0xc0>
 800a076:	684b      	ldr	r3, [r1, #4]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	dc05      	bgt.n	800a088 <__sflush_r+0x20>
 800a07c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a07e:	2b00      	cmp	r3, #0
 800a080:	dc02      	bgt.n	800a088 <__sflush_r+0x20>
 800a082:	2000      	movs	r0, #0
 800a084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a088:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a08a:	2e00      	cmp	r6, #0
 800a08c:	d0f9      	beq.n	800a082 <__sflush_r+0x1a>
 800a08e:	2300      	movs	r3, #0
 800a090:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a094:	682f      	ldr	r7, [r5, #0]
 800a096:	602b      	str	r3, [r5, #0]
 800a098:	d032      	beq.n	800a100 <__sflush_r+0x98>
 800a09a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a09c:	89a3      	ldrh	r3, [r4, #12]
 800a09e:	075a      	lsls	r2, r3, #29
 800a0a0:	d505      	bpl.n	800a0ae <__sflush_r+0x46>
 800a0a2:	6863      	ldr	r3, [r4, #4]
 800a0a4:	1ac0      	subs	r0, r0, r3
 800a0a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0a8:	b10b      	cbz	r3, 800a0ae <__sflush_r+0x46>
 800a0aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0ac:	1ac0      	subs	r0, r0, r3
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0b4:	6a21      	ldr	r1, [r4, #32]
 800a0b6:	4628      	mov	r0, r5
 800a0b8:	47b0      	blx	r6
 800a0ba:	1c43      	adds	r3, r0, #1
 800a0bc:	89a3      	ldrh	r3, [r4, #12]
 800a0be:	d106      	bne.n	800a0ce <__sflush_r+0x66>
 800a0c0:	6829      	ldr	r1, [r5, #0]
 800a0c2:	291d      	cmp	r1, #29
 800a0c4:	d82c      	bhi.n	800a120 <__sflush_r+0xb8>
 800a0c6:	4a2a      	ldr	r2, [pc, #168]	; (800a170 <__sflush_r+0x108>)
 800a0c8:	40ca      	lsrs	r2, r1
 800a0ca:	07d6      	lsls	r6, r2, #31
 800a0cc:	d528      	bpl.n	800a120 <__sflush_r+0xb8>
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	6062      	str	r2, [r4, #4]
 800a0d2:	04d9      	lsls	r1, r3, #19
 800a0d4:	6922      	ldr	r2, [r4, #16]
 800a0d6:	6022      	str	r2, [r4, #0]
 800a0d8:	d504      	bpl.n	800a0e4 <__sflush_r+0x7c>
 800a0da:	1c42      	adds	r2, r0, #1
 800a0dc:	d101      	bne.n	800a0e2 <__sflush_r+0x7a>
 800a0de:	682b      	ldr	r3, [r5, #0]
 800a0e0:	b903      	cbnz	r3, 800a0e4 <__sflush_r+0x7c>
 800a0e2:	6560      	str	r0, [r4, #84]	; 0x54
 800a0e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0e6:	602f      	str	r7, [r5, #0]
 800a0e8:	2900      	cmp	r1, #0
 800a0ea:	d0ca      	beq.n	800a082 <__sflush_r+0x1a>
 800a0ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0f0:	4299      	cmp	r1, r3
 800a0f2:	d002      	beq.n	800a0fa <__sflush_r+0x92>
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	f000 f8fb 	bl	800a2f0 <_free_r>
 800a0fa:	2000      	movs	r0, #0
 800a0fc:	6360      	str	r0, [r4, #52]	; 0x34
 800a0fe:	e7c1      	b.n	800a084 <__sflush_r+0x1c>
 800a100:	6a21      	ldr	r1, [r4, #32]
 800a102:	2301      	movs	r3, #1
 800a104:	4628      	mov	r0, r5
 800a106:	47b0      	blx	r6
 800a108:	1c41      	adds	r1, r0, #1
 800a10a:	d1c7      	bne.n	800a09c <__sflush_r+0x34>
 800a10c:	682b      	ldr	r3, [r5, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d0c4      	beq.n	800a09c <__sflush_r+0x34>
 800a112:	2b1d      	cmp	r3, #29
 800a114:	d001      	beq.n	800a11a <__sflush_r+0xb2>
 800a116:	2b16      	cmp	r3, #22
 800a118:	d101      	bne.n	800a11e <__sflush_r+0xb6>
 800a11a:	602f      	str	r7, [r5, #0]
 800a11c:	e7b1      	b.n	800a082 <__sflush_r+0x1a>
 800a11e:	89a3      	ldrh	r3, [r4, #12]
 800a120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a124:	81a3      	strh	r3, [r4, #12]
 800a126:	e7ad      	b.n	800a084 <__sflush_r+0x1c>
 800a128:	690f      	ldr	r7, [r1, #16]
 800a12a:	2f00      	cmp	r7, #0
 800a12c:	d0a9      	beq.n	800a082 <__sflush_r+0x1a>
 800a12e:	0793      	lsls	r3, r2, #30
 800a130:	680e      	ldr	r6, [r1, #0]
 800a132:	bf08      	it	eq
 800a134:	694b      	ldreq	r3, [r1, #20]
 800a136:	600f      	str	r7, [r1, #0]
 800a138:	bf18      	it	ne
 800a13a:	2300      	movne	r3, #0
 800a13c:	eba6 0807 	sub.w	r8, r6, r7
 800a140:	608b      	str	r3, [r1, #8]
 800a142:	f1b8 0f00 	cmp.w	r8, #0
 800a146:	dd9c      	ble.n	800a082 <__sflush_r+0x1a>
 800a148:	6a21      	ldr	r1, [r4, #32]
 800a14a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a14c:	4643      	mov	r3, r8
 800a14e:	463a      	mov	r2, r7
 800a150:	4628      	mov	r0, r5
 800a152:	47b0      	blx	r6
 800a154:	2800      	cmp	r0, #0
 800a156:	dc06      	bgt.n	800a166 <__sflush_r+0xfe>
 800a158:	89a3      	ldrh	r3, [r4, #12]
 800a15a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a15e:	81a3      	strh	r3, [r4, #12]
 800a160:	f04f 30ff 	mov.w	r0, #4294967295
 800a164:	e78e      	b.n	800a084 <__sflush_r+0x1c>
 800a166:	4407      	add	r7, r0
 800a168:	eba8 0800 	sub.w	r8, r8, r0
 800a16c:	e7e9      	b.n	800a142 <__sflush_r+0xda>
 800a16e:	bf00      	nop
 800a170:	20400001 	.word	0x20400001

0800a174 <_fflush_r>:
 800a174:	b538      	push	{r3, r4, r5, lr}
 800a176:	690b      	ldr	r3, [r1, #16]
 800a178:	4605      	mov	r5, r0
 800a17a:	460c      	mov	r4, r1
 800a17c:	b913      	cbnz	r3, 800a184 <_fflush_r+0x10>
 800a17e:	2500      	movs	r5, #0
 800a180:	4628      	mov	r0, r5
 800a182:	bd38      	pop	{r3, r4, r5, pc}
 800a184:	b118      	cbz	r0, 800a18e <_fflush_r+0x1a>
 800a186:	6983      	ldr	r3, [r0, #24]
 800a188:	b90b      	cbnz	r3, 800a18e <_fflush_r+0x1a>
 800a18a:	f7ff fa4f 	bl	800962c <__sinit>
 800a18e:	4b14      	ldr	r3, [pc, #80]	; (800a1e0 <_fflush_r+0x6c>)
 800a190:	429c      	cmp	r4, r3
 800a192:	d11b      	bne.n	800a1cc <_fflush_r+0x58>
 800a194:	686c      	ldr	r4, [r5, #4]
 800a196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d0ef      	beq.n	800a17e <_fflush_r+0xa>
 800a19e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a1a0:	07d0      	lsls	r0, r2, #31
 800a1a2:	d404      	bmi.n	800a1ae <_fflush_r+0x3a>
 800a1a4:	0599      	lsls	r1, r3, #22
 800a1a6:	d402      	bmi.n	800a1ae <_fflush_r+0x3a>
 800a1a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1aa:	f7ff fadd 	bl	8009768 <__retarget_lock_acquire_recursive>
 800a1ae:	4628      	mov	r0, r5
 800a1b0:	4621      	mov	r1, r4
 800a1b2:	f7ff ff59 	bl	800a068 <__sflush_r>
 800a1b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1b8:	07da      	lsls	r2, r3, #31
 800a1ba:	4605      	mov	r5, r0
 800a1bc:	d4e0      	bmi.n	800a180 <_fflush_r+0xc>
 800a1be:	89a3      	ldrh	r3, [r4, #12]
 800a1c0:	059b      	lsls	r3, r3, #22
 800a1c2:	d4dd      	bmi.n	800a180 <_fflush_r+0xc>
 800a1c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1c6:	f7ff fad0 	bl	800976a <__retarget_lock_release_recursive>
 800a1ca:	e7d9      	b.n	800a180 <_fflush_r+0xc>
 800a1cc:	4b05      	ldr	r3, [pc, #20]	; (800a1e4 <_fflush_r+0x70>)
 800a1ce:	429c      	cmp	r4, r3
 800a1d0:	d101      	bne.n	800a1d6 <_fflush_r+0x62>
 800a1d2:	68ac      	ldr	r4, [r5, #8]
 800a1d4:	e7df      	b.n	800a196 <_fflush_r+0x22>
 800a1d6:	4b04      	ldr	r3, [pc, #16]	; (800a1e8 <_fflush_r+0x74>)
 800a1d8:	429c      	cmp	r4, r3
 800a1da:	bf08      	it	eq
 800a1dc:	68ec      	ldreq	r4, [r5, #12]
 800a1de:	e7da      	b.n	800a196 <_fflush_r+0x22>
 800a1e0:	0800a470 	.word	0x0800a470
 800a1e4:	0800a490 	.word	0x0800a490
 800a1e8:	0800a450 	.word	0x0800a450

0800a1ec <_lseek_r>:
 800a1ec:	b538      	push	{r3, r4, r5, lr}
 800a1ee:	4d07      	ldr	r5, [pc, #28]	; (800a20c <_lseek_r+0x20>)
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	4608      	mov	r0, r1
 800a1f4:	4611      	mov	r1, r2
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	602a      	str	r2, [r5, #0]
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	f7f6 fff4 	bl	80011e8 <_lseek>
 800a200:	1c43      	adds	r3, r0, #1
 800a202:	d102      	bne.n	800a20a <_lseek_r+0x1e>
 800a204:	682b      	ldr	r3, [r5, #0]
 800a206:	b103      	cbz	r3, 800a20a <_lseek_r+0x1e>
 800a208:	6023      	str	r3, [r4, #0]
 800a20a:	bd38      	pop	{r3, r4, r5, pc}
 800a20c:	24000744 	.word	0x24000744

0800a210 <__swhatbuf_r>:
 800a210:	b570      	push	{r4, r5, r6, lr}
 800a212:	460e      	mov	r6, r1
 800a214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a218:	2900      	cmp	r1, #0
 800a21a:	b096      	sub	sp, #88	; 0x58
 800a21c:	4614      	mov	r4, r2
 800a21e:	461d      	mov	r5, r3
 800a220:	da07      	bge.n	800a232 <__swhatbuf_r+0x22>
 800a222:	2300      	movs	r3, #0
 800a224:	602b      	str	r3, [r5, #0]
 800a226:	89b3      	ldrh	r3, [r6, #12]
 800a228:	061a      	lsls	r2, r3, #24
 800a22a:	d410      	bmi.n	800a24e <__swhatbuf_r+0x3e>
 800a22c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a230:	e00e      	b.n	800a250 <__swhatbuf_r+0x40>
 800a232:	466a      	mov	r2, sp
 800a234:	f000 f8be 	bl	800a3b4 <_fstat_r>
 800a238:	2800      	cmp	r0, #0
 800a23a:	dbf2      	blt.n	800a222 <__swhatbuf_r+0x12>
 800a23c:	9a01      	ldr	r2, [sp, #4]
 800a23e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a242:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a246:	425a      	negs	r2, r3
 800a248:	415a      	adcs	r2, r3
 800a24a:	602a      	str	r2, [r5, #0]
 800a24c:	e7ee      	b.n	800a22c <__swhatbuf_r+0x1c>
 800a24e:	2340      	movs	r3, #64	; 0x40
 800a250:	2000      	movs	r0, #0
 800a252:	6023      	str	r3, [r4, #0]
 800a254:	b016      	add	sp, #88	; 0x58
 800a256:	bd70      	pop	{r4, r5, r6, pc}

0800a258 <__smakebuf_r>:
 800a258:	898b      	ldrh	r3, [r1, #12]
 800a25a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a25c:	079d      	lsls	r5, r3, #30
 800a25e:	4606      	mov	r6, r0
 800a260:	460c      	mov	r4, r1
 800a262:	d507      	bpl.n	800a274 <__smakebuf_r+0x1c>
 800a264:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a268:	6023      	str	r3, [r4, #0]
 800a26a:	6123      	str	r3, [r4, #16]
 800a26c:	2301      	movs	r3, #1
 800a26e:	6163      	str	r3, [r4, #20]
 800a270:	b002      	add	sp, #8
 800a272:	bd70      	pop	{r4, r5, r6, pc}
 800a274:	ab01      	add	r3, sp, #4
 800a276:	466a      	mov	r2, sp
 800a278:	f7ff ffca 	bl	800a210 <__swhatbuf_r>
 800a27c:	9900      	ldr	r1, [sp, #0]
 800a27e:	4605      	mov	r5, r0
 800a280:	4630      	mov	r0, r6
 800a282:	f7ff fa73 	bl	800976c <_malloc_r>
 800a286:	b948      	cbnz	r0, 800a29c <__smakebuf_r+0x44>
 800a288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a28c:	059a      	lsls	r2, r3, #22
 800a28e:	d4ef      	bmi.n	800a270 <__smakebuf_r+0x18>
 800a290:	f023 0303 	bic.w	r3, r3, #3
 800a294:	f043 0302 	orr.w	r3, r3, #2
 800a298:	81a3      	strh	r3, [r4, #12]
 800a29a:	e7e3      	b.n	800a264 <__smakebuf_r+0xc>
 800a29c:	4b0d      	ldr	r3, [pc, #52]	; (800a2d4 <__smakebuf_r+0x7c>)
 800a29e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a2a0:	89a3      	ldrh	r3, [r4, #12]
 800a2a2:	6020      	str	r0, [r4, #0]
 800a2a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2a8:	81a3      	strh	r3, [r4, #12]
 800a2aa:	9b00      	ldr	r3, [sp, #0]
 800a2ac:	6163      	str	r3, [r4, #20]
 800a2ae:	9b01      	ldr	r3, [sp, #4]
 800a2b0:	6120      	str	r0, [r4, #16]
 800a2b2:	b15b      	cbz	r3, 800a2cc <__smakebuf_r+0x74>
 800a2b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2b8:	4630      	mov	r0, r6
 800a2ba:	f000 f88d 	bl	800a3d8 <_isatty_r>
 800a2be:	b128      	cbz	r0, 800a2cc <__smakebuf_r+0x74>
 800a2c0:	89a3      	ldrh	r3, [r4, #12]
 800a2c2:	f023 0303 	bic.w	r3, r3, #3
 800a2c6:	f043 0301 	orr.w	r3, r3, #1
 800a2ca:	81a3      	strh	r3, [r4, #12]
 800a2cc:	89a0      	ldrh	r0, [r4, #12]
 800a2ce:	4305      	orrs	r5, r0
 800a2d0:	81a5      	strh	r5, [r4, #12]
 800a2d2:	e7cd      	b.n	800a270 <__smakebuf_r+0x18>
 800a2d4:	080095c5 	.word	0x080095c5

0800a2d8 <__malloc_lock>:
 800a2d8:	4801      	ldr	r0, [pc, #4]	; (800a2e0 <__malloc_lock+0x8>)
 800a2da:	f7ff ba45 	b.w	8009768 <__retarget_lock_acquire_recursive>
 800a2de:	bf00      	nop
 800a2e0:	2400073c 	.word	0x2400073c

0800a2e4 <__malloc_unlock>:
 800a2e4:	4801      	ldr	r0, [pc, #4]	; (800a2ec <__malloc_unlock+0x8>)
 800a2e6:	f7ff ba40 	b.w	800976a <__retarget_lock_release_recursive>
 800a2ea:	bf00      	nop
 800a2ec:	2400073c 	.word	0x2400073c

0800a2f0 <_free_r>:
 800a2f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2f2:	2900      	cmp	r1, #0
 800a2f4:	d048      	beq.n	800a388 <_free_r+0x98>
 800a2f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2fa:	9001      	str	r0, [sp, #4]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	f1a1 0404 	sub.w	r4, r1, #4
 800a302:	bfb8      	it	lt
 800a304:	18e4      	addlt	r4, r4, r3
 800a306:	f7ff ffe7 	bl	800a2d8 <__malloc_lock>
 800a30a:	4a20      	ldr	r2, [pc, #128]	; (800a38c <_free_r+0x9c>)
 800a30c:	9801      	ldr	r0, [sp, #4]
 800a30e:	6813      	ldr	r3, [r2, #0]
 800a310:	4615      	mov	r5, r2
 800a312:	b933      	cbnz	r3, 800a322 <_free_r+0x32>
 800a314:	6063      	str	r3, [r4, #4]
 800a316:	6014      	str	r4, [r2, #0]
 800a318:	b003      	add	sp, #12
 800a31a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a31e:	f7ff bfe1 	b.w	800a2e4 <__malloc_unlock>
 800a322:	42a3      	cmp	r3, r4
 800a324:	d90b      	bls.n	800a33e <_free_r+0x4e>
 800a326:	6821      	ldr	r1, [r4, #0]
 800a328:	1862      	adds	r2, r4, r1
 800a32a:	4293      	cmp	r3, r2
 800a32c:	bf04      	itt	eq
 800a32e:	681a      	ldreq	r2, [r3, #0]
 800a330:	685b      	ldreq	r3, [r3, #4]
 800a332:	6063      	str	r3, [r4, #4]
 800a334:	bf04      	itt	eq
 800a336:	1852      	addeq	r2, r2, r1
 800a338:	6022      	streq	r2, [r4, #0]
 800a33a:	602c      	str	r4, [r5, #0]
 800a33c:	e7ec      	b.n	800a318 <_free_r+0x28>
 800a33e:	461a      	mov	r2, r3
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	b10b      	cbz	r3, 800a348 <_free_r+0x58>
 800a344:	42a3      	cmp	r3, r4
 800a346:	d9fa      	bls.n	800a33e <_free_r+0x4e>
 800a348:	6811      	ldr	r1, [r2, #0]
 800a34a:	1855      	adds	r5, r2, r1
 800a34c:	42a5      	cmp	r5, r4
 800a34e:	d10b      	bne.n	800a368 <_free_r+0x78>
 800a350:	6824      	ldr	r4, [r4, #0]
 800a352:	4421      	add	r1, r4
 800a354:	1854      	adds	r4, r2, r1
 800a356:	42a3      	cmp	r3, r4
 800a358:	6011      	str	r1, [r2, #0]
 800a35a:	d1dd      	bne.n	800a318 <_free_r+0x28>
 800a35c:	681c      	ldr	r4, [r3, #0]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	6053      	str	r3, [r2, #4]
 800a362:	4421      	add	r1, r4
 800a364:	6011      	str	r1, [r2, #0]
 800a366:	e7d7      	b.n	800a318 <_free_r+0x28>
 800a368:	d902      	bls.n	800a370 <_free_r+0x80>
 800a36a:	230c      	movs	r3, #12
 800a36c:	6003      	str	r3, [r0, #0]
 800a36e:	e7d3      	b.n	800a318 <_free_r+0x28>
 800a370:	6825      	ldr	r5, [r4, #0]
 800a372:	1961      	adds	r1, r4, r5
 800a374:	428b      	cmp	r3, r1
 800a376:	bf04      	itt	eq
 800a378:	6819      	ldreq	r1, [r3, #0]
 800a37a:	685b      	ldreq	r3, [r3, #4]
 800a37c:	6063      	str	r3, [r4, #4]
 800a37e:	bf04      	itt	eq
 800a380:	1949      	addeq	r1, r1, r5
 800a382:	6021      	streq	r1, [r4, #0]
 800a384:	6054      	str	r4, [r2, #4]
 800a386:	e7c7      	b.n	800a318 <_free_r+0x28>
 800a388:	b003      	add	sp, #12
 800a38a:	bd30      	pop	{r4, r5, pc}
 800a38c:	2400015c 	.word	0x2400015c

0800a390 <_read_r>:
 800a390:	b538      	push	{r3, r4, r5, lr}
 800a392:	4d07      	ldr	r5, [pc, #28]	; (800a3b0 <_read_r+0x20>)
 800a394:	4604      	mov	r4, r0
 800a396:	4608      	mov	r0, r1
 800a398:	4611      	mov	r1, r2
 800a39a:	2200      	movs	r2, #0
 800a39c:	602a      	str	r2, [r5, #0]
 800a39e:	461a      	mov	r2, r3
 800a3a0:	f7f6 fec2 	bl	8001128 <_read>
 800a3a4:	1c43      	adds	r3, r0, #1
 800a3a6:	d102      	bne.n	800a3ae <_read_r+0x1e>
 800a3a8:	682b      	ldr	r3, [r5, #0]
 800a3aa:	b103      	cbz	r3, 800a3ae <_read_r+0x1e>
 800a3ac:	6023      	str	r3, [r4, #0]
 800a3ae:	bd38      	pop	{r3, r4, r5, pc}
 800a3b0:	24000744 	.word	0x24000744

0800a3b4 <_fstat_r>:
 800a3b4:	b538      	push	{r3, r4, r5, lr}
 800a3b6:	4d07      	ldr	r5, [pc, #28]	; (800a3d4 <_fstat_r+0x20>)
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	4604      	mov	r4, r0
 800a3bc:	4608      	mov	r0, r1
 800a3be:	4611      	mov	r1, r2
 800a3c0:	602b      	str	r3, [r5, #0]
 800a3c2:	f7f6 fef6 	bl	80011b2 <_fstat>
 800a3c6:	1c43      	adds	r3, r0, #1
 800a3c8:	d102      	bne.n	800a3d0 <_fstat_r+0x1c>
 800a3ca:	682b      	ldr	r3, [r5, #0]
 800a3cc:	b103      	cbz	r3, 800a3d0 <_fstat_r+0x1c>
 800a3ce:	6023      	str	r3, [r4, #0]
 800a3d0:	bd38      	pop	{r3, r4, r5, pc}
 800a3d2:	bf00      	nop
 800a3d4:	24000744 	.word	0x24000744

0800a3d8 <_isatty_r>:
 800a3d8:	b538      	push	{r3, r4, r5, lr}
 800a3da:	4d06      	ldr	r5, [pc, #24]	; (800a3f4 <_isatty_r+0x1c>)
 800a3dc:	2300      	movs	r3, #0
 800a3de:	4604      	mov	r4, r0
 800a3e0:	4608      	mov	r0, r1
 800a3e2:	602b      	str	r3, [r5, #0]
 800a3e4:	f7f6 fef5 	bl	80011d2 <_isatty>
 800a3e8:	1c43      	adds	r3, r0, #1
 800a3ea:	d102      	bne.n	800a3f2 <_isatty_r+0x1a>
 800a3ec:	682b      	ldr	r3, [r5, #0]
 800a3ee:	b103      	cbz	r3, 800a3f2 <_isatty_r+0x1a>
 800a3f0:	6023      	str	r3, [r4, #0]
 800a3f2:	bd38      	pop	{r3, r4, r5, pc}
 800a3f4:	24000744 	.word	0x24000744

0800a3f8 <_init>:
 800a3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3fa:	bf00      	nop
 800a3fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3fe:	bc08      	pop	{r3}
 800a400:	469e      	mov	lr, r3
 800a402:	4770      	bx	lr

0800a404 <_fini>:
 800a404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a406:	bf00      	nop
 800a408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a40a:	bc08      	pop	{r3}
 800a40c:	469e      	mov	lr, r3
 800a40e:	4770      	bx	lr
