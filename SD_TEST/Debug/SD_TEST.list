
SD_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d88  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800a028  0800a028  0001a028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a0fc  0800a0fc  0001a0fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a104  0800a104  0001a104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a108  0800a108  0001a108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800a10c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000074  0800a180  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d4  0800a1e0  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000614  24000134  0800a240  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000748  0800a240  00020748  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002830d  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b9c  00000000  00000000  0004846f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  0004c010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f8  00000000  00000000  0004d320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039960  00000000  00000000  0004e518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ffe  00000000  00000000  00087e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00166cf0  00000000  00000000  0009fe76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00206b66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058cc  00000000  00000000  00206bbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000134 	.word	0x24000134
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a010 	.word	0x0800a010

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000138 	.word	0x24000138
 80002dc:	0800a010 	.word	0x0800a010

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067e:	f000 fe9b 	bl	80013b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000682:	f000 f82d 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000686:	f000 f999 	bl	80009bc <MX_GPIO_Init>
  MX_ETH_Init();
 800068a:	f000 f8a9 	bl	80007e0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800068e:	f000 f917 	bl	80008c0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000692:	f000 f961 	bl	8000958 <MX_USB_OTG_FS_PCD_Init>
  MX_SDMMC2_SD_Init();
 8000696:	f000 f8ef 	bl	8000878 <MX_SDMMC2_SD_Init>
  /* USER CODE BEGIN 2 */
  uint8_t sd_rx_buffer = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	71bb      	strb	r3, [r7, #6]
  uint8_t status = HAL_SD_ReadBlocks (&hsd2, &sd_rx_buffer, 0x20000, 1, 500);
 800069e:	1db9      	adds	r1, r7, #6
 80006a0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2301      	movs	r3, #1
 80006a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80006ac:	480a      	ldr	r0, [pc, #40]	; (80006d8 <main+0x60>)
 80006ae:	f005 fa07 	bl	8005ac0 <HAL_SD_ReadBlocks>
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
  if (status != HAL_OK) {
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d002      	beq.n	80006c2 <main+0x4a>
	  return -1;
 80006bc:	f04f 33ff 	mov.w	r3, #4294967295
 80006c0:	e005      	b.n	80006ce <main+0x56>
  }

  printf("%x", sd_rx_buffer);
 80006c2:	79bb      	ldrb	r3, [r7, #6]
 80006c4:	4619      	mov	r1, r3
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <main+0x64>)
 80006c8:	f008 fd4c 	bl	8009164 <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006cc:	e7fe      	b.n	80006cc <main+0x54>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	240005fc 	.word	0x240005fc
 80006dc:	0800a028 	.word	0x0800a028

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b09c      	sub	sp, #112	; 0x70
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ea:	224c      	movs	r2, #76	; 0x4c
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f008 fd30 	bl	8009154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2220      	movs	r2, #32
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f008 fd2a 	bl	8009154 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000700:	2002      	movs	r0, #2
 8000702:	f001 ff3b 	bl	800257c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000706:	2300      	movs	r3, #0
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	4b33      	ldr	r3, [pc, #204]	; (80007d8 <SystemClock_Config+0xf8>)
 800070c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800070e:	4a32      	ldr	r2, [pc, #200]	; (80007d8 <SystemClock_Config+0xf8>)
 8000710:	f023 0301 	bic.w	r3, r3, #1
 8000714:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000716:	4b30      	ldr	r3, [pc, #192]	; (80007d8 <SystemClock_Config+0xf8>)
 8000718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	4b2e      	ldr	r3, [pc, #184]	; (80007dc <SystemClock_Config+0xfc>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000728:	4a2c      	ldr	r2, [pc, #176]	; (80007dc <SystemClock_Config+0xfc>)
 800072a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b2a      	ldr	r3, [pc, #168]	; (80007dc <SystemClock_Config+0xfc>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800073c:	bf00      	nop
 800073e:	4b27      	ldr	r3, [pc, #156]	; (80007dc <SystemClock_Config+0xfc>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800074a:	d1f8      	bne.n	800073e <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800074c:	2303      	movs	r3, #3
 800074e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000750:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000754:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000756:	2301      	movs	r3, #1
 8000758:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075a:	2340      	movs	r3, #64	; 0x40
 800075c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075e:	2302      	movs	r3, #2
 8000760:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000762:	2302      	movs	r3, #2
 8000764:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000766:	2301      	movs	r3, #1
 8000768:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800076a:	2318      	movs	r3, #24
 800076c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800076e:	2302      	movs	r3, #2
 8000770:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000772:	2304      	movs	r3, #4
 8000774:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000776:	2302      	movs	r3, #2
 8000778:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800077a:	230c      	movs	r3, #12
 800077c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800077e:	2300      	movs	r3, #0
 8000780:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078a:	4618      	mov	r0, r3
 800078c:	f001 ff40 	bl	8002610 <HAL_RCC_OscConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000796:	f000 fa0f 	bl	8000bb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079a:	233f      	movs	r3, #63	; 0x3f
 800079c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2101      	movs	r1, #1
 80007be:	4618      	mov	r0, r3
 80007c0:	f002 fb52 	bl	8002e68 <HAL_RCC_ClockConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0xee>
  {
    Error_Handler();
 80007ca:	f000 f9f5 	bl	8000bb8 <Error_Handler>
  }
}
 80007ce:	bf00      	nop
 80007d0:	3770      	adds	r7, #112	; 0x70
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	58000400 	.word	0x58000400
 80007dc:	58024800 	.word	0x58024800

080007e0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007e4:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <MX_ETH_Init+0x80>)
 80007e6:	4a1f      	ldr	r2, [pc, #124]	; (8000864 <MX_ETH_Init+0x84>)
 80007e8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007ea:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <MX_ETH_Init+0x88>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007f0:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <MX_ETH_Init+0x88>)
 80007f2:	2280      	movs	r2, #128	; 0x80
 80007f4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <MX_ETH_Init+0x88>)
 80007f8:	22e1      	movs	r2, #225	; 0xe1
 80007fa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_ETH_Init+0x88>)
 80007fe:	2200      	movs	r2, #0
 8000800:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <MX_ETH_Init+0x88>)
 8000804:	2200      	movs	r2, #0
 8000806:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000808:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_ETH_Init+0x88>)
 800080a:	2200      	movs	r2, #0
 800080c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_ETH_Init+0x80>)
 8000810:	4a15      	ldr	r2, [pc, #84]	; (8000868 <MX_ETH_Init+0x88>)
 8000812:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_ETH_Init+0x80>)
 8000816:	2201      	movs	r2, #1
 8000818:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_ETH_Init+0x80>)
 800081c:	4a13      	ldr	r2, [pc, #76]	; (800086c <MX_ETH_Init+0x8c>)
 800081e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_ETH_Init+0x80>)
 8000822:	4a13      	ldr	r2, [pc, #76]	; (8000870 <MX_ETH_Init+0x90>)
 8000824:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_ETH_Init+0x80>)
 8000828:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800082c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800082e:	480c      	ldr	r0, [pc, #48]	; (8000860 <MX_ETH_Init+0x80>)
 8000830:	f000 ff7c 	bl	800172c <HAL_ETH_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800083a:	f000 f9bd 	bl	8000bb8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800083e:	2234      	movs	r2, #52	; 0x34
 8000840:	2100      	movs	r1, #0
 8000842:	480c      	ldr	r0, [pc, #48]	; (8000874 <MX_ETH_Init+0x94>)
 8000844:	f008 fc86 	bl	8009154 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <MX_ETH_Init+0x94>)
 800084a:	2221      	movs	r2, #33	; 0x21
 800084c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_ETH_Init+0x94>)
 8000850:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000854:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000856:	4b07      	ldr	r3, [pc, #28]	; (8000874 <MX_ETH_Init+0x94>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	24000678 	.word	0x24000678
 8000864:	40028000 	.word	0x40028000
 8000868:	24000150 	.word	0x24000150
 800086c:	240000d4 	.word	0x240000d4
 8000870:	24000074 	.word	0x24000074
 8000874:	24000700 	.word	0x24000700

08000878 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 800087c:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_SDMMC2_SD_Init+0x40>)
 800087e:	4a0f      	ldr	r2, [pc, #60]	; (80008bc <MX_SDMMC2_SD_Init+0x44>)
 8000880:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <MX_SDMMC2_SD_Init+0x40>)
 8000884:	2200      	movs	r2, #0
 8000886:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_SDMMC2_SD_Init+0x40>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800088e:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <MX_SDMMC2_SD_Init+0x40>)
 8000890:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000894:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_SDMMC2_SD_Init+0x40>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_SDMMC2_SD_Init+0x40>)
 800089e:	2200      	movs	r2, #0
 80008a0:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd2) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_SDMMC2_SD_Init+0x40>)
 80008a4:	f004 fff2 	bl	800588c <HAL_SD_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_SDMMC2_SD_Init+0x3a>
  {
    Error_Handler();
 80008ae:	f000 f983 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	240005fc 	.word	0x240005fc
 80008bc:	48022400 	.word	0x48022400

080008c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008c4:	4b22      	ldr	r3, [pc, #136]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008c6:	4a23      	ldr	r2, [pc, #140]	; (8000954 <MX_USART3_UART_Init+0x94>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ca:	4b21      	ldr	r3, [pc, #132]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008de:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b19      	ldr	r3, [pc, #100]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_USART3_UART_Init+0x90>)
 80008fe:	2200      	movs	r2, #0
 8000900:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_USART3_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000908:	4811      	ldr	r0, [pc, #68]	; (8000950 <MX_USART3_UART_Init+0x90>)
 800090a:	f006 f9b1 	bl	8006c70 <HAL_UART_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000914:	f000 f950 	bl	8000bb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000918:	2100      	movs	r1, #0
 800091a:	480d      	ldr	r0, [pc, #52]	; (8000950 <MX_USART3_UART_Init+0x90>)
 800091c:	f007 fab0 	bl	8007e80 <HAL_UARTEx_SetTxFifoThreshold>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000926:	f000 f947 	bl	8000bb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800092a:	2100      	movs	r1, #0
 800092c:	4808      	ldr	r0, [pc, #32]	; (8000950 <MX_USART3_UART_Init+0x90>)
 800092e:	f007 fae5 	bl	8007efc <HAL_UARTEx_SetRxFifoThreshold>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000938:	f000 f93e 	bl	8000bb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_USART3_UART_Init+0x90>)
 800093e:	f007 fa66 	bl	8007e0e <HAL_UARTEx_DisableFifoMode>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000948:	f000 f936 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	24000164 	.word	0x24000164
 8000954:	40004800 	.word	0x40004800

08000958 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800095e:	4a16      	ldr	r2, [pc, #88]	; (80009b8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000960:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000964:	2209      	movs	r2, #9
 8000966:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800096a:	2202      	movs	r2, #2
 800096c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000976:	2202      	movs	r2, #2
 8000978:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800097c:	2201      	movs	r2, #1
 800097e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000982:	2200      	movs	r2, #0
 8000984:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000988:	2200      	movs	r2, #0
 800098a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800098e:	2201      	movs	r2, #1
 8000990:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000994:	2201      	movs	r2, #1
 8000996:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800099a:	2200      	movs	r2, #0
 800099c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009a0:	f001 fca3 	bl	80022ea <HAL_PCD_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80009aa:	f000 f905 	bl	8000bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	240001f4 	.word	0x240001f4
 80009b8:	40080000 	.word	0x40080000

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08c      	sub	sp, #48	; 0x30
 80009c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	4b61      	ldr	r3, [pc, #388]	; (8000b58 <MX_GPIO_Init+0x19c>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d8:	4a5f      	ldr	r2, [pc, #380]	; (8000b58 <MX_GPIO_Init+0x19c>)
 80009da:	f043 0304 	orr.w	r3, r3, #4
 80009de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e2:	4b5d      	ldr	r3, [pc, #372]	; (8000b58 <MX_GPIO_Init+0x19c>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e8:	f003 0304 	and.w	r3, r3, #4
 80009ec:	61bb      	str	r3, [r7, #24]
 80009ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f0:	4b59      	ldr	r3, [pc, #356]	; (8000b58 <MX_GPIO_Init+0x19c>)
 80009f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f6:	4a58      	ldr	r2, [pc, #352]	; (8000b58 <MX_GPIO_Init+0x19c>)
 80009f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a00:	4b55      	ldr	r3, [pc, #340]	; (8000b58 <MX_GPIO_Init+0x19c>)
 8000a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	4b52      	ldr	r3, [pc, #328]	; (8000b58 <MX_GPIO_Init+0x19c>)
 8000a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a14:	4a50      	ldr	r2, [pc, #320]	; (8000b58 <MX_GPIO_Init+0x19c>)
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a1e:	4b4e      	ldr	r3, [pc, #312]	; (8000b58 <MX_GPIO_Init+0x19c>)
 8000a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2c:	4b4a      	ldr	r3, [pc, #296]	; (8000b58 <MX_GPIO_Init+0x19c>)
 8000a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a32:	4a49      	ldr	r2, [pc, #292]	; (8000b58 <MX_GPIO_Init+0x19c>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3c:	4b46      	ldr	r3, [pc, #280]	; (8000b58 <MX_GPIO_Init+0x19c>)
 8000a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4a:	4b43      	ldr	r3, [pc, #268]	; (8000b58 <MX_GPIO_Init+0x19c>)
 8000a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a50:	4a41      	ldr	r2, [pc, #260]	; (8000b58 <MX_GPIO_Init+0x19c>)
 8000a52:	f043 0308 	orr.w	r3, r3, #8
 8000a56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a5a:	4b3f      	ldr	r3, [pc, #252]	; (8000b58 <MX_GPIO_Init+0x19c>)
 8000a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a60:	f003 0308 	and.w	r3, r3, #8
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a68:	4b3b      	ldr	r3, [pc, #236]	; (8000b58 <MX_GPIO_Init+0x19c>)
 8000a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6e:	4a3a      	ldr	r2, [pc, #232]	; (8000b58 <MX_GPIO_Init+0x19c>)
 8000a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a78:	4b37      	ldr	r3, [pc, #220]	; (8000b58 <MX_GPIO_Init+0x19c>)
 8000a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a86:	4b34      	ldr	r3, [pc, #208]	; (8000b58 <MX_GPIO_Init+0x19c>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8c:	4a32      	ldr	r2, [pc, #200]	; (8000b58 <MX_GPIO_Init+0x19c>)
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a96:	4b30      	ldr	r3, [pc, #192]	; (8000b58 <MX_GPIO_Init+0x19c>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9c:	f003 0310 	and.w	r3, r3, #16
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	482c      	ldr	r0, [pc, #176]	; (8000b5c <MX_GPIO_Init+0x1a0>)
 8000aaa:	f001 fc05 	bl	80022b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab4:	482a      	ldr	r0, [pc, #168]	; (8000b60 <MX_GPIO_Init+0x1a4>)
 8000ab6:	f001 fbff 	bl	80022b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2102      	movs	r1, #2
 8000abe:	4829      	ldr	r0, [pc, #164]	; (8000b64 <MX_GPIO_Init+0x1a8>)
 8000ac0:	f001 fbfa 	bl	80022b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ac4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aca:	2300      	movs	r3, #0
 8000acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4823      	ldr	r0, [pc, #140]	; (8000b68 <MX_GPIO_Init+0x1ac>)
 8000ada:	f001 fa3d 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	4819      	ldr	r0, [pc, #100]	; (8000b5c <MX_GPIO_Init+0x1a0>)
 8000af6:	f001 fa2f 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000afa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	4619      	mov	r1, r3
 8000b12:	4813      	ldr	r0, [pc, #76]	; (8000b60 <MX_GPIO_Init+0x1a4>)
 8000b14:	f001 fa20 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b1c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	480f      	ldr	r0, [pc, #60]	; (8000b6c <MX_GPIO_Init+0x1b0>)
 8000b2e:	f001 fa13 	bl	8001f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b32:	2302      	movs	r3, #2
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	4619      	mov	r1, r3
 8000b48:	4806      	ldr	r0, [pc, #24]	; (8000b64 <MX_GPIO_Init+0x1a8>)
 8000b4a:	f001 fa05 	bl	8001f58 <HAL_GPIO_Init>

}
 8000b4e:	bf00      	nop
 8000b50:	3730      	adds	r7, #48	; 0x30
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	58024400 	.word	0x58024400
 8000b5c:	58020400 	.word	0x58020400
 8000b60:	58020c00 	.word	0x58020c00
 8000b64:	58021000 	.word	0x58021000
 8000b68:	58020800 	.word	0x58020800
 8000b6c:	58021800 	.word	0x58021800

08000b70 <__io_putchar>:
  * @param  None
  * @retval None
  */

PUTCHAR_PROTOTYPE
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the LPUART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000b78:	1d39      	adds	r1, r7, #4
 8000b7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b7e:	2201      	movs	r2, #1
 8000b80:	4803      	ldr	r0, [pc, #12]	; (8000b90 <__io_putchar+0x20>)
 8000b82:	f006 f8c5 	bl	8006d10 <HAL_UART_Transmit>

  return ch;
 8000b86:	687b      	ldr	r3, [r7, #4]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	24000164 	.word	0x24000164

08000b94 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_UART_Receive(&huart3, &ch, 1, 0xFFFF);
 8000b9a:	1df9      	adds	r1, r7, #7
 8000b9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <__io_getchar+0x20>)
 8000ba4:	f006 f94a 	bl	8006e3c <HAL_UART_Receive>

	return ch;
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	24000164 	.word	0x24000164

08000bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bbc:	b672      	cpsid	i
}
 8000bbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <Error_Handler+0x8>
	...

08000bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bca:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <HAL_MspInit+0x30>)
 8000bcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bd0:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <HAL_MspInit+0x30>)
 8000bd2:	f043 0302 	orr.w	r3, r3, #2
 8000bd6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_MspInit+0x30>)
 8000bdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000be0:	f003 0302 	and.w	r3, r3, #2
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	58024400 	.word	0x58024400

08000bf8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08e      	sub	sp, #56	; 0x38
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a59      	ldr	r2, [pc, #356]	; (8000d7c <HAL_ETH_MspInit+0x184>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	f040 80ab 	bne.w	8000d72 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000c1c:	4b58      	ldr	r3, [pc, #352]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000c1e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c22:	4a57      	ldr	r2, [pc, #348]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c28:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c2c:	4b54      	ldr	r3, [pc, #336]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000c2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c36:	623b      	str	r3, [r7, #32]
 8000c38:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000c3a:	4b51      	ldr	r3, [pc, #324]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000c3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c40:	4a4f      	ldr	r2, [pc, #316]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c46:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c4a:	4b4d      	ldr	r3, [pc, #308]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000c4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c54:	61fb      	str	r3, [r7, #28]
 8000c56:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000c58:	4b49      	ldr	r3, [pc, #292]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000c5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c5e:	4a48      	ldr	r2, [pc, #288]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c64:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c68:	4b45      	ldr	r3, [pc, #276]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000c6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c72:	61bb      	str	r3, [r7, #24]
 8000c74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c76:	4b42      	ldr	r3, [pc, #264]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7c:	4a40      	ldr	r2, [pc, #256]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000c7e:	f043 0304 	orr.w	r3, r3, #4
 8000c82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c86:	4b3e      	ldr	r3, [pc, #248]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8c:	f003 0304 	and.w	r3, r3, #4
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c94:	4b3a      	ldr	r3, [pc, #232]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9a:	4a39      	ldr	r2, [pc, #228]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca4:	4b36      	ldr	r3, [pc, #216]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb2:	4b33      	ldr	r3, [pc, #204]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb8:	4a31      	ldr	r2, [pc, #196]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000cba:	f043 0302 	orr.w	r3, r3, #2
 8000cbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc2:	4b2f      	ldr	r3, [pc, #188]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc8:	f003 0302 	and.w	r3, r3, #2
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cd0:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd6:	4a2a      	ldr	r2, [pc, #168]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce0:	4b27      	ldr	r3, [pc, #156]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000cee:	2332      	movs	r3, #50	; 0x32
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cfe:	230b      	movs	r3, #11
 8000d00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d06:	4619      	mov	r1, r3
 8000d08:	481e      	ldr	r0, [pc, #120]	; (8000d84 <HAL_ETH_MspInit+0x18c>)
 8000d0a:	f001 f925 	bl	8001f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000d0e:	2386      	movs	r3, #134	; 0x86
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d1e:	230b      	movs	r3, #11
 8000d20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d26:	4619      	mov	r1, r3
 8000d28:	4817      	ldr	r0, [pc, #92]	; (8000d88 <HAL_ETH_MspInit+0x190>)
 8000d2a:	f001 f915 	bl	8001f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d40:	230b      	movs	r3, #11
 8000d42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4810      	ldr	r0, [pc, #64]	; (8000d8c <HAL_ETH_MspInit+0x194>)
 8000d4c:	f001 f904 	bl	8001f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d50:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d62:	230b      	movs	r3, #11
 8000d64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4808      	ldr	r0, [pc, #32]	; (8000d90 <HAL_ETH_MspInit+0x198>)
 8000d6e:	f001 f8f3 	bl	8001f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d72:	bf00      	nop
 8000d74:	3738      	adds	r7, #56	; 0x38
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40028000 	.word	0x40028000
 8000d80:	58024400 	.word	0x58024400
 8000d84:	58020800 	.word	0x58020800
 8000d88:	58020000 	.word	0x58020000
 8000d8c:	58020400 	.word	0x58020400
 8000d90:	58021800 	.word	0x58021800

08000d94 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b0ba      	sub	sp, #232	; 0xe8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dac:	f107 0318 	add.w	r3, r7, #24
 8000db0:	22bc      	movs	r2, #188	; 0xbc
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f008 f9cd 	bl	8009154 <memset>
  if(hsd->Instance==SDMMC2)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a49      	ldr	r2, [pc, #292]	; (8000ee4 <HAL_SD_MspInit+0x150>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	f040 808b 	bne.w	8000edc <HAL_SD_MspInit+0x148>
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000dc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dca:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd0:	f107 0318 	add.w	r3, r7, #24
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f002 fbd3 	bl	8003580 <HAL_RCCEx_PeriphCLKConfig>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <HAL_SD_MspInit+0x50>
    {
      Error_Handler();
 8000de0:	f7ff feea 	bl	8000bb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8000de4:	4b40      	ldr	r3, [pc, #256]	; (8000ee8 <HAL_SD_MspInit+0x154>)
 8000de6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000dea:	4a3f      	ldr	r2, [pc, #252]	; (8000ee8 <HAL_SD_MspInit+0x154>)
 8000dec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000df0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000df4:	4b3c      	ldr	r3, [pc, #240]	; (8000ee8 <HAL_SD_MspInit+0x154>)
 8000df6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	4b39      	ldr	r3, [pc, #228]	; (8000ee8 <HAL_SD_MspInit+0x154>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e08:	4a37      	ldr	r2, [pc, #220]	; (8000ee8 <HAL_SD_MspInit+0x154>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e12:	4b35      	ldr	r3, [pc, #212]	; (8000ee8 <HAL_SD_MspInit+0x154>)
 8000e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e20:	4b31      	ldr	r3, [pc, #196]	; (8000ee8 <HAL_SD_MspInit+0x154>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e26:	4a30      	ldr	r2, [pc, #192]	; (8000ee8 <HAL_SD_MspInit+0x154>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e30:	4b2d      	ldr	r3, [pc, #180]	; (8000ee8 <HAL_SD_MspInit+0x154>)
 8000e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ee8 <HAL_SD_MspInit+0x154>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e44:	4a28      	ldr	r2, [pc, #160]	; (8000ee8 <HAL_SD_MspInit+0x154>)
 8000e46:	f043 0308 	orr.w	r3, r3, #8
 8000e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e4e:	4b26      	ldr	r3, [pc, #152]	; (8000ee8 <HAL_SD_MspInit+0x154>)
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e54:	f003 0308 	and.w	r3, r3, #8
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
    PB15     ------> SDMMC2_D1
    PD6     ------> SDMMC2_CK
    PB3 (JTDO/TRACESWO)     ------> SDMMC2_D2
    PB4 (NJTRST)     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 8000e74:	2309      	movs	r3, #9
 8000e76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e7e:	4619      	mov	r1, r3
 8000e80:	481a      	ldr	r0, [pc, #104]	; (8000eec <HAL_SD_MspInit+0x158>)
 8000e82:	f001 f869 	bl	8001f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4;
 8000e86:	f24c 0318 	movw	r3, #49176	; 0xc018
 8000e8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 8000ea0:	2309      	movs	r3, #9
 8000ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4810      	ldr	r0, [pc, #64]	; (8000ef0 <HAL_SD_MspInit+0x15c>)
 8000eae:	f001 f853 	bl	8001f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000eb2:	2340      	movs	r3, #64	; 0x40
 8000eb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDIO2;
 8000eca:	230b      	movs	r3, #11
 8000ecc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4807      	ldr	r0, [pc, #28]	; (8000ef4 <HAL_SD_MspInit+0x160>)
 8000ed8:	f001 f83e 	bl	8001f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8000edc:	bf00      	nop
 8000ede:	37e8      	adds	r7, #232	; 0xe8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	48022400 	.word	0x48022400
 8000ee8:	58024400 	.word	0x58024400
 8000eec:	58020000 	.word	0x58020000
 8000ef0:	58020400 	.word	0x58020400
 8000ef4:	58020c00 	.word	0x58020c00

08000ef8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b0b8      	sub	sp, #224	; 0xe0
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f10:	f107 0310 	add.w	r3, r7, #16
 8000f14:	22bc      	movs	r2, #188	; 0xbc
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f008 f91b 	bl	8009154 <memset>
  if(huart->Instance==USART3)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a25      	ldr	r2, [pc, #148]	; (8000fb8 <HAL_UART_MspInit+0xc0>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d142      	bne.n	8000fae <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f32:	f107 0310 	add.w	r3, r7, #16
 8000f36:	4618      	mov	r0, r3
 8000f38:	f002 fb22 	bl	8003580 <HAL_RCCEx_PeriphCLKConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f42:	f7ff fe39 	bl	8000bb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <HAL_UART_MspInit+0xc4>)
 8000f48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f4c:	4a1b      	ldr	r2, [pc, #108]	; (8000fbc <HAL_UART_MspInit+0xc4>)
 8000f4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f56:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <HAL_UART_MspInit+0xc4>)
 8000f58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f64:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <HAL_UART_MspInit+0xc4>)
 8000f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6a:	4a14      	ldr	r2, [pc, #80]	; (8000fbc <HAL_UART_MspInit+0xc4>)
 8000f6c:	f043 0308 	orr.w	r3, r3, #8
 8000f70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <HAL_UART_MspInit+0xc4>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7a:	f003 0308 	and.w	r3, r3, #8
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f9c:	2307      	movs	r3, #7
 8000f9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <HAL_UART_MspInit+0xc8>)
 8000faa:	f000 ffd5 	bl	8001f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fae:	bf00      	nop
 8000fb0:	37e0      	adds	r7, #224	; 0xe0
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40004800 	.word	0x40004800
 8000fbc:	58024400 	.word	0x58024400
 8000fc0:	58020c00 	.word	0x58020c00

08000fc4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b0b8      	sub	sp, #224	; 0xe0
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	22bc      	movs	r2, #188	; 0xbc
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f008 f8b5 	bl	8009154 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a2f      	ldr	r2, [pc, #188]	; (80010ac <HAL_PCD_MspInit+0xe8>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d156      	bne.n	80010a2 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000ff4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000ff8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000ffa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ffe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001002:	f107 0310 	add.w	r3, r7, #16
 8001006:	4618      	mov	r0, r3
 8001008:	f002 faba 	bl	8003580 <HAL_RCCEx_PeriphCLKConfig>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8001012:	f7ff fdd1 	bl	8000bb8 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001016:	f001 faeb 	bl	80025f0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	4b25      	ldr	r3, [pc, #148]	; (80010b0 <HAL_PCD_MspInit+0xec>)
 800101c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001020:	4a23      	ldr	r2, [pc, #140]	; (80010b0 <HAL_PCD_MspInit+0xec>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800102a:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <HAL_PCD_MspInit+0xec>)
 800102c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001038:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800103c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001052:	230a      	movs	r3, #10
 8001054:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800105c:	4619      	mov	r1, r3
 800105e:	4815      	ldr	r0, [pc, #84]	; (80010b4 <HAL_PCD_MspInit+0xf0>)
 8001060:	f000 ff7a 	bl	8001f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001064:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001068:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106c:	2300      	movs	r3, #0
 800106e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001078:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800107c:	4619      	mov	r1, r3
 800107e:	480d      	ldr	r0, [pc, #52]	; (80010b4 <HAL_PCD_MspInit+0xf0>)
 8001080:	f000 ff6a 	bl	8001f58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001084:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_PCD_MspInit+0xec>)
 8001086:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800108a:	4a09      	ldr	r2, [pc, #36]	; (80010b0 <HAL_PCD_MspInit+0xec>)
 800108c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001090:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_PCD_MspInit+0xec>)
 8001096:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800109a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80010a2:	bf00      	nop
 80010a4:	37e0      	adds	r7, #224	; 0xe0
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40080000 	.word	0x40080000
 80010b0:	58024400 	.word	0x58024400
 80010b4:	58020000 	.word	0x58020000

080010b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <NMI_Handler+0x4>

080010be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <HardFault_Handler+0x4>

080010c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <MemManage_Handler+0x4>

080010ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <BusFault_Handler+0x4>

080010d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <UsageFault_Handler+0x4>

080010d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001104:	f000 f9ca 	bl	800149c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}

0800110c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	e00a      	b.n	8001134 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800111e:	f7ff fd39 	bl	8000b94 <__io_getchar>
 8001122:	4601      	mov	r1, r0
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	1c5a      	adds	r2, r3, #1
 8001128:	60ba      	str	r2, [r7, #8]
 800112a:	b2ca      	uxtb	r2, r1
 800112c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	3301      	adds	r3, #1
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	697a      	ldr	r2, [r7, #20]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	429a      	cmp	r2, r3
 800113a:	dbf0      	blt.n	800111e <_read+0x12>
	}

return len;
 800113c:	687b      	ldr	r3, [r7, #4]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b086      	sub	sp, #24
 800114a:	af00      	add	r7, sp, #0
 800114c:	60f8      	str	r0, [r7, #12]
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	e009      	b.n	800116c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	1c5a      	adds	r2, r3, #1
 800115c:	60ba      	str	r2, [r7, #8]
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fd05 	bl	8000b70 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	3301      	adds	r3, #1
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	429a      	cmp	r2, r3
 8001172:	dbf1      	blt.n	8001158 <_write+0x12>
	}
	return len;
 8001174:	687b      	ldr	r3, [r7, #4]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <_close>:

int _close(int file)
{
 800117e:	b480      	push	{r7}
 8001180:	b083      	sub	sp, #12
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
	return -1;
 8001186:	f04f 33ff 	mov.w	r3, #4294967295
}
 800118a:	4618      	mov	r0, r3
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011a6:	605a      	str	r2, [r3, #4]
	return 0;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <_isatty>:

int _isatty(int file)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
	return 1;
 80011be:	2301      	movs	r3, #1
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
	return 0;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f0:	4a14      	ldr	r2, [pc, #80]	; (8001244 <_sbrk+0x5c>)
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <_sbrk+0x60>)
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <_sbrk+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <_sbrk+0x64>)
 8001206:	4a12      	ldr	r2, [pc, #72]	; (8001250 <_sbrk+0x68>)
 8001208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	429a      	cmp	r2, r3
 8001216:	d207      	bcs.n	8001228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001218:	f007 ff72 	bl	8009100 <__errno>
 800121c:	4603      	mov	r3, r0
 800121e:	220c      	movs	r2, #12
 8001220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
 8001226:	e009      	b.n	800123c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <_sbrk+0x64>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	4a05      	ldr	r2, [pc, #20]	; (800124c <_sbrk+0x64>)
 8001238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800123a:	68fb      	ldr	r3, [r7, #12]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	24080000 	.word	0x24080000
 8001248:	00000400 	.word	0x00000400
 800124c:	24000158 	.word	0x24000158
 8001250:	24000748 	.word	0x24000748

08001254 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001258:	4b37      	ldr	r3, [pc, #220]	; (8001338 <SystemInit+0xe4>)
 800125a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800125e:	4a36      	ldr	r2, [pc, #216]	; (8001338 <SystemInit+0xe4>)
 8001260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001268:	4b34      	ldr	r3, [pc, #208]	; (800133c <SystemInit+0xe8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 030f 	and.w	r3, r3, #15
 8001270:	2b06      	cmp	r3, #6
 8001272:	d807      	bhi.n	8001284 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001274:	4b31      	ldr	r3, [pc, #196]	; (800133c <SystemInit+0xe8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f023 030f 	bic.w	r3, r3, #15
 800127c:	4a2f      	ldr	r2, [pc, #188]	; (800133c <SystemInit+0xe8>)
 800127e:	f043 0307 	orr.w	r3, r3, #7
 8001282:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001284:	4b2e      	ldr	r3, [pc, #184]	; (8001340 <SystemInit+0xec>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a2d      	ldr	r2, [pc, #180]	; (8001340 <SystemInit+0xec>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001290:	4b2b      	ldr	r3, [pc, #172]	; (8001340 <SystemInit+0xec>)
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001296:	4b2a      	ldr	r3, [pc, #168]	; (8001340 <SystemInit+0xec>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	4929      	ldr	r1, [pc, #164]	; (8001340 <SystemInit+0xec>)
 800129c:	4b29      	ldr	r3, [pc, #164]	; (8001344 <SystemInit+0xf0>)
 800129e:	4013      	ands	r3, r2
 80012a0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012a2:	4b26      	ldr	r3, [pc, #152]	; (800133c <SystemInit+0xe8>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d007      	beq.n	80012be <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012ae:	4b23      	ldr	r3, [pc, #140]	; (800133c <SystemInit+0xe8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f023 030f 	bic.w	r3, r3, #15
 80012b6:	4a21      	ldr	r2, [pc, #132]	; (800133c <SystemInit+0xe8>)
 80012b8:	f043 0307 	orr.w	r3, r3, #7
 80012bc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80012be:	4b20      	ldr	r3, [pc, #128]	; (8001340 <SystemInit+0xec>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80012c4:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <SystemInit+0xec>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80012ca:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <SystemInit+0xec>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80012d0:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <SystemInit+0xec>)
 80012d2:	4a1d      	ldr	r2, [pc, #116]	; (8001348 <SystemInit+0xf4>)
 80012d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80012d6:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <SystemInit+0xec>)
 80012d8:	4a1c      	ldr	r2, [pc, #112]	; (800134c <SystemInit+0xf8>)
 80012da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80012dc:	4b18      	ldr	r3, [pc, #96]	; (8001340 <SystemInit+0xec>)
 80012de:	4a1c      	ldr	r2, [pc, #112]	; (8001350 <SystemInit+0xfc>)
 80012e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80012e2:	4b17      	ldr	r3, [pc, #92]	; (8001340 <SystemInit+0xec>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012e8:	4b15      	ldr	r3, [pc, #84]	; (8001340 <SystemInit+0xec>)
 80012ea:	4a19      	ldr	r2, [pc, #100]	; (8001350 <SystemInit+0xfc>)
 80012ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012ee:	4b14      	ldr	r3, [pc, #80]	; (8001340 <SystemInit+0xec>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <SystemInit+0xec>)
 80012f6:	4a16      	ldr	r2, [pc, #88]	; (8001350 <SystemInit+0xfc>)
 80012f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <SystemInit+0xec>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <SystemInit+0xec>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a0e      	ldr	r2, [pc, #56]	; (8001340 <SystemInit+0xec>)
 8001306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800130a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <SystemInit+0xec>)
 800130e:	2200      	movs	r2, #0
 8001310:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <SystemInit+0x100>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <SystemInit+0x104>)
 8001318:	4013      	ands	r3, r2
 800131a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800131e:	d202      	bcs.n	8001326 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001320:	4b0e      	ldr	r3, [pc, #56]	; (800135c <SystemInit+0x108>)
 8001322:	2201      	movs	r2, #1
 8001324:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <SystemInit+0x10c>)
 8001328:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800132c:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00
 800133c:	52002000 	.word	0x52002000
 8001340:	58024400 	.word	0x58024400
 8001344:	eaf6ed7f 	.word	0xeaf6ed7f
 8001348:	02020200 	.word	0x02020200
 800134c:	01ff0000 	.word	0x01ff0000
 8001350:	01010280 	.word	0x01010280
 8001354:	5c001000 	.word	0x5c001000
 8001358:	ffff0000 	.word	0xffff0000
 800135c:	51008108 	.word	0x51008108
 8001360:	52004000 	.word	0x52004000

08001364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001364:	f8df d034 	ldr.w	sp, [pc, #52]	; 800139c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001368:	f7ff ff74 	bl	8001254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800136c:	480c      	ldr	r0, [pc, #48]	; (80013a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800136e:	490d      	ldr	r1, [pc, #52]	; (80013a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001370:	4a0d      	ldr	r2, [pc, #52]	; (80013a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001374:	e002      	b.n	800137c <LoopCopyDataInit>

08001376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800137a:	3304      	adds	r3, #4

0800137c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800137c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001380:	d3f9      	bcc.n	8001376 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001384:	4c0a      	ldr	r4, [pc, #40]	; (80013b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001388:	e001      	b.n	800138e <LoopFillZerobss>

0800138a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800138a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800138c:	3204      	adds	r2, #4

0800138e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001390:	d3fb      	bcc.n	800138a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001392:	f007 febb 	bl	800910c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001396:	f7ff f96f 	bl	8000678 <main>
  bx  lr
 800139a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800139c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80013a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013a4:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80013a8:	0800a10c 	.word	0x0800a10c
  ldr r2, =_sbss
 80013ac:	24000134 	.word	0x24000134
  ldr r4, =_ebss
 80013b0:	24000748 	.word	0x24000748

080013b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b4:	e7fe      	b.n	80013b4 <ADC3_IRQHandler>
	...

080013b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013be:	2003      	movs	r0, #3
 80013c0:	f000 f982 	bl	80016c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013c4:	f001 ff06 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 80013c8:	4602      	mov	r2, r0
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <HAL_Init+0x68>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	0a1b      	lsrs	r3, r3, #8
 80013d0:	f003 030f 	and.w	r3, r3, #15
 80013d4:	4913      	ldr	r1, [pc, #76]	; (8001424 <HAL_Init+0x6c>)
 80013d6:	5ccb      	ldrb	r3, [r1, r3]
 80013d8:	f003 031f 	and.w	r3, r3, #31
 80013dc:	fa22 f303 	lsr.w	r3, r2, r3
 80013e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013e2:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <HAL_Init+0x68>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <HAL_Init+0x6c>)
 80013ec:	5cd3      	ldrb	r3, [r2, r3]
 80013ee:	f003 031f 	and.w	r3, r3, #31
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	fa22 f303 	lsr.w	r3, r2, r3
 80013f8:	4a0b      	ldr	r2, [pc, #44]	; (8001428 <HAL_Init+0x70>)
 80013fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013fc:	4a0b      	ldr	r2, [pc, #44]	; (800142c <HAL_Init+0x74>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001402:	2000      	movs	r0, #0
 8001404:	f000 f814 	bl	8001430 <HAL_InitTick>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e002      	b.n	8001418 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001412:	f7ff fbd7 	bl	8000bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	58024400 	.word	0x58024400
 8001424:	0800a02c 	.word	0x0800a02c
 8001428:	24000004 	.word	0x24000004
 800142c:	24000000 	.word	0x24000000

08001430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001438:	4b15      	ldr	r3, [pc, #84]	; (8001490 <HAL_InitTick+0x60>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e021      	b.n	8001488 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001444:	4b13      	ldr	r3, [pc, #76]	; (8001494 <HAL_InitTick+0x64>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b11      	ldr	r3, [pc, #68]	; (8001490 <HAL_InitTick+0x60>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	4619      	mov	r1, r3
 800144e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001452:	fbb3 f3f1 	udiv	r3, r3, r1
 8001456:	fbb2 f3f3 	udiv	r3, r2, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f000 f959 	bl	8001712 <HAL_SYSTICK_Config>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e00e      	b.n	8001488 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b0f      	cmp	r3, #15
 800146e:	d80a      	bhi.n	8001486 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001470:	2200      	movs	r2, #0
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	f000 f931 	bl	80016de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800147c:	4a06      	ldr	r2, [pc, #24]	; (8001498 <HAL_InitTick+0x68>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	e000      	b.n	8001488 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	2400000c 	.word	0x2400000c
 8001494:	24000000 	.word	0x24000000
 8001498:	24000008 	.word	0x24000008

0800149c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_IncTick+0x20>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_IncTick+0x24>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <HAL_IncTick+0x24>)
 80014ae:	6013      	str	r3, [r2, #0]
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	2400000c 	.word	0x2400000c
 80014c0:	24000734 	.word	0x24000734

080014c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return uwTick;
 80014c8:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <HAL_GetTick+0x14>)
 80014ca:	681b      	ldr	r3, [r3, #0]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	24000734 	.word	0x24000734

080014dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e4:	f7ff ffee 	bl	80014c4 <HAL_GetTick>
 80014e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f4:	d005      	beq.n	8001502 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <HAL_Delay+0x44>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4413      	add	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001502:	bf00      	nop
 8001504:	f7ff ffde 	bl	80014c4 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	429a      	cmp	r2, r3
 8001512:	d8f7      	bhi.n	8001504 <HAL_Delay+0x28>
  {
  }
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	2400000c 	.word	0x2400000c

08001524 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <HAL_GetREVID+0x14>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	0c1b      	lsrs	r3, r3, #16
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	5c001000 	.word	0x5c001000

0800153c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800154c:	4904      	ldr	r1, [pc, #16]	; (8001560 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4313      	orrs	r3, r2
 8001552:	604b      	str	r3, [r1, #4]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	58000400 	.word	0x58000400

08001564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001580:	4013      	ands	r3, r2
 8001582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <__NVIC_SetPriorityGrouping+0x44>)
 800158e:	4313      	orrs	r3, r2
 8001590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001592:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	60d3      	str	r3, [r2, #12]
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00
 80015a8:	05fa0000 	.word	0x05fa0000

080015ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b0:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <__NVIC_GetPriorityGrouping+0x18>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	0a1b      	lsrs	r3, r3, #8
 80015b6:	f003 0307 	and.w	r3, r3, #7
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	db0a      	blt.n	80015f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	490c      	ldr	r1, [pc, #48]	; (8001614 <__NVIC_SetPriority+0x4c>)
 80015e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015e6:	0112      	lsls	r2, r2, #4
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	440b      	add	r3, r1
 80015ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f0:	e00a      	b.n	8001608 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4908      	ldr	r1, [pc, #32]	; (8001618 <__NVIC_SetPriority+0x50>)
 80015f8:	88fb      	ldrh	r3, [r7, #6]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	3b04      	subs	r3, #4
 8001600:	0112      	lsls	r2, r2, #4
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	440b      	add	r3, r1
 8001606:	761a      	strb	r2, [r3, #24]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000e100 	.word	0xe000e100
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	; 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f1c3 0307 	rsb	r3, r3, #7
 8001636:	2b04      	cmp	r3, #4
 8001638:	bf28      	it	cs
 800163a:	2304      	movcs	r3, #4
 800163c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3304      	adds	r3, #4
 8001642:	2b06      	cmp	r3, #6
 8001644:	d902      	bls.n	800164c <NVIC_EncodePriority+0x30>
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3b03      	subs	r3, #3
 800164a:	e000      	b.n	800164e <NVIC_EncodePriority+0x32>
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	f04f 32ff 	mov.w	r2, #4294967295
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43da      	mvns	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	401a      	ands	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001664:	f04f 31ff 	mov.w	r1, #4294967295
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	43d9      	mvns	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	4313      	orrs	r3, r2
         );
}
 8001676:	4618      	mov	r0, r3
 8001678:	3724      	adds	r7, #36	; 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3b01      	subs	r3, #1
 8001690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001694:	d301      	bcc.n	800169a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001696:	2301      	movs	r3, #1
 8001698:	e00f      	b.n	80016ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169a:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <SysTick_Config+0x40>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a2:	210f      	movs	r1, #15
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295
 80016a8:	f7ff ff8e 	bl	80015c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <SysTick_Config+0x40>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b2:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <SysTick_Config+0x40>)
 80016b4:	2207      	movs	r2, #7
 80016b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	e000e010 	.word	0xe000e010

080016c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ff47 	bl	8001564 <__NVIC_SetPriorityGrouping>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b086      	sub	sp, #24
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016ec:	f7ff ff5e 	bl	80015ac <__NVIC_GetPriorityGrouping>
 80016f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	68b9      	ldr	r1, [r7, #8]
 80016f6:	6978      	ldr	r0, [r7, #20]
 80016f8:	f7ff ff90 	bl	800161c <NVIC_EncodePriority>
 80016fc:	4602      	mov	r2, r0
 80016fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001702:	4611      	mov	r1, r2
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff5f 	bl	80015c8 <__NVIC_SetPriority>
}
 800170a:	bf00      	nop
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff ffb2 	bl	8001684 <SysTick_Config>
 8001720:	4603      	mov	r3, r0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e0c6      	b.n	80018cc <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001742:	2b00      	cmp	r3, #0
 8001744:	d102      	bne.n	800174c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff fa56 	bl	8000bf8 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2223      	movs	r2, #35	; 0x23
 8001750:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001752:	4b60      	ldr	r3, [pc, #384]	; (80018d4 <HAL_ETH_Init+0x1a8>)
 8001754:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001758:	4a5e      	ldr	r2, [pc, #376]	; (80018d4 <HAL_ETH_Init+0x1a8>)
 800175a:	f043 0302 	orr.w	r3, r3, #2
 800175e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001762:	4b5c      	ldr	r3, [pc, #368]	; (80018d4 <HAL_ETH_Init+0x1a8>)
 8001764:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	7a1b      	ldrb	r3, [r3, #8]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d103      	bne.n	8001780 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001778:	2000      	movs	r0, #0
 800177a:	f7ff fedf 	bl	800153c <HAL_SYSCFG_ETHInterfaceSelect>
 800177e:	e003      	b.n	8001788 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001780:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001784:	f7ff feda 	bl	800153c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f042 0201 	orr.w	r2, r2, #1
 800179a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800179e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017a0:	f7ff fe90 	bl	80014c4 <HAL_GetTick>
 80017a4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80017a6:	e00f      	b.n	80017c8 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80017a8:	f7ff fe8c 	bl	80014c4 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017b6:	d907      	bls.n	80017c8 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2204      	movs	r2, #4
 80017bc:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	22e0      	movs	r2, #224	; 0xe0
 80017c2:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e081      	b.n	80018cc <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1e6      	bne.n	80017a8 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 fac0 	bl	8001d60 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80017e0:	f001 fe72 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 80017e4:	4603      	mov	r3, r0
 80017e6:	4a3c      	ldr	r2, [pc, #240]	; (80018d8 <HAL_ETH_Init+0x1ac>)
 80017e8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ec:	0c9a      	lsrs	r2, r3, #18
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	3a01      	subs	r2, #1
 80017f4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 fa13 	bl	8001c24 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001814:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001818:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d007      	beq.n	8001836 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	22e0      	movs	r2, #224	; 0xe0
 8001830:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e04a      	b.n	80018cc <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	f241 1308 	movw	r3, #4360	; 0x1108
 800183e:	4413      	add	r3, r2
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	4b26      	ldr	r3, [pc, #152]	; (80018dc <HAL_ETH_Init+0x1b0>)
 8001844:	4013      	ands	r3, r2
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6952      	ldr	r2, [r2, #20]
 800184a:	0052      	lsls	r2, r2, #1
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	6809      	ldr	r1, [r1, #0]
 8001850:	431a      	orrs	r2, r3
 8001852:	f241 1308 	movw	r3, #4360	; 0x1108
 8001856:	440b      	add	r3, r1
 8001858:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 fad8 	bl	8001e10 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 fb1c 	bl	8001e9e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	3305      	adds	r3, #5
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	021a      	lsls	r2, r3, #8
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	3304      	adds	r3, #4
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	430a      	orrs	r2, r1
 8001880:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	3303      	adds	r3, #3
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	061a      	lsls	r2, r3, #24
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	3302      	adds	r3, #2
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	041b      	lsls	r3, r3, #16
 8001898:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	3301      	adds	r3, #1
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018a4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018b2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018b4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2210      	movs	r2, #16
 80018c2:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2210      	movs	r2, #16
 80018c8:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	58024400 	.word	0x58024400
 80018d8:	431bde83 	.word	0x431bde83
 80018dc:	ffff8001 	.word	0xffff8001

080018e0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80018f2:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	791b      	ldrb	r3, [r3, #4]
 80018f8:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80018fa:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	7b1b      	ldrb	r3, [r3, #12]
 8001900:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001902:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	7b5b      	ldrb	r3, [r3, #13]
 8001908:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800190a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	7b9b      	ldrb	r3, [r3, #14]
 8001910:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001912:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	7bdb      	ldrb	r3, [r3, #15]
 8001918:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800191a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	7c12      	ldrb	r2, [r2, #16]
 8001920:	2a00      	cmp	r2, #0
 8001922:	d102      	bne.n	800192a <ETH_SetMACConfig+0x4a>
 8001924:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001928:	e000      	b.n	800192c <ETH_SetMACConfig+0x4c>
 800192a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800192c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	7c52      	ldrb	r2, [r2, #17]
 8001932:	2a00      	cmp	r2, #0
 8001934:	d102      	bne.n	800193c <ETH_SetMACConfig+0x5c>
 8001936:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800193a:	e000      	b.n	800193e <ETH_SetMACConfig+0x5e>
 800193c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800193e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	7c9b      	ldrb	r3, [r3, #18]
 8001944:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001946:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 800194c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001952:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	7f1b      	ldrb	r3, [r3, #28]
 8001958:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800195a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	7f5b      	ldrb	r3, [r3, #29]
 8001960:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001962:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	7f92      	ldrb	r2, [r2, #30]
 8001968:	2a00      	cmp	r2, #0
 800196a:	d102      	bne.n	8001972 <ETH_SetMACConfig+0x92>
 800196c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001970:	e000      	b.n	8001974 <ETH_SetMACConfig+0x94>
 8001972:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001974:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	7fdb      	ldrb	r3, [r3, #31]
 800197a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800197c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001984:	2a00      	cmp	r2, #0
 8001986:	d102      	bne.n	800198e <ETH_SetMACConfig+0xae>
 8001988:	f44f 7280 	mov.w	r2, #256	; 0x100
 800198c:	e000      	b.n	8001990 <ETH_SetMACConfig+0xb0>
 800198e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001990:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001996:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800199e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80019a0:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80019a6:	4313      	orrs	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b56      	ldr	r3, [pc, #344]	; (8001b0c <ETH_SetMACConfig+0x22c>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	68f9      	ldr	r1, [r7, #12]
 80019ba:	430b      	orrs	r3, r1
 80019bc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019ca:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80019cc:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019d4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80019d6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80019de:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80019e0:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80019e8:	2a00      	cmp	r2, #0
 80019ea:	d102      	bne.n	80019f2 <ETH_SetMACConfig+0x112>
 80019ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019f0:	e000      	b.n	80019f4 <ETH_SetMACConfig+0x114>
 80019f2:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80019f4:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80019fa:	4313      	orrs	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	4b42      	ldr	r3, [pc, #264]	; (8001b10 <ETH_SetMACConfig+0x230>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	68f9      	ldr	r1, [r7, #12]
 8001a0e:	430b      	orrs	r3, r1
 8001a10:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a18:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	4b3a      	ldr	r3, [pc, #232]	; (8001b14 <ETH_SetMACConfig+0x234>)
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	68f9      	ldr	r1, [r7, #12]
 8001a32:	430b      	orrs	r3, r1
 8001a34:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001a3c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a42:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001a4a:	2a00      	cmp	r2, #0
 8001a4c:	d101      	bne.n	8001a52 <ETH_SetMACConfig+0x172>
 8001a4e:	2280      	movs	r2, #128	; 0x80
 8001a50:	e000      	b.n	8001a54 <ETH_SetMACConfig+0x174>
 8001a52:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001a54:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a5a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a66:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	68f9      	ldr	r1, [r7, #12]
 8001a72:	430b      	orrs	r3, r1
 8001a74:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001a7c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001a84:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001a86:	4313      	orrs	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a92:	f023 0103 	bic.w	r1, r3, #3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001aaa:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001ac6:	2a00      	cmp	r2, #0
 8001ac8:	d101      	bne.n	8001ace <ETH_SetMACConfig+0x1ee>
 8001aca:	2240      	movs	r2, #64	; 0x40
 8001acc:	e000      	b.n	8001ad0 <ETH_SetMACConfig+0x1f0>
 8001ace:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001ad0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001ad8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001ada:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001ae2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001af0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	00048083 	.word	0x00048083
 8001b10:	c0f88000 	.word	0xc0f88000
 8001b14:	fffffef0 	.word	0xfffffef0

08001b18 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4b38      	ldr	r3, [pc, #224]	; (8001c10 <ETH_SetDMAConfig+0xf8>)
 8001b2e:	4013      	ands	r3, r2
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	6879      	ldr	r1, [r7, #4]
 8001b36:	6809      	ldr	r1, [r1, #0]
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001b3e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	791b      	ldrb	r3, [r3, #4]
 8001b44:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b4a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	7b1b      	ldrb	r3, [r3, #12]
 8001b50:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b52:	4313      	orrs	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	f241 0304 	movw	r3, #4100	; 0x1004
 8001b5e:	4413      	add	r3, r2
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	4b2c      	ldr	r3, [pc, #176]	; (8001c14 <ETH_SetDMAConfig+0xfc>)
 8001b64:	4013      	ands	r3, r2
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6811      	ldr	r1, [r2, #0]
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	f241 0304 	movw	r3, #4100	; 0x1004
 8001b72:	440b      	add	r3, r1
 8001b74:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	7b5b      	ldrb	r3, [r3, #13]
 8001b7a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001b80:	4313      	orrs	r3, r2
 8001b82:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <ETH_SetDMAConfig+0x100>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6811      	ldr	r1, [r2, #0]
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001b9e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	7d1b      	ldrb	r3, [r3, #20]
 8001ba8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001baa:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	7f5b      	ldrb	r3, [r3, #29]
 8001bb0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	f241 1304 	movw	r3, #4356	; 0x1104
 8001bbe:	4413      	add	r3, r2
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	4b16      	ldr	r3, [pc, #88]	; (8001c1c <ETH_SetDMAConfig+0x104>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6811      	ldr	r1, [r2, #0]
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	f241 1304 	movw	r3, #4356	; 0x1104
 8001bd2:	440b      	add	r3, r1
 8001bd4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	7f1b      	ldrb	r3, [r3, #28]
 8001bda:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001be0:	4313      	orrs	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	f241 1308 	movw	r3, #4360	; 0x1108
 8001bec:	4413      	add	r3, r2
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <ETH_SetDMAConfig+0x108>)
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6811      	ldr	r1, [r2, #0]
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	f241 1308 	movw	r3, #4360	; 0x1108
 8001c00:	440b      	add	r3, r1
 8001c02:	601a      	str	r2, [r3, #0]
}
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	ffff87fd 	.word	0xffff87fd
 8001c14:	ffff2ffe 	.word	0xffff2ffe
 8001c18:	fffec000 	.word	0xfffec000
 8001c1c:	ffc0efef 	.word	0xffc0efef
 8001c20:	7fc0ffff 	.word	0x7fc0ffff

08001c24 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b0a4      	sub	sp, #144	; 0x90
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c32:	2300      	movs	r3, #0
 8001c34:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001c42:	2301      	movs	r3, #1
 8001c44:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001c60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c64:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001c7c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001c80:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001caa:	2300      	movs	r3, #0
 8001cac:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001cbc:	2320      	movs	r3, #32
 8001cbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001cce:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001cd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cd8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001d02:	2301      	movs	r3, #1
 8001d04:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7ff fde6 	bl	80018e0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001d14:	2301      	movs	r3, #1
 8001d16:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001d26:	2300      	movs	r3, #0
 8001d28:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d2e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d32:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d3c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001d44:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001d48:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001d4a:	f107 0308 	add.w	r3, r7, #8
 8001d4e:	4619      	mov	r1, r3
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff fee1 	bl	8001b18 <ETH_SetDMAConfig>
}
 8001d56:	bf00      	nop
 8001d58:	3790      	adds	r7, #144	; 0x90
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d70:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d78:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001d7a:	f001 fba5 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 8001d7e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	4a1e      	ldr	r2, [pc, #120]	; (8001dfc <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d908      	bls.n	8001d9a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	4a1d      	ldr	r2, [pc, #116]	; (8001e00 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d804      	bhi.n	8001d9a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	e027      	b.n	8001dea <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	4a18      	ldr	r2, [pc, #96]	; (8001e00 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d908      	bls.n	8001db4 <ETH_MAC_MDIO_ClkConfig+0x54>
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	4a17      	ldr	r2, [pc, #92]	; (8001e04 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d204      	bcs.n	8001db4 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	e01a      	b.n	8001dea <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	4a13      	ldr	r2, [pc, #76]	; (8001e04 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d303      	bcc.n	8001dc4 <ETH_MAC_MDIO_ClkConfig+0x64>
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d911      	bls.n	8001de8 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	4a10      	ldr	r2, [pc, #64]	; (8001e08 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d908      	bls.n	8001dde <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	4a0f      	ldr	r2, [pc, #60]	; (8001e0c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d804      	bhi.n	8001dde <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	e005      	b.n	8001dea <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	e000      	b.n	8001dea <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001de8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001df4:	bf00      	nop
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	01312cff 	.word	0x01312cff
 8001e00:	02160ebf 	.word	0x02160ebf
 8001e04:	03938700 	.word	0x03938700
 8001e08:	05f5e0ff 	.word	0x05f5e0ff
 8001e0c:	08f0d17f 	.word	0x08f0d17f

08001e10 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	e01d      	b.n	8001e5a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68d9      	ldr	r1, [r3, #12]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	4613      	mov	r3, r2
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	4413      	add	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	440b      	add	r3, r1
 8001e2e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	2200      	movs	r2, #0
 8001e46:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	3206      	adds	r2, #6
 8001e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	3301      	adds	r3, #1
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	d9de      	bls.n	8001e1e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	f241 132c 	movw	r3, #4396	; 0x112c
 8001e6e:	4413      	add	r3, r2
 8001e70:	2203      	movs	r2, #3
 8001e72:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68d9      	ldr	r1, [r3, #12]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	f241 1314 	movw	r3, #4372	; 0x1114
 8001e80:	4413      	add	r3, r2
 8001e82:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001e90:	601a      	str	r2, [r3, #0]
}
 8001e92:	bf00      	nop
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b085      	sub	sp, #20
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	e024      	b.n	8001ef6 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6919      	ldr	r1, [r3, #16]
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	4413      	add	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	440b      	add	r3, r1
 8001ebc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	3310      	adds	r3, #16
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d9d7      	bls.n	8001eac <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	f241 1330 	movw	r3, #4400	; 0x1130
 8001f22:	4413      	add	r3, r2
 8001f24:	2203      	movs	r2, #3
 8001f26:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6919      	ldr	r1, [r3, #16]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	f241 131c 	movw	r3, #4380	; 0x111c
 8001f34:	4413      	add	r3, r2
 8001f36:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	f241 1328 	movw	r3, #4392	; 0x1128
 8001f48:	4413      	add	r3, r2
 8001f4a:	6019      	str	r1, [r3, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b089      	sub	sp, #36	; 0x24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f66:	4b89      	ldr	r3, [pc, #548]	; (800218c <HAL_GPIO_Init+0x234>)
 8001f68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f6a:	e194      	b.n	8002296 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	2101      	movs	r1, #1
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	fa01 f303 	lsl.w	r3, r1, r3
 8001f78:	4013      	ands	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 8186 	beq.w	8002290 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d005      	beq.n	8001f9c <HAL_GPIO_Init+0x44>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d130      	bne.n	8001ffe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	091b      	lsrs	r3, r3, #4
 8001fe8:	f003 0201 	and.w	r2, r3, #1
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	2b03      	cmp	r3, #3
 8002008:	d017      	beq.n	800203a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	2203      	movs	r2, #3
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4313      	orrs	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d123      	bne.n	800208e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	08da      	lsrs	r2, r3, #3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	3208      	adds	r2, #8
 800204e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	220f      	movs	r2, #15
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	691a      	ldr	r2, [r3, #16]
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4313      	orrs	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	08da      	lsrs	r2, r3, #3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3208      	adds	r2, #8
 8002088:	69b9      	ldr	r1, [r7, #24]
 800208a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	2203      	movs	r2, #3
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4013      	ands	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 0203 	and.w	r2, r3, #3
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 80e0 	beq.w	8002290 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d0:	4b2f      	ldr	r3, [pc, #188]	; (8002190 <HAL_GPIO_Init+0x238>)
 80020d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020d6:	4a2e      	ldr	r2, [pc, #184]	; (8002190 <HAL_GPIO_Init+0x238>)
 80020d8:	f043 0302 	orr.w	r3, r3, #2
 80020dc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80020e0:	4b2b      	ldr	r3, [pc, #172]	; (8002190 <HAL_GPIO_Init+0x238>)
 80020e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ee:	4a29      	ldr	r2, [pc, #164]	; (8002194 <HAL_GPIO_Init+0x23c>)
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	089b      	lsrs	r3, r3, #2
 80020f4:	3302      	adds	r3, #2
 80020f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	220f      	movs	r2, #15
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4013      	ands	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a20      	ldr	r2, [pc, #128]	; (8002198 <HAL_GPIO_Init+0x240>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d052      	beq.n	80021c0 <HAL_GPIO_Init+0x268>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a1f      	ldr	r2, [pc, #124]	; (800219c <HAL_GPIO_Init+0x244>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d031      	beq.n	8002186 <HAL_GPIO_Init+0x22e>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a1e      	ldr	r2, [pc, #120]	; (80021a0 <HAL_GPIO_Init+0x248>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d02b      	beq.n	8002182 <HAL_GPIO_Init+0x22a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a1d      	ldr	r2, [pc, #116]	; (80021a4 <HAL_GPIO_Init+0x24c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d025      	beq.n	800217e <HAL_GPIO_Init+0x226>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a1c      	ldr	r2, [pc, #112]	; (80021a8 <HAL_GPIO_Init+0x250>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d01f      	beq.n	800217a <HAL_GPIO_Init+0x222>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a1b      	ldr	r2, [pc, #108]	; (80021ac <HAL_GPIO_Init+0x254>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d019      	beq.n	8002176 <HAL_GPIO_Init+0x21e>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a1a      	ldr	r2, [pc, #104]	; (80021b0 <HAL_GPIO_Init+0x258>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d013      	beq.n	8002172 <HAL_GPIO_Init+0x21a>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a19      	ldr	r2, [pc, #100]	; (80021b4 <HAL_GPIO_Init+0x25c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d00d      	beq.n	800216e <HAL_GPIO_Init+0x216>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a18      	ldr	r2, [pc, #96]	; (80021b8 <HAL_GPIO_Init+0x260>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d007      	beq.n	800216a <HAL_GPIO_Init+0x212>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a17      	ldr	r2, [pc, #92]	; (80021bc <HAL_GPIO_Init+0x264>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d101      	bne.n	8002166 <HAL_GPIO_Init+0x20e>
 8002162:	2309      	movs	r3, #9
 8002164:	e02d      	b.n	80021c2 <HAL_GPIO_Init+0x26a>
 8002166:	230a      	movs	r3, #10
 8002168:	e02b      	b.n	80021c2 <HAL_GPIO_Init+0x26a>
 800216a:	2308      	movs	r3, #8
 800216c:	e029      	b.n	80021c2 <HAL_GPIO_Init+0x26a>
 800216e:	2307      	movs	r3, #7
 8002170:	e027      	b.n	80021c2 <HAL_GPIO_Init+0x26a>
 8002172:	2306      	movs	r3, #6
 8002174:	e025      	b.n	80021c2 <HAL_GPIO_Init+0x26a>
 8002176:	2305      	movs	r3, #5
 8002178:	e023      	b.n	80021c2 <HAL_GPIO_Init+0x26a>
 800217a:	2304      	movs	r3, #4
 800217c:	e021      	b.n	80021c2 <HAL_GPIO_Init+0x26a>
 800217e:	2303      	movs	r3, #3
 8002180:	e01f      	b.n	80021c2 <HAL_GPIO_Init+0x26a>
 8002182:	2302      	movs	r3, #2
 8002184:	e01d      	b.n	80021c2 <HAL_GPIO_Init+0x26a>
 8002186:	2301      	movs	r3, #1
 8002188:	e01b      	b.n	80021c2 <HAL_GPIO_Init+0x26a>
 800218a:	bf00      	nop
 800218c:	58000080 	.word	0x58000080
 8002190:	58024400 	.word	0x58024400
 8002194:	58000400 	.word	0x58000400
 8002198:	58020000 	.word	0x58020000
 800219c:	58020400 	.word	0x58020400
 80021a0:	58020800 	.word	0x58020800
 80021a4:	58020c00 	.word	0x58020c00
 80021a8:	58021000 	.word	0x58021000
 80021ac:	58021400 	.word	0x58021400
 80021b0:	58021800 	.word	0x58021800
 80021b4:	58021c00 	.word	0x58021c00
 80021b8:	58022000 	.word	0x58022000
 80021bc:	58022400 	.word	0x58022400
 80021c0:	2300      	movs	r3, #0
 80021c2:	69fa      	ldr	r2, [r7, #28]
 80021c4:	f002 0203 	and.w	r2, r2, #3
 80021c8:	0092      	lsls	r2, r2, #2
 80021ca:	4093      	lsls	r3, r2
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d2:	4938      	ldr	r1, [pc, #224]	; (80022b4 <HAL_GPIO_Init+0x35c>)
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	089b      	lsrs	r3, r3, #2
 80021d8:	3302      	adds	r3, #2
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002206:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800220e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002234:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	43db      	mvns	r3, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4013      	ands	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	3301      	adds	r3, #1
 8002294:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	fa22 f303 	lsr.w	r3, r2, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f47f ae63 	bne.w	8001f6c <HAL_GPIO_Init+0x14>
  }
}
 80022a6:	bf00      	nop
 80022a8:	bf00      	nop
 80022aa:	3724      	adds	r7, #36	; 0x24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	58000400 	.word	0x58000400

080022b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	807b      	strh	r3, [r7, #2]
 80022c4:	4613      	mov	r3, r2
 80022c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022c8:	787b      	ldrb	r3, [r7, #1]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ce:	887a      	ldrh	r2, [r7, #2]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80022d4:	e003      	b.n	80022de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80022d6:	887b      	ldrh	r3, [r7, #2]
 80022d8:	041a      	lsls	r2, r3, #16
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	619a      	str	r2, [r3, #24]
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ec:	b08f      	sub	sp, #60	; 0x3c
 80022ee:	af0a      	add	r7, sp, #40	; 0x28
 80022f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e116      	b.n	800252a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d106      	bne.n	800231c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7fe fe54 	bl	8000fc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2203      	movs	r2, #3
 8002320:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232c:	2b00      	cmp	r3, #0
 800232e:	d102      	bne.n	8002336 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f006 fc4a 	bl	8008bd4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	603b      	str	r3, [r7, #0]
 8002346:	687e      	ldr	r6, [r7, #4]
 8002348:	466d      	mov	r5, sp
 800234a:	f106 0410 	add.w	r4, r6, #16
 800234e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002350:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002352:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002354:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002356:	e894 0003 	ldmia.w	r4, {r0, r1}
 800235a:	e885 0003 	stmia.w	r5, {r0, r1}
 800235e:	1d33      	adds	r3, r6, #4
 8002360:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002362:	6838      	ldr	r0, [r7, #0]
 8002364:	f006 fbc8 	bl	8008af8 <USB_CoreInit>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d005      	beq.n	800237a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2202      	movs	r2, #2
 8002372:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e0d7      	b.n	800252a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2100      	movs	r1, #0
 8002380:	4618      	mov	r0, r3
 8002382:	f006 fc38 	bl	8008bf6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002386:	2300      	movs	r3, #0
 8002388:	73fb      	strb	r3, [r7, #15]
 800238a:	e04a      	b.n	8002422 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800238c:	7bfa      	ldrb	r2, [r7, #15]
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	1a9b      	subs	r3, r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	333d      	adds	r3, #61	; 0x3d
 800239c:	2201      	movs	r2, #1
 800239e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023a0:	7bfa      	ldrb	r2, [r7, #15]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	1a9b      	subs	r3, r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	333c      	adds	r3, #60	; 0x3c
 80023b0:	7bfa      	ldrb	r2, [r7, #15]
 80023b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023b4:	7bfa      	ldrb	r2, [r7, #15]
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	b298      	uxth	r0, r3
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	1a9b      	subs	r3, r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	3342      	adds	r3, #66	; 0x42
 80023c8:	4602      	mov	r2, r0
 80023ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023cc:	7bfa      	ldrb	r2, [r7, #15]
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	1a9b      	subs	r3, r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	333f      	adds	r3, #63	; 0x3f
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023e0:	7bfa      	ldrb	r2, [r7, #15]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	3344      	adds	r3, #68	; 0x44
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023f4:	7bfa      	ldrb	r2, [r7, #15]
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	1a9b      	subs	r3, r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	3348      	adds	r3, #72	; 0x48
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002408:	7bfa      	ldrb	r2, [r7, #15]
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	1a9b      	subs	r3, r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	3350      	adds	r3, #80	; 0x50
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	3301      	adds	r3, #1
 8002420:	73fb      	strb	r3, [r7, #15]
 8002422:	7bfa      	ldrb	r2, [r7, #15]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	429a      	cmp	r2, r3
 800242a:	d3af      	bcc.n	800238c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800242c:	2300      	movs	r3, #0
 800242e:	73fb      	strb	r3, [r7, #15]
 8002430:	e044      	b.n	80024bc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002432:	7bfa      	ldrb	r2, [r7, #15]
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	1a9b      	subs	r3, r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002448:	7bfa      	ldrb	r2, [r7, #15]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	1a9b      	subs	r3, r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800245a:	7bfa      	ldrb	r2, [r7, #15]
 800245c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800245e:	7bfa      	ldrb	r2, [r7, #15]
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	1a9b      	subs	r3, r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	440b      	add	r3, r1
 800246c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002474:	7bfa      	ldrb	r2, [r7, #15]
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	1a9b      	subs	r3, r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800248a:	7bfa      	ldrb	r2, [r7, #15]
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	1a9b      	subs	r3, r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024a0:	7bfa      	ldrb	r2, [r7, #15]
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	1a9b      	subs	r3, r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	3301      	adds	r3, #1
 80024ba:	73fb      	strb	r3, [r7, #15]
 80024bc:	7bfa      	ldrb	r2, [r7, #15]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d3b5      	bcc.n	8002432 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	603b      	str	r3, [r7, #0]
 80024cc:	687e      	ldr	r6, [r7, #4]
 80024ce:	466d      	mov	r5, sp
 80024d0:	f106 0410 	add.w	r4, r6, #16
 80024d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80024e4:	1d33      	adds	r3, r6, #4
 80024e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024e8:	6838      	ldr	r0, [r7, #0]
 80024ea:	f006 fbd1 	bl	8008c90 <USB_DevInit>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d005      	beq.n	8002500 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2202      	movs	r2, #2
 80024f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e014      	b.n	800252a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	2b01      	cmp	r3, #1
 8002516:	d102      	bne.n	800251e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f80b 	bl	8002534 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f006 fd8b 	bl	800903e <USB_DevDisconnect>

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002534 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002562:	4b05      	ldr	r3, [pc, #20]	; (8002578 <HAL_PCDEx_ActivateLPM+0x44>)
 8002564:	4313      	orrs	r3, r2
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	10000003 	.word	0x10000003

0800257c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002584:	4b19      	ldr	r3, [pc, #100]	; (80025ec <HAL_PWREx_ConfigSupply+0x70>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b04      	cmp	r3, #4
 800258e:	d00a      	beq.n	80025a6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002590:	4b16      	ldr	r3, [pc, #88]	; (80025ec <HAL_PWREx_ConfigSupply+0x70>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	429a      	cmp	r2, r3
 800259c:	d001      	beq.n	80025a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e01f      	b.n	80025e2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e01d      	b.n	80025e2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80025a6:	4b11      	ldr	r3, [pc, #68]	; (80025ec <HAL_PWREx_ConfigSupply+0x70>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f023 0207 	bic.w	r2, r3, #7
 80025ae:	490f      	ldr	r1, [pc, #60]	; (80025ec <HAL_PWREx_ConfigSupply+0x70>)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80025b6:	f7fe ff85 	bl	80014c4 <HAL_GetTick>
 80025ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025bc:	e009      	b.n	80025d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80025be:	f7fe ff81 	bl	80014c4 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025cc:	d901      	bls.n	80025d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e007      	b.n	80025e2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025d2:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_PWREx_ConfigSupply+0x70>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025de:	d1ee      	bne.n	80025be <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	58024800 	.word	0x58024800

080025f0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80025f4:	4b05      	ldr	r3, [pc, #20]	; (800260c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	4a04      	ldr	r2, [pc, #16]	; (800260c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80025fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025fe:	60d3      	str	r3, [r2, #12]
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	58024800 	.word	0x58024800

08002610 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08c      	sub	sp, #48	; 0x30
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d102      	bne.n	8002624 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	f000 bc1c 	b.w	8002e5c <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 8087 	beq.w	8002740 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002632:	4b9e      	ldr	r3, [pc, #632]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800263a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800263c:	4b9b      	ldr	r3, [pc, #620]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 800263e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002640:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002644:	2b10      	cmp	r3, #16
 8002646:	d007      	beq.n	8002658 <HAL_RCC_OscConfig+0x48>
 8002648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264a:	2b18      	cmp	r3, #24
 800264c:	d110      	bne.n	8002670 <HAL_RCC_OscConfig+0x60>
 800264e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d10b      	bne.n	8002670 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002658:	4b94      	ldr	r3, [pc, #592]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d06c      	beq.n	800273e <HAL_RCC_OscConfig+0x12e>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d168      	bne.n	800273e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e3f5      	b.n	8002e5c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002678:	d106      	bne.n	8002688 <HAL_RCC_OscConfig+0x78>
 800267a:	4b8c      	ldr	r3, [pc, #560]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a8b      	ldr	r2, [pc, #556]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 8002680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	e02e      	b.n	80026e6 <HAL_RCC_OscConfig+0xd6>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10c      	bne.n	80026aa <HAL_RCC_OscConfig+0x9a>
 8002690:	4b86      	ldr	r3, [pc, #536]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a85      	ldr	r2, [pc, #532]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 8002696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	4b83      	ldr	r3, [pc, #524]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a82      	ldr	r2, [pc, #520]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 80026a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a6:	6013      	str	r3, [r2, #0]
 80026a8:	e01d      	b.n	80026e6 <HAL_RCC_OscConfig+0xd6>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026b2:	d10c      	bne.n	80026ce <HAL_RCC_OscConfig+0xbe>
 80026b4:	4b7d      	ldr	r3, [pc, #500]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a7c      	ldr	r2, [pc, #496]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 80026ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	4b7a      	ldr	r3, [pc, #488]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a79      	ldr	r2, [pc, #484]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 80026c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	e00b      	b.n	80026e6 <HAL_RCC_OscConfig+0xd6>
 80026ce:	4b77      	ldr	r3, [pc, #476]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a76      	ldr	r2, [pc, #472]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 80026d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	4b74      	ldr	r3, [pc, #464]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a73      	ldr	r2, [pc, #460]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 80026e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026e4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d013      	beq.n	8002716 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ee:	f7fe fee9 	bl	80014c4 <HAL_GetTick>
 80026f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026f6:	f7fe fee5 	bl	80014c4 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b64      	cmp	r3, #100	; 0x64
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e3a9      	b.n	8002e5c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002708:	4b68      	ldr	r3, [pc, #416]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0f0      	beq.n	80026f6 <HAL_RCC_OscConfig+0xe6>
 8002714:	e014      	b.n	8002740 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002716:	f7fe fed5 	bl	80014c4 <HAL_GetTick>
 800271a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800271e:	f7fe fed1 	bl	80014c4 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b64      	cmp	r3, #100	; 0x64
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e395      	b.n	8002e5c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002730:	4b5e      	ldr	r3, [pc, #376]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1f0      	bne.n	800271e <HAL_RCC_OscConfig+0x10e>
 800273c:	e000      	b.n	8002740 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800273e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 80ca 	beq.w	80028e2 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800274e:	4b57      	ldr	r3, [pc, #348]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002756:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002758:	4b54      	ldr	r3, [pc, #336]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 800275a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d007      	beq.n	8002774 <HAL_RCC_OscConfig+0x164>
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	2b18      	cmp	r3, #24
 8002768:	d156      	bne.n	8002818 <HAL_RCC_OscConfig+0x208>
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d151      	bne.n	8002818 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002774:	4b4d      	ldr	r3, [pc, #308]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_RCC_OscConfig+0x17c>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e367      	b.n	8002e5c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800278c:	4b47      	ldr	r3, [pc, #284]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f023 0219 	bic.w	r2, r3, #25
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4944      	ldr	r1, [pc, #272]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 800279a:	4313      	orrs	r3, r2
 800279c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800279e:	f7fe fe91 	bl	80014c4 <HAL_GetTick>
 80027a2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027a6:	f7fe fe8d 	bl	80014c4 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e351      	b.n	8002e5c <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027b8:	4b3c      	ldr	r3, [pc, #240]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0f0      	beq.n	80027a6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c4:	f7fe feae 	bl	8001524 <HAL_GetREVID>
 80027c8:	4603      	mov	r3, r0
 80027ca:	f241 0203 	movw	r2, #4099	; 0x1003
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d817      	bhi.n	8002802 <HAL_RCC_OscConfig+0x1f2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	2b40      	cmp	r3, #64	; 0x40
 80027d8:	d108      	bne.n	80027ec <HAL_RCC_OscConfig+0x1dc>
 80027da:	4b34      	ldr	r3, [pc, #208]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80027e2:	4a32      	ldr	r2, [pc, #200]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 80027e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027e8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027ea:	e07a      	b.n	80028e2 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ec:	4b2f      	ldr	r3, [pc, #188]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	031b      	lsls	r3, r3, #12
 80027fa:	492c      	ldr	r1, [pc, #176]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002800:	e06f      	b.n	80028e2 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002802:	4b2a      	ldr	r3, [pc, #168]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	061b      	lsls	r3, r3, #24
 8002810:	4926      	ldr	r1, [pc, #152]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 8002812:	4313      	orrs	r3, r2
 8002814:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002816:	e064      	b.n	80028e2 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d047      	beq.n	80028b0 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002820:	4b22      	ldr	r3, [pc, #136]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f023 0219 	bic.w	r2, r3, #25
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	491f      	ldr	r1, [pc, #124]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 800282e:	4313      	orrs	r3, r2
 8002830:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002832:	f7fe fe47 	bl	80014c4 <HAL_GetTick>
 8002836:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800283a:	f7fe fe43 	bl	80014c4 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e307      	b.n	8002e5c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800284c:	4b17      	ldr	r3, [pc, #92]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002858:	f7fe fe64 	bl	8001524 <HAL_GetREVID>
 800285c:	4603      	mov	r3, r0
 800285e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002862:	4293      	cmp	r3, r2
 8002864:	d817      	bhi.n	8002896 <HAL_RCC_OscConfig+0x286>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	2b40      	cmp	r3, #64	; 0x40
 800286c:	d108      	bne.n	8002880 <HAL_RCC_OscConfig+0x270>
 800286e:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002876:	4a0d      	ldr	r2, [pc, #52]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 8002878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800287c:	6053      	str	r3, [r2, #4]
 800287e:	e030      	b.n	80028e2 <HAL_RCC_OscConfig+0x2d2>
 8002880:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	031b      	lsls	r3, r3, #12
 800288e:	4907      	ldr	r1, [pc, #28]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 8002890:	4313      	orrs	r3, r2
 8002892:	604b      	str	r3, [r1, #4]
 8002894:	e025      	b.n	80028e2 <HAL_RCC_OscConfig+0x2d2>
 8002896:	4b05      	ldr	r3, [pc, #20]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	061b      	lsls	r3, r3, #24
 80028a4:	4901      	ldr	r1, [pc, #4]	; (80028ac <HAL_RCC_OscConfig+0x29c>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	604b      	str	r3, [r1, #4]
 80028aa:	e01a      	b.n	80028e2 <HAL_RCC_OscConfig+0x2d2>
 80028ac:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028b0:	4b9e      	ldr	r3, [pc, #632]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a9d      	ldr	r2, [pc, #628]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 80028b6:	f023 0301 	bic.w	r3, r3, #1
 80028ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028bc:	f7fe fe02 	bl	80014c4 <HAL_GetTick>
 80028c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028c4:	f7fe fdfe 	bl	80014c4 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e2c2      	b.n	8002e5c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028d6:	4b95      	ldr	r3, [pc, #596]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0310 	and.w	r3, r3, #16
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 80a9 	beq.w	8002a42 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028f0:	4b8e      	ldr	r3, [pc, #568]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028f8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028fa:	4b8c      	ldr	r3, [pc, #560]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 80028fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fe:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	2b08      	cmp	r3, #8
 8002904:	d007      	beq.n	8002916 <HAL_RCC_OscConfig+0x306>
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	2b18      	cmp	r3, #24
 800290a:	d13a      	bne.n	8002982 <HAL_RCC_OscConfig+0x372>
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f003 0303 	and.w	r3, r3, #3
 8002912:	2b01      	cmp	r3, #1
 8002914:	d135      	bne.n	8002982 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002916:	4b85      	ldr	r3, [pc, #532]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291e:	2b00      	cmp	r3, #0
 8002920:	d005      	beq.n	800292e <HAL_RCC_OscConfig+0x31e>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	2b80      	cmp	r3, #128	; 0x80
 8002928:	d001      	beq.n	800292e <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e296      	b.n	8002e5c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800292e:	f7fe fdf9 	bl	8001524 <HAL_GetREVID>
 8002932:	4603      	mov	r3, r0
 8002934:	f241 0203 	movw	r2, #4099	; 0x1003
 8002938:	4293      	cmp	r3, r2
 800293a:	d817      	bhi.n	800296c <HAL_RCC_OscConfig+0x35c>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	2b20      	cmp	r3, #32
 8002942:	d108      	bne.n	8002956 <HAL_RCC_OscConfig+0x346>
 8002944:	4b79      	ldr	r3, [pc, #484]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800294c:	4a77      	ldr	r2, [pc, #476]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 800294e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002952:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002954:	e075      	b.n	8002a42 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002956:	4b75      	ldr	r3, [pc, #468]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	069b      	lsls	r3, r3, #26
 8002964:	4971      	ldr	r1, [pc, #452]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 8002966:	4313      	orrs	r3, r2
 8002968:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800296a:	e06a      	b.n	8002a42 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800296c:	4b6f      	ldr	r3, [pc, #444]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a1b      	ldr	r3, [r3, #32]
 8002978:	061b      	lsls	r3, r3, #24
 800297a:	496c      	ldr	r1, [pc, #432]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 800297c:	4313      	orrs	r3, r2
 800297e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002980:	e05f      	b.n	8002a42 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d042      	beq.n	8002a10 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800298a:	4b68      	ldr	r3, [pc, #416]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a67      	ldr	r2, [pc, #412]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 8002990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002996:	f7fe fd95 	bl	80014c4 <HAL_GetTick>
 800299a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800299e:	f7fe fd91 	bl	80014c4 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e255      	b.n	8002e5c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029b0:	4b5e      	ldr	r3, [pc, #376]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0f0      	beq.n	800299e <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029bc:	f7fe fdb2 	bl	8001524 <HAL_GetREVID>
 80029c0:	4603      	mov	r3, r0
 80029c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d817      	bhi.n	80029fa <HAL_RCC_OscConfig+0x3ea>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	2b20      	cmp	r3, #32
 80029d0:	d108      	bne.n	80029e4 <HAL_RCC_OscConfig+0x3d4>
 80029d2:	4b56      	ldr	r3, [pc, #344]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80029da:	4a54      	ldr	r2, [pc, #336]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 80029dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80029e0:	6053      	str	r3, [r2, #4]
 80029e2:	e02e      	b.n	8002a42 <HAL_RCC_OscConfig+0x432>
 80029e4:	4b51      	ldr	r3, [pc, #324]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	069b      	lsls	r3, r3, #26
 80029f2:	494e      	ldr	r1, [pc, #312]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	604b      	str	r3, [r1, #4]
 80029f8:	e023      	b.n	8002a42 <HAL_RCC_OscConfig+0x432>
 80029fa:	4b4c      	ldr	r3, [pc, #304]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	061b      	lsls	r3, r3, #24
 8002a08:	4948      	ldr	r1, [pc, #288]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60cb      	str	r3, [r1, #12]
 8002a0e:	e018      	b.n	8002a42 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a10:	4b46      	ldr	r3, [pc, #280]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a45      	ldr	r2, [pc, #276]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 8002a16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1c:	f7fe fd52 	bl	80014c4 <HAL_GetTick>
 8002a20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002a24:	f7fe fd4e 	bl	80014c4 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e212      	b.n	8002e5c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a36:	4b3d      	ldr	r3, [pc, #244]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f0      	bne.n	8002a24 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d036      	beq.n	8002abc <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d019      	beq.n	8002a8a <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a56:	4b35      	ldr	r3, [pc, #212]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 8002a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a5a:	4a34      	ldr	r2, [pc, #208]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a62:	f7fe fd2f 	bl	80014c4 <HAL_GetTick>
 8002a66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a6a:	f7fe fd2b 	bl	80014c4 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e1ef      	b.n	8002e5c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a7c:	4b2b      	ldr	r3, [pc, #172]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 8002a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0f0      	beq.n	8002a6a <HAL_RCC_OscConfig+0x45a>
 8002a88:	e018      	b.n	8002abc <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a8a:	4b28      	ldr	r3, [pc, #160]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 8002a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a8e:	4a27      	ldr	r2, [pc, #156]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 8002a90:	f023 0301 	bic.w	r3, r3, #1
 8002a94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a96:	f7fe fd15 	bl	80014c4 <HAL_GetTick>
 8002a9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a9e:	f7fe fd11 	bl	80014c4 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e1d5      	b.n	8002e5c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ab0:	4b1e      	ldr	r3, [pc, #120]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 8002ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1f0      	bne.n	8002a9e <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0320 	and.w	r3, r3, #32
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d039      	beq.n	8002b3c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d019      	beq.n	8002b04 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ad0:	4b16      	ldr	r3, [pc, #88]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a15      	ldr	r2, [pc, #84]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 8002ad6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ada:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002adc:	f7fe fcf2 	bl	80014c4 <HAL_GetTick>
 8002ae0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002ae4:	f7fe fcee 	bl	80014c4 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e1b2      	b.n	8002e5c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002af6:	4b0d      	ldr	r3, [pc, #52]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0f0      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x4d4>
 8002b02:	e01b      	b.n	8002b3c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b04:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a08      	ldr	r2, [pc, #32]	; (8002b2c <HAL_RCC_OscConfig+0x51c>)
 8002b0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b0e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b10:	f7fe fcd8 	bl	80014c4 <HAL_GetTick>
 8002b14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b16:	e00b      	b.n	8002b30 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002b18:	f7fe fcd4 	bl	80014c4 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d904      	bls.n	8002b30 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e198      	b.n	8002e5c <HAL_RCC_OscConfig+0x84c>
 8002b2a:	bf00      	nop
 8002b2c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b30:	4ba3      	ldr	r3, [pc, #652]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1ed      	bne.n	8002b18 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 8081 	beq.w	8002c4c <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b4a:	4b9e      	ldr	r3, [pc, #632]	; (8002dc4 <HAL_RCC_OscConfig+0x7b4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a9d      	ldr	r2, [pc, #628]	; (8002dc4 <HAL_RCC_OscConfig+0x7b4>)
 8002b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b56:	f7fe fcb5 	bl	80014c4 <HAL_GetTick>
 8002b5a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b5e:	f7fe fcb1 	bl	80014c4 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b64      	cmp	r3, #100	; 0x64
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e175      	b.n	8002e5c <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b70:	4b94      	ldr	r3, [pc, #592]	; (8002dc4 <HAL_RCC_OscConfig+0x7b4>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d106      	bne.n	8002b92 <HAL_RCC_OscConfig+0x582>
 8002b84:	4b8e      	ldr	r3, [pc, #568]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b88:	4a8d      	ldr	r2, [pc, #564]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b90:	e02d      	b.n	8002bee <HAL_RCC_OscConfig+0x5de>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10c      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x5a4>
 8002b9a:	4b89      	ldr	r3, [pc, #548]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9e:	4a88      	ldr	r2, [pc, #544]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002ba0:	f023 0301 	bic.w	r3, r3, #1
 8002ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba6:	4b86      	ldr	r3, [pc, #536]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002baa:	4a85      	ldr	r2, [pc, #532]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002bac:	f023 0304 	bic.w	r3, r3, #4
 8002bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb2:	e01c      	b.n	8002bee <HAL_RCC_OscConfig+0x5de>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2b05      	cmp	r3, #5
 8002bba:	d10c      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x5c6>
 8002bbc:	4b80      	ldr	r3, [pc, #512]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc0:	4a7f      	ldr	r2, [pc, #508]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002bc2:	f043 0304 	orr.w	r3, r3, #4
 8002bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc8:	4b7d      	ldr	r3, [pc, #500]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bcc:	4a7c      	ldr	r2, [pc, #496]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd4:	e00b      	b.n	8002bee <HAL_RCC_OscConfig+0x5de>
 8002bd6:	4b7a      	ldr	r3, [pc, #488]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bda:	4a79      	ldr	r2, [pc, #484]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002bdc:	f023 0301 	bic.w	r3, r3, #1
 8002be0:	6713      	str	r3, [r2, #112]	; 0x70
 8002be2:	4b77      	ldr	r3, [pc, #476]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be6:	4a76      	ldr	r2, [pc, #472]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002be8:	f023 0304 	bic.w	r3, r3, #4
 8002bec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d015      	beq.n	8002c22 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf6:	f7fe fc65 	bl	80014c4 <HAL_GetTick>
 8002bfa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bfc:	e00a      	b.n	8002c14 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bfe:	f7fe fc61 	bl	80014c4 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e123      	b.n	8002e5c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c14:	4b6a      	ldr	r3, [pc, #424]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0ee      	beq.n	8002bfe <HAL_RCC_OscConfig+0x5ee>
 8002c20:	e014      	b.n	8002c4c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c22:	f7fe fc4f 	bl	80014c4 <HAL_GetTick>
 8002c26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c28:	e00a      	b.n	8002c40 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c2a:	f7fe fc4b 	bl	80014c4 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e10d      	b.n	8002e5c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c40:	4b5f      	ldr	r3, [pc, #380]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1ee      	bne.n	8002c2a <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 8102 	beq.w	8002e5a <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c56:	4b5a      	ldr	r3, [pc, #360]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c5e:	2b18      	cmp	r3, #24
 8002c60:	f000 80bd 	beq.w	8002dde <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	f040 8095 	bne.w	8002d98 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6e:	4b54      	ldr	r3, [pc, #336]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a53      	ldr	r2, [pc, #332]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002c74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7a:	f7fe fc23 	bl	80014c4 <HAL_GetTick>
 8002c7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c82:	f7fe fc1f 	bl	80014c4 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e0e3      	b.n	8002e5c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c94:	4b4a      	ldr	r3, [pc, #296]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1f0      	bne.n	8002c82 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ca0:	4b47      	ldr	r3, [pc, #284]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002ca2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ca4:	4b48      	ldr	r3, [pc, #288]	; (8002dc8 <HAL_RCC_OscConfig+0x7b8>)
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002cb0:	0112      	lsls	r2, r2, #4
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	4942      	ldr	r1, [pc, #264]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	628b      	str	r3, [r1, #40]	; 0x28
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	025b      	lsls	r3, r3, #9
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	041b      	lsls	r3, r3, #16
 8002cd8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	061b      	lsls	r3, r3, #24
 8002ce6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002cea:	4935      	ldr	r1, [pc, #212]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002cf0:	4b33      	ldr	r3, [pc, #204]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	4a32      	ldr	r2, [pc, #200]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002cf6:	f023 0301 	bic.w	r3, r3, #1
 8002cfa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002cfc:	4b30      	ldr	r3, [pc, #192]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002cfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d00:	4b32      	ldr	r3, [pc, #200]	; (8002dcc <HAL_RCC_OscConfig+0x7bc>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d08:	00d2      	lsls	r2, r2, #3
 8002d0a:	492d      	ldr	r1, [pc, #180]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d10:	4b2b      	ldr	r3, [pc, #172]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d14:	f023 020c 	bic.w	r2, r3, #12
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	4928      	ldr	r1, [pc, #160]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d22:	4b27      	ldr	r3, [pc, #156]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d26:	f023 0202 	bic.w	r2, r3, #2
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	4924      	ldr	r1, [pc, #144]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d34:	4b22      	ldr	r3, [pc, #136]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	4a21      	ldr	r2, [pc, #132]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d40:	4b1f      	ldr	r3, [pc, #124]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	4a1e      	ldr	r2, [pc, #120]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d4c:	4b1c      	ldr	r3, [pc, #112]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d50:	4a1b      	ldr	r2, [pc, #108]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002d52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002d58:	4b19      	ldr	r3, [pc, #100]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	4a18      	ldr	r2, [pc, #96]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d64:	4b16      	ldr	r3, [pc, #88]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a15      	ldr	r2, [pc, #84]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002d6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d70:	f7fe fba8 	bl	80014c4 <HAL_GetTick>
 8002d74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d78:	f7fe fba4 	bl	80014c4 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e068      	b.n	8002e5c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0f0      	beq.n	8002d78 <HAL_RCC_OscConfig+0x768>
 8002d96:	e060      	b.n	8002e5a <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d98:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a08      	ldr	r2, [pc, #32]	; (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002d9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da4:	f7fe fb8e 	bl	80014c4 <HAL_GetTick>
 8002da8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002daa:	e011      	b.n	8002dd0 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dac:	f7fe fb8a 	bl	80014c4 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d90a      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e04e      	b.n	8002e5c <HAL_RCC_OscConfig+0x84c>
 8002dbe:	bf00      	nop
 8002dc0:	58024400 	.word	0x58024400
 8002dc4:	58024800 	.word	0x58024800
 8002dc8:	fffffc0c 	.word	0xfffffc0c
 8002dcc:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dd0:	4b24      	ldr	r3, [pc, #144]	; (8002e64 <HAL_RCC_OscConfig+0x854>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1e7      	bne.n	8002dac <HAL_RCC_OscConfig+0x79c>
 8002ddc:	e03d      	b.n	8002e5a <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002dde:	4b21      	ldr	r3, [pc, #132]	; (8002e64 <HAL_RCC_OscConfig+0x854>)
 8002de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002de4:	4b1f      	ldr	r3, [pc, #124]	; (8002e64 <HAL_RCC_OscConfig+0x854>)
 8002de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de8:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d031      	beq.n	8002e56 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	f003 0203 	and.w	r2, r3, #3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d12a      	bne.n	8002e56 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	091b      	lsrs	r3, r3, #4
 8002e04:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d122      	bne.n	8002e56 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d11a      	bne.n	8002e56 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	0a5b      	lsrs	r3, r3, #9
 8002e24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e2c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d111      	bne.n	8002e56 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	0c1b      	lsrs	r3, r3, #16
 8002e36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d108      	bne.n	8002e56 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	0e1b      	lsrs	r3, r3, #24
 8002e48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e50:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d001      	beq.n	8002e5a <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3730      	adds	r7, #48	; 0x30
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	58024400 	.word	0x58024400

08002e68 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e19c      	b.n	80031b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e7c:	4b8a      	ldr	r3, [pc, #552]	; (80030a8 <HAL_RCC_ClockConfig+0x240>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 030f 	and.w	r3, r3, #15
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d910      	bls.n	8002eac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8a:	4b87      	ldr	r3, [pc, #540]	; (80030a8 <HAL_RCC_ClockConfig+0x240>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 020f 	bic.w	r2, r3, #15
 8002e92:	4985      	ldr	r1, [pc, #532]	; (80030a8 <HAL_RCC_ClockConfig+0x240>)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9a:	4b83      	ldr	r3, [pc, #524]	; (80030a8 <HAL_RCC_ClockConfig+0x240>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e184      	b.n	80031b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d010      	beq.n	8002eda <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	4b7b      	ldr	r3, [pc, #492]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d908      	bls.n	8002eda <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ec8:	4b78      	ldr	r3, [pc, #480]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	4975      	ldr	r1, [pc, #468]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d010      	beq.n	8002f08 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695a      	ldr	r2, [r3, #20]
 8002eea:	4b70      	ldr	r3, [pc, #448]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d908      	bls.n	8002f08 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ef6:	4b6d      	ldr	r3, [pc, #436]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	496a      	ldr	r1, [pc, #424]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0310 	and.w	r3, r3, #16
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d010      	beq.n	8002f36 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699a      	ldr	r2, [r3, #24]
 8002f18:	4b64      	ldr	r3, [pc, #400]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d908      	bls.n	8002f36 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f24:	4b61      	ldr	r3, [pc, #388]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	495e      	ldr	r1, [pc, #376]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0320 	and.w	r3, r3, #32
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d010      	beq.n	8002f64 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69da      	ldr	r2, [r3, #28]
 8002f46:	4b59      	ldr	r3, [pc, #356]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d908      	bls.n	8002f64 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002f52:	4b56      	ldr	r3, [pc, #344]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	4953      	ldr	r1, [pc, #332]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d010      	beq.n	8002f92 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	4b4d      	ldr	r3, [pc, #308]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d908      	bls.n	8002f92 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f80:	4b4a      	ldr	r3, [pc, #296]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	f023 020f 	bic.w	r2, r3, #15
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	4947      	ldr	r1, [pc, #284]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d055      	beq.n	800304a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f9e:	4b43      	ldr	r3, [pc, #268]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	4940      	ldr	r1, [pc, #256]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d107      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fb8:	4b3c      	ldr	r3, [pc, #240]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d121      	bne.n	8003008 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0f6      	b.n	80031b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b03      	cmp	r3, #3
 8002fce:	d107      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fd0:	4b36      	ldr	r3, [pc, #216]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d115      	bne.n	8003008 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0ea      	b.n	80031b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d107      	bne.n	8002ff8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fe8:	4b30      	ldr	r3, [pc, #192]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d109      	bne.n	8003008 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e0de      	b.n	80031b6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ff8:	4b2c      	ldr	r3, [pc, #176]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0d6      	b.n	80031b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003008:	4b28      	ldr	r3, [pc, #160]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	f023 0207 	bic.w	r2, r3, #7
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	4925      	ldr	r1, [pc, #148]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8003016:	4313      	orrs	r3, r2
 8003018:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301a:	f7fe fa53 	bl	80014c4 <HAL_GetTick>
 800301e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003020:	e00a      	b.n	8003038 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003022:	f7fe fa4f 	bl	80014c4 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003030:	4293      	cmp	r3, r2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e0be      	b.n	80031b6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003038:	4b1c      	ldr	r3, [pc, #112]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	429a      	cmp	r2, r3
 8003048:	d1eb      	bne.n	8003022 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d010      	beq.n	8003078 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68da      	ldr	r2, [r3, #12]
 800305a:	4b14      	ldr	r3, [pc, #80]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	429a      	cmp	r2, r3
 8003064:	d208      	bcs.n	8003078 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003066:	4b11      	ldr	r3, [pc, #68]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	f023 020f 	bic.w	r2, r3, #15
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	490e      	ldr	r1, [pc, #56]	; (80030ac <HAL_RCC_ClockConfig+0x244>)
 8003074:	4313      	orrs	r3, r2
 8003076:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <HAL_RCC_ClockConfig+0x240>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 030f 	and.w	r3, r3, #15
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d214      	bcs.n	80030b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003086:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <HAL_RCC_ClockConfig+0x240>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 020f 	bic.w	r2, r3, #15
 800308e:	4906      	ldr	r1, [pc, #24]	; (80030a8 <HAL_RCC_ClockConfig+0x240>)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	4313      	orrs	r3, r2
 8003094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003096:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <HAL_RCC_ClockConfig+0x240>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d005      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e086      	b.n	80031b6 <HAL_RCC_ClockConfig+0x34e>
 80030a8:	52002000 	.word	0x52002000
 80030ac:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d010      	beq.n	80030de <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691a      	ldr	r2, [r3, #16]
 80030c0:	4b3f      	ldr	r3, [pc, #252]	; (80031c0 <HAL_RCC_ClockConfig+0x358>)
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d208      	bcs.n	80030de <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030cc:	4b3c      	ldr	r3, [pc, #240]	; (80031c0 <HAL_RCC_ClockConfig+0x358>)
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	4939      	ldr	r1, [pc, #228]	; (80031c0 <HAL_RCC_ClockConfig+0x358>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d010      	beq.n	800310c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	695a      	ldr	r2, [r3, #20]
 80030ee:	4b34      	ldr	r3, [pc, #208]	; (80031c0 <HAL_RCC_ClockConfig+0x358>)
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d208      	bcs.n	800310c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030fa:	4b31      	ldr	r3, [pc, #196]	; (80031c0 <HAL_RCC_ClockConfig+0x358>)
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	492e      	ldr	r1, [pc, #184]	; (80031c0 <HAL_RCC_ClockConfig+0x358>)
 8003108:	4313      	orrs	r3, r2
 800310a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	2b00      	cmp	r3, #0
 8003116:	d010      	beq.n	800313a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699a      	ldr	r2, [r3, #24]
 800311c:	4b28      	ldr	r3, [pc, #160]	; (80031c0 <HAL_RCC_ClockConfig+0x358>)
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003124:	429a      	cmp	r2, r3
 8003126:	d208      	bcs.n	800313a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003128:	4b25      	ldr	r3, [pc, #148]	; (80031c0 <HAL_RCC_ClockConfig+0x358>)
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	4922      	ldr	r1, [pc, #136]	; (80031c0 <HAL_RCC_ClockConfig+0x358>)
 8003136:	4313      	orrs	r3, r2
 8003138:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0320 	and.w	r3, r3, #32
 8003142:	2b00      	cmp	r3, #0
 8003144:	d010      	beq.n	8003168 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69da      	ldr	r2, [r3, #28]
 800314a:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <HAL_RCC_ClockConfig+0x358>)
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003152:	429a      	cmp	r2, r3
 8003154:	d208      	bcs.n	8003168 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003156:	4b1a      	ldr	r3, [pc, #104]	; (80031c0 <HAL_RCC_ClockConfig+0x358>)
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	4917      	ldr	r1, [pc, #92]	; (80031c0 <HAL_RCC_ClockConfig+0x358>)
 8003164:	4313      	orrs	r3, r2
 8003166:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003168:	f000 f834 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 800316c:	4602      	mov	r2, r0
 800316e:	4b14      	ldr	r3, [pc, #80]	; (80031c0 <HAL_RCC_ClockConfig+0x358>)
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	0a1b      	lsrs	r3, r3, #8
 8003174:	f003 030f 	and.w	r3, r3, #15
 8003178:	4912      	ldr	r1, [pc, #72]	; (80031c4 <HAL_RCC_ClockConfig+0x35c>)
 800317a:	5ccb      	ldrb	r3, [r1, r3]
 800317c:	f003 031f 	and.w	r3, r3, #31
 8003180:	fa22 f303 	lsr.w	r3, r2, r3
 8003184:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003186:	4b0e      	ldr	r3, [pc, #56]	; (80031c0 <HAL_RCC_ClockConfig+0x358>)
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	4a0d      	ldr	r2, [pc, #52]	; (80031c4 <HAL_RCC_ClockConfig+0x35c>)
 8003190:	5cd3      	ldrb	r3, [r2, r3]
 8003192:	f003 031f 	and.w	r3, r3, #31
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	fa22 f303 	lsr.w	r3, r2, r3
 800319c:	4a0a      	ldr	r2, [pc, #40]	; (80031c8 <HAL_RCC_ClockConfig+0x360>)
 800319e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031a0:	4a0a      	ldr	r2, [pc, #40]	; (80031cc <HAL_RCC_ClockConfig+0x364>)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80031a6:	4b0a      	ldr	r3, [pc, #40]	; (80031d0 <HAL_RCC_ClockConfig+0x368>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fe f940 	bl	8001430 <HAL_InitTick>
 80031b0:	4603      	mov	r3, r0
 80031b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	58024400 	.word	0x58024400
 80031c4:	0800a02c 	.word	0x0800a02c
 80031c8:	24000004 	.word	0x24000004
 80031cc:	24000000 	.word	0x24000000
 80031d0:	24000008 	.word	0x24000008

080031d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b089      	sub	sp, #36	; 0x24
 80031d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031da:	4bb3      	ldr	r3, [pc, #716]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031e2:	2b18      	cmp	r3, #24
 80031e4:	f200 8155 	bhi.w	8003492 <HAL_RCC_GetSysClockFreq+0x2be>
 80031e8:	a201      	add	r2, pc, #4	; (adr r2, 80031f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80031ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ee:	bf00      	nop
 80031f0:	08003255 	.word	0x08003255
 80031f4:	08003493 	.word	0x08003493
 80031f8:	08003493 	.word	0x08003493
 80031fc:	08003493 	.word	0x08003493
 8003200:	08003493 	.word	0x08003493
 8003204:	08003493 	.word	0x08003493
 8003208:	08003493 	.word	0x08003493
 800320c:	08003493 	.word	0x08003493
 8003210:	0800327b 	.word	0x0800327b
 8003214:	08003493 	.word	0x08003493
 8003218:	08003493 	.word	0x08003493
 800321c:	08003493 	.word	0x08003493
 8003220:	08003493 	.word	0x08003493
 8003224:	08003493 	.word	0x08003493
 8003228:	08003493 	.word	0x08003493
 800322c:	08003493 	.word	0x08003493
 8003230:	08003281 	.word	0x08003281
 8003234:	08003493 	.word	0x08003493
 8003238:	08003493 	.word	0x08003493
 800323c:	08003493 	.word	0x08003493
 8003240:	08003493 	.word	0x08003493
 8003244:	08003493 	.word	0x08003493
 8003248:	08003493 	.word	0x08003493
 800324c:	08003493 	.word	0x08003493
 8003250:	08003287 	.word	0x08003287
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003254:	4b94      	ldr	r3, [pc, #592]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	2b00      	cmp	r3, #0
 800325e:	d009      	beq.n	8003274 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003260:	4b91      	ldr	r3, [pc, #580]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	08db      	lsrs	r3, r3, #3
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	4a90      	ldr	r2, [pc, #576]	; (80034ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
 8003270:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003272:	e111      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003274:	4b8d      	ldr	r3, [pc, #564]	; (80034ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003276:	61bb      	str	r3, [r7, #24]
    break;
 8003278:	e10e      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800327a:	4b8d      	ldr	r3, [pc, #564]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800327c:	61bb      	str	r3, [r7, #24]
    break;
 800327e:	e10b      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003280:	4b8c      	ldr	r3, [pc, #560]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003282:	61bb      	str	r3, [r7, #24]
    break;
 8003284:	e108      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003286:	4b88      	ldr	r3, [pc, #544]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003290:	4b85      	ldr	r3, [pc, #532]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800329a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800329c:	4b82      	ldr	r3, [pc, #520]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80032a6:	4b80      	ldr	r3, [pc, #512]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032aa:	08db      	lsrs	r3, r3, #3
 80032ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	fb02 f303 	mul.w	r3, r2, r3
 80032b6:	ee07 3a90 	vmov	s15, r3
 80032ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032be:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 80e1 	beq.w	800348c <HAL_RCC_GetSysClockFreq+0x2b8>
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	f000 8083 	beq.w	80033d8 <HAL_RCC_GetSysClockFreq+0x204>
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	f200 80a1 	bhi.w	800341c <HAL_RCC_GetSysClockFreq+0x248>
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0x114>
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d056      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x1c0>
 80032e6:	e099      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032e8:	4b6f      	ldr	r3, [pc, #444]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d02d      	beq.n	8003350 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80032f4:	4b6c      	ldr	r3, [pc, #432]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	08db      	lsrs	r3, r3, #3
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	4a6b      	ldr	r2, [pc, #428]	; (80034ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003300:	fa22 f303 	lsr.w	r3, r2, r3
 8003304:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	ee07 3a90 	vmov	s15, r3
 800330c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	ee07 3a90 	vmov	s15, r3
 8003316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800331a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800331e:	4b62      	ldr	r3, [pc, #392]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003326:	ee07 3a90 	vmov	s15, r3
 800332a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800332e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003332:	eddf 5a61 	vldr	s11, [pc, #388]	; 80034b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800333a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800333e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800334a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800334e:	e087      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	ee07 3a90 	vmov	s15, r3
 8003356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800335a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80034bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800335e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003362:	4b51      	ldr	r3, [pc, #324]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800336a:	ee07 3a90 	vmov	s15, r3
 800336e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003372:	ed97 6a02 	vldr	s12, [r7, #8]
 8003376:	eddf 5a50 	vldr	s11, [pc, #320]	; 80034b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800337a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800337e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800338a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800338e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003392:	e065      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	ee07 3a90 	vmov	s15, r3
 800339a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800339e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80034c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033a6:	4b40      	ldr	r3, [pc, #256]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ae:	ee07 3a90 	vmov	s15, r3
 80033b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80033ba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80034b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033d6:	e043      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	ee07 3a90 	vmov	s15, r3
 80033de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80034c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80033e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ea:	4b2f      	ldr	r3, [pc, #188]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f2:	ee07 3a90 	vmov	s15, r3
 80033f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80033fe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80034b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800340a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800340e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003416:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800341a:	e021      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	ee07 3a90 	vmov	s15, r3
 8003422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003426:	eddf 6a26 	vldr	s13, [pc, #152]	; 80034c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800342a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800342e:	4b1e      	ldr	r3, [pc, #120]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003436:	ee07 3a90 	vmov	s15, r3
 800343a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800343e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003442:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80034b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800344a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800344e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800345a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800345e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003460:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003464:	0a5b      	lsrs	r3, r3, #9
 8003466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800346a:	3301      	adds	r3, #1
 800346c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	ee07 3a90 	vmov	s15, r3
 8003474:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003478:	edd7 6a07 	vldr	s13, [r7, #28]
 800347c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003484:	ee17 3a90 	vmov	r3, s15
 8003488:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800348a:	e005      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	61bb      	str	r3, [r7, #24]
    break;
 8003490:	e002      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003492:	4b07      	ldr	r3, [pc, #28]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003494:	61bb      	str	r3, [r7, #24]
    break;
 8003496:	bf00      	nop
  }

  return sysclockfreq;
 8003498:	69bb      	ldr	r3, [r7, #24]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3724      	adds	r7, #36	; 0x24
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	58024400 	.word	0x58024400
 80034ac:	03d09000 	.word	0x03d09000
 80034b0:	003d0900 	.word	0x003d0900
 80034b4:	007a1200 	.word	0x007a1200
 80034b8:	46000000 	.word	0x46000000
 80034bc:	4c742400 	.word	0x4c742400
 80034c0:	4a742400 	.word	0x4a742400
 80034c4:	4af42400 	.word	0x4af42400

080034c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034ce:	f7ff fe81 	bl	80031d4 <HAL_RCC_GetSysClockFreq>
 80034d2:	4602      	mov	r2, r0
 80034d4:	4b10      	ldr	r3, [pc, #64]	; (8003518 <HAL_RCC_GetHCLKFreq+0x50>)
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	0a1b      	lsrs	r3, r3, #8
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	490f      	ldr	r1, [pc, #60]	; (800351c <HAL_RCC_GetHCLKFreq+0x54>)
 80034e0:	5ccb      	ldrb	r3, [r1, r3]
 80034e2:	f003 031f 	and.w	r3, r3, #31
 80034e6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034ec:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <HAL_RCC_GetHCLKFreq+0x50>)
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	f003 030f 	and.w	r3, r3, #15
 80034f4:	4a09      	ldr	r2, [pc, #36]	; (800351c <HAL_RCC_GetHCLKFreq+0x54>)
 80034f6:	5cd3      	ldrb	r3, [r2, r3]
 80034f8:	f003 031f 	and.w	r3, r3, #31
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003502:	4a07      	ldr	r2, [pc, #28]	; (8003520 <HAL_RCC_GetHCLKFreq+0x58>)
 8003504:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003506:	4a07      	ldr	r2, [pc, #28]	; (8003524 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800350c:	4b04      	ldr	r3, [pc, #16]	; (8003520 <HAL_RCC_GetHCLKFreq+0x58>)
 800350e:	681b      	ldr	r3, [r3, #0]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	58024400 	.word	0x58024400
 800351c:	0800a02c 	.word	0x0800a02c
 8003520:	24000004 	.word	0x24000004
 8003524:	24000000 	.word	0x24000000

08003528 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800352c:	f7ff ffcc 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 8003530:	4602      	mov	r2, r0
 8003532:	4b06      	ldr	r3, [pc, #24]	; (800354c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	091b      	lsrs	r3, r3, #4
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	4904      	ldr	r1, [pc, #16]	; (8003550 <HAL_RCC_GetPCLK1Freq+0x28>)
 800353e:	5ccb      	ldrb	r3, [r1, r3]
 8003540:	f003 031f 	and.w	r3, r3, #31
 8003544:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003548:	4618      	mov	r0, r3
 800354a:	bd80      	pop	{r7, pc}
 800354c:	58024400 	.word	0x58024400
 8003550:	0800a02c 	.word	0x0800a02c

08003554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003558:	f7ff ffb6 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 800355c:	4602      	mov	r2, r0
 800355e:	4b06      	ldr	r3, [pc, #24]	; (8003578 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	0a1b      	lsrs	r3, r3, #8
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	4904      	ldr	r1, [pc, #16]	; (800357c <HAL_RCC_GetPCLK2Freq+0x28>)
 800356a:	5ccb      	ldrb	r3, [r1, r3]
 800356c:	f003 031f 	and.w	r3, r3, #31
 8003570:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003574:	4618      	mov	r0, r3
 8003576:	bd80      	pop	{r7, pc}
 8003578:	58024400 	.word	0x58024400
 800357c:	0800a02c 	.word	0x0800a02c

08003580 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003588:	2300      	movs	r3, #0
 800358a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800358c:	2300      	movs	r3, #0
 800358e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d03f      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035a4:	d02a      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80035a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035aa:	d824      	bhi.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035b0:	d018      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035b6:	d81e      	bhi.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80035bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035c0:	d007      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80035c2:	e018      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035c4:	4bab      	ldr	r3, [pc, #684]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	4aaa      	ldr	r2, [pc, #680]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80035d0:	e015      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	3304      	adds	r3, #4
 80035d6:	2102      	movs	r1, #2
 80035d8:	4618      	mov	r0, r3
 80035da:	f001 fff3 	bl	80055c4 <RCCEx_PLL2_Config>
 80035de:	4603      	mov	r3, r0
 80035e0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80035e2:	e00c      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3324      	adds	r3, #36	; 0x24
 80035e8:	2102      	movs	r1, #2
 80035ea:	4618      	mov	r0, r3
 80035ec:	f002 f89c 	bl	8005728 <RCCEx_PLL3_Config>
 80035f0:	4603      	mov	r3, r0
 80035f2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80035f4:	e003      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	75fb      	strb	r3, [r7, #23]
      break;
 80035fa:	e000      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80035fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035fe:	7dfb      	ldrb	r3, [r7, #23]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d109      	bne.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003604:	4b9b      	ldr	r3, [pc, #620]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003608:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003610:	4998      	ldr	r1, [pc, #608]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003612:	4313      	orrs	r3, r2
 8003614:	650b      	str	r3, [r1, #80]	; 0x50
 8003616:	e001      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003618:	7dfb      	ldrb	r3, [r7, #23]
 800361a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003624:	2b00      	cmp	r3, #0
 8003626:	d03d      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362c:	2b04      	cmp	r3, #4
 800362e:	d826      	bhi.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003630:	a201      	add	r2, pc, #4	; (adr r2, 8003638 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003636:	bf00      	nop
 8003638:	0800364d 	.word	0x0800364d
 800363c:	0800365b 	.word	0x0800365b
 8003640:	0800366d 	.word	0x0800366d
 8003644:	08003685 	.word	0x08003685
 8003648:	08003685 	.word	0x08003685
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800364c:	4b89      	ldr	r3, [pc, #548]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800364e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003650:	4a88      	ldr	r2, [pc, #544]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003656:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003658:	e015      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	3304      	adds	r3, #4
 800365e:	2100      	movs	r1, #0
 8003660:	4618      	mov	r0, r3
 8003662:	f001 ffaf 	bl	80055c4 <RCCEx_PLL2_Config>
 8003666:	4603      	mov	r3, r0
 8003668:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800366a:	e00c      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3324      	adds	r3, #36	; 0x24
 8003670:	2100      	movs	r1, #0
 8003672:	4618      	mov	r0, r3
 8003674:	f002 f858 	bl	8005728 <RCCEx_PLL3_Config>
 8003678:	4603      	mov	r3, r0
 800367a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800367c:	e003      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	75fb      	strb	r3, [r7, #23]
      break;
 8003682:	e000      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003684:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003686:	7dfb      	ldrb	r3, [r7, #23]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d109      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800368c:	4b79      	ldr	r3, [pc, #484]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800368e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003690:	f023 0207 	bic.w	r2, r3, #7
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003698:	4976      	ldr	r1, [pc, #472]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800369a:	4313      	orrs	r3, r2
 800369c:	650b      	str	r3, [r1, #80]	; 0x50
 800369e:	e001      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a0:	7dfb      	ldrb	r3, [r7, #23]
 80036a2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d042      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036b8:	d02b      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80036ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036be:	d825      	bhi.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80036c0:	2bc0      	cmp	r3, #192	; 0xc0
 80036c2:	d028      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80036c4:	2bc0      	cmp	r3, #192	; 0xc0
 80036c6:	d821      	bhi.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80036c8:	2b80      	cmp	r3, #128	; 0x80
 80036ca:	d016      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80036cc:	2b80      	cmp	r3, #128	; 0x80
 80036ce:	d81d      	bhi.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d002      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80036d4:	2b40      	cmp	r3, #64	; 0x40
 80036d6:	d007      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80036d8:	e018      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036da:	4b66      	ldr	r3, [pc, #408]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	4a65      	ldr	r2, [pc, #404]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80036e6:	e017      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3304      	adds	r3, #4
 80036ec:	2100      	movs	r1, #0
 80036ee:	4618      	mov	r0, r3
 80036f0:	f001 ff68 	bl	80055c4 <RCCEx_PLL2_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80036f8:	e00e      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3324      	adds	r3, #36	; 0x24
 80036fe:	2100      	movs	r1, #0
 8003700:	4618      	mov	r0, r3
 8003702:	f002 f811 	bl	8005728 <RCCEx_PLL3_Config>
 8003706:	4603      	mov	r3, r0
 8003708:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800370a:	e005      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	75fb      	strb	r3, [r7, #23]
      break;
 8003710:	e002      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003712:	bf00      	nop
 8003714:	e000      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003716:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003718:	7dfb      	ldrb	r3, [r7, #23]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d109      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800371e:	4b55      	ldr	r3, [pc, #340]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003722:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372a:	4952      	ldr	r1, [pc, #328]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800372c:	4313      	orrs	r3, r2
 800372e:	650b      	str	r3, [r1, #80]	; 0x50
 8003730:	e001      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003732:	7dfb      	ldrb	r3, [r7, #23]
 8003734:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800373e:	2b00      	cmp	r3, #0
 8003740:	d049      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003748:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800374c:	d030      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800374e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003752:	d82a      	bhi.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003754:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003758:	d02c      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800375a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800375e:	d824      	bhi.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003760:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003764:	d018      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800376a:	d81e      	bhi.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003770:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003774:	d007      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003776:	e018      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003778:	4b3e      	ldr	r3, [pc, #248]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377c:	4a3d      	ldr	r2, [pc, #244]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800377e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003782:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003784:	e017      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	3304      	adds	r3, #4
 800378a:	2100      	movs	r1, #0
 800378c:	4618      	mov	r0, r3
 800378e:	f001 ff19 	bl	80055c4 <RCCEx_PLL2_Config>
 8003792:	4603      	mov	r3, r0
 8003794:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003796:	e00e      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3324      	adds	r3, #36	; 0x24
 800379c:	2100      	movs	r1, #0
 800379e:	4618      	mov	r0, r3
 80037a0:	f001 ffc2 	bl	8005728 <RCCEx_PLL3_Config>
 80037a4:	4603      	mov	r3, r0
 80037a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037a8:	e005      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	75fb      	strb	r3, [r7, #23]
      break;
 80037ae:	e002      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80037b0:	bf00      	nop
 80037b2:	e000      	b.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80037b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037b6:	7dfb      	ldrb	r3, [r7, #23]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10a      	bne.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80037bc:	4b2d      	ldr	r3, [pc, #180]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037ca:	492a      	ldr	r1, [pc, #168]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	658b      	str	r3, [r1, #88]	; 0x58
 80037d0:	e001      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d2:	7dfb      	ldrb	r3, [r7, #23]
 80037d4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d04c      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037ec:	d030      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80037ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037f2:	d82a      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80037f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80037f8:	d02c      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80037fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80037fe:	d824      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003800:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003804:	d018      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003806:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800380a:	d81e      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800380c:	2b00      	cmp	r3, #0
 800380e:	d003      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003814:	d007      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003816:	e018      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003818:	4b16      	ldr	r3, [pc, #88]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	4a15      	ldr	r2, [pc, #84]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800381e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003822:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003824:	e017      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	3304      	adds	r3, #4
 800382a:	2100      	movs	r1, #0
 800382c:	4618      	mov	r0, r3
 800382e:	f001 fec9 	bl	80055c4 <RCCEx_PLL2_Config>
 8003832:	4603      	mov	r3, r0
 8003834:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003836:	e00e      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3324      	adds	r3, #36	; 0x24
 800383c:	2100      	movs	r1, #0
 800383e:	4618      	mov	r0, r3
 8003840:	f001 ff72 	bl	8005728 <RCCEx_PLL3_Config>
 8003844:	4603      	mov	r3, r0
 8003846:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003848:	e005      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	75fb      	strb	r3, [r7, #23]
      break;
 800384e:	e002      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003850:	bf00      	nop
 8003852:	e000      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003854:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003856:	7dfb      	ldrb	r3, [r7, #23]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10d      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800385c:	4b05      	ldr	r3, [pc, #20]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800385e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003860:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800386a:	4902      	ldr	r1, [pc, #8]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800386c:	4313      	orrs	r3, r2
 800386e:	658b      	str	r3, [r1, #88]	; 0x58
 8003870:	e004      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003872:	bf00      	nop
 8003874:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003878:	7dfb      	ldrb	r3, [r7, #23]
 800387a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d032      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800388c:	2b30      	cmp	r3, #48	; 0x30
 800388e:	d01c      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003890:	2b30      	cmp	r3, #48	; 0x30
 8003892:	d817      	bhi.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003894:	2b20      	cmp	r3, #32
 8003896:	d00c      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003898:	2b20      	cmp	r3, #32
 800389a:	d813      	bhi.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800389c:	2b00      	cmp	r3, #0
 800389e:	d016      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80038a0:	2b10      	cmp	r3, #16
 80038a2:	d10f      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038a4:	4baf      	ldr	r3, [pc, #700]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a8:	4aae      	ldr	r2, [pc, #696]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80038b0:	e00e      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	3304      	adds	r3, #4
 80038b6:	2102      	movs	r1, #2
 80038b8:	4618      	mov	r0, r3
 80038ba:	f001 fe83 	bl	80055c4 <RCCEx_PLL2_Config>
 80038be:	4603      	mov	r3, r0
 80038c0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80038c2:	e005      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	75fb      	strb	r3, [r7, #23]
      break;
 80038c8:	e002      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80038ca:	bf00      	nop
 80038cc:	e000      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80038ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038d0:	7dfb      	ldrb	r3, [r7, #23]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d109      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80038d6:	4ba3      	ldr	r3, [pc, #652]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e2:	49a0      	ldr	r1, [pc, #640]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80038e8:	e001      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ea:	7dfb      	ldrb	r3, [r7, #23]
 80038ec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d047      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003902:	d030      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003904:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003908:	d82a      	bhi.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800390a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800390e:	d02c      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003910:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003914:	d824      	bhi.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800391a:	d018      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800391c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003920:	d81e      	bhi.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800392a:	d007      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800392c:	e018      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800392e:	4b8d      	ldr	r3, [pc, #564]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003932:	4a8c      	ldr	r2, [pc, #560]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003938:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800393a:	e017      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3304      	adds	r3, #4
 8003940:	2100      	movs	r1, #0
 8003942:	4618      	mov	r0, r3
 8003944:	f001 fe3e 	bl	80055c4 <RCCEx_PLL2_Config>
 8003948:	4603      	mov	r3, r0
 800394a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800394c:	e00e      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3324      	adds	r3, #36	; 0x24
 8003952:	2100      	movs	r1, #0
 8003954:	4618      	mov	r0, r3
 8003956:	f001 fee7 	bl	8005728 <RCCEx_PLL3_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800395e:	e005      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	75fb      	strb	r3, [r7, #23]
      break;
 8003964:	e002      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003966:	bf00      	nop
 8003968:	e000      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800396a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800396c:	7dfb      	ldrb	r3, [r7, #23]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d109      	bne.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003972:	4b7c      	ldr	r3, [pc, #496]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003976:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397e:	4979      	ldr	r1, [pc, #484]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003980:	4313      	orrs	r3, r2
 8003982:	650b      	str	r3, [r1, #80]	; 0x50
 8003984:	e001      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003986:	7dfb      	ldrb	r3, [r7, #23]
 8003988:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d049      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800399a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800399e:	d02e      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80039a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039a4:	d828      	bhi.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80039a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039aa:	d02a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80039ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039b0:	d822      	bhi.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80039b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039b6:	d026      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80039b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039bc:	d81c      	bhi.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80039be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039c2:	d010      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80039c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039c8:	d816      	bhi.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d01d      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80039ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d2:	d111      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3304      	adds	r3, #4
 80039d8:	2101      	movs	r1, #1
 80039da:	4618      	mov	r0, r3
 80039dc:	f001 fdf2 	bl	80055c4 <RCCEx_PLL2_Config>
 80039e0:	4603      	mov	r3, r0
 80039e2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80039e4:	e012      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	3324      	adds	r3, #36	; 0x24
 80039ea:	2101      	movs	r1, #1
 80039ec:	4618      	mov	r0, r3
 80039ee:	f001 fe9b 	bl	8005728 <RCCEx_PLL3_Config>
 80039f2:	4603      	mov	r3, r0
 80039f4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80039f6:	e009      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	75fb      	strb	r3, [r7, #23]
      break;
 80039fc:	e006      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80039fe:	bf00      	nop
 8003a00:	e004      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003a02:	bf00      	nop
 8003a04:	e002      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003a06:	bf00      	nop
 8003a08:	e000      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003a0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a0c:	7dfb      	ldrb	r3, [r7, #23]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d109      	bne.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a12:	4b54      	ldr	r3, [pc, #336]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a16:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a1e:	4951      	ldr	r1, [pc, #324]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	650b      	str	r3, [r1, #80]	; 0x50
 8003a24:	e001      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a26:	7dfb      	ldrb	r3, [r7, #23]
 8003a28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d04b      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a40:	d02e      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003a42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a46:	d828      	bhi.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a4c:	d02a      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a52:	d822      	bhi.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003a54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a58:	d026      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003a5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a5e:	d81c      	bhi.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003a60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a64:	d010      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003a66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a6a:	d816      	bhi.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d01d      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003a70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a74:	d111      	bne.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3304      	adds	r3, #4
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f001 fda1 	bl	80055c4 <RCCEx_PLL2_Config>
 8003a82:	4603      	mov	r3, r0
 8003a84:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003a86:	e012      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3324      	adds	r3, #36	; 0x24
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f001 fe4a 	bl	8005728 <RCCEx_PLL3_Config>
 8003a94:	4603      	mov	r3, r0
 8003a96:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003a98:	e009      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a9e:	e006      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003aa0:	bf00      	nop
 8003aa2:	e004      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003aa4:	bf00      	nop
 8003aa6:	e002      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003aa8:	bf00      	nop
 8003aaa:	e000      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003aac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aae:	7dfb      	ldrb	r3, [r7, #23]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10a      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ab4:	4b2b      	ldr	r3, [pc, #172]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ac2:	4928      	ldr	r1, [pc, #160]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	658b      	str	r3, [r1, #88]	; 0x58
 8003ac8:	e001      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aca:	7dfb      	ldrb	r3, [r7, #23]
 8003acc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d02f      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ae2:	d00e      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003ae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ae8:	d814      	bhi.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d015      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003aee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003af2:	d10f      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003af4:	4b1b      	ldr	r3, [pc, #108]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af8:	4a1a      	ldr	r2, [pc, #104]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003afe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b00:	e00c      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3304      	adds	r3, #4
 8003b06:	2101      	movs	r1, #1
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f001 fd5b 	bl	80055c4 <RCCEx_PLL2_Config>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b12:	e003      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	75fb      	strb	r3, [r7, #23]
      break;
 8003b18:	e000      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003b1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b1c:	7dfb      	ldrb	r3, [r7, #23]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d109      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b22:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b2e:	490d      	ldr	r1, [pc, #52]	; (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	650b      	str	r3, [r1, #80]	; 0x50
 8003b34:	e001      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b36:	7dfb      	ldrb	r3, [r7, #23]
 8003b38:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d033      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4a:	2b03      	cmp	r3, #3
 8003b4c:	d81c      	bhi.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003b4e:	a201      	add	r2, pc, #4	; (adr r2, 8003b54 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b54:	08003b8f 	.word	0x08003b8f
 8003b58:	08003b69 	.word	0x08003b69
 8003b5c:	08003b77 	.word	0x08003b77
 8003b60:	08003b8f 	.word	0x08003b8f
 8003b64:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b68:	4bb8      	ldr	r3, [pc, #736]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6c:	4ab7      	ldr	r2, [pc, #732]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003b74:	e00c      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	2102      	movs	r1, #2
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f001 fd21 	bl	80055c4 <RCCEx_PLL2_Config>
 8003b82:	4603      	mov	r3, r0
 8003b84:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003b86:	e003      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b8c:	e000      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003b8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b90:	7dfb      	ldrb	r3, [r7, #23]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d109      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b96:	4bad      	ldr	r3, [pc, #692]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9a:	f023 0203 	bic.w	r2, r3, #3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba2:	49aa      	ldr	r1, [pc, #680]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ba8:	e001      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003baa:	7dfb      	ldrb	r3, [r7, #23]
 8003bac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 8086 	beq.w	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bbc:	4ba4      	ldr	r3, [pc, #656]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4aa3      	ldr	r2, [pc, #652]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bc8:	f7fd fc7c 	bl	80014c4 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bce:	e009      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd0:	f7fd fc78 	bl	80014c4 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b64      	cmp	r3, #100	; 0x64
 8003bdc:	d902      	bls.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	75fb      	strb	r3, [r7, #23]
        break;
 8003be2:	e005      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003be4:	4b9a      	ldr	r3, [pc, #616]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0ef      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003bf0:	7dfb      	ldrb	r3, [r7, #23]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d166      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003bf6:	4b95      	ldr	r3, [pc, #596]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003bf8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c00:	4053      	eors	r3, r2
 8003c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d013      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c0a:	4b90      	ldr	r3, [pc, #576]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c12:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c14:	4b8d      	ldr	r3, [pc, #564]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c18:	4a8c      	ldr	r2, [pc, #560]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c1e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c20:	4b8a      	ldr	r3, [pc, #552]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c24:	4a89      	ldr	r2, [pc, #548]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c2a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c2c:	4a87      	ldr	r2, [pc, #540]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c3c:	d115      	bne.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3e:	f7fd fc41 	bl	80014c4 <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c44:	e00b      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c46:	f7fd fc3d 	bl	80014c4 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d902      	bls.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	75fb      	strb	r3, [r7, #23]
            break;
 8003c5c:	e005      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c5e:	4b7b      	ldr	r3, [pc, #492]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0ed      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003c6a:	7dfb      	ldrb	r3, [r7, #23]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d126      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c7e:	d10d      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003c80:	4b72      	ldr	r3, [pc, #456]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c8e:	0919      	lsrs	r1, r3, #4
 8003c90:	4b70      	ldr	r3, [pc, #448]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003c92:	400b      	ands	r3, r1
 8003c94:	496d      	ldr	r1, [pc, #436]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	610b      	str	r3, [r1, #16]
 8003c9a:	e005      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003c9c:	4b6b      	ldr	r3, [pc, #428]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	4a6a      	ldr	r2, [pc, #424]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ca2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ca6:	6113      	str	r3, [r2, #16]
 8003ca8:	4b68      	ldr	r3, [pc, #416]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003caa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb6:	4965      	ldr	r1, [pc, #404]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	670b      	str	r3, [r1, #112]	; 0x70
 8003cbc:	e004      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cbe:	7dfb      	ldrb	r3, [r7, #23]
 8003cc0:	75bb      	strb	r3, [r7, #22]
 8003cc2:	e001      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc4:	7dfb      	ldrb	r3, [r7, #23]
 8003cc6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d07e      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cd8:	2b28      	cmp	r3, #40	; 0x28
 8003cda:	d867      	bhi.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003cdc:	a201      	add	r2, pc, #4	; (adr r2, 8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce2:	bf00      	nop
 8003ce4:	08003db3 	.word	0x08003db3
 8003ce8:	08003dad 	.word	0x08003dad
 8003cec:	08003dad 	.word	0x08003dad
 8003cf0:	08003dad 	.word	0x08003dad
 8003cf4:	08003dad 	.word	0x08003dad
 8003cf8:	08003dad 	.word	0x08003dad
 8003cfc:	08003dad 	.word	0x08003dad
 8003d00:	08003dad 	.word	0x08003dad
 8003d04:	08003d89 	.word	0x08003d89
 8003d08:	08003dad 	.word	0x08003dad
 8003d0c:	08003dad 	.word	0x08003dad
 8003d10:	08003dad 	.word	0x08003dad
 8003d14:	08003dad 	.word	0x08003dad
 8003d18:	08003dad 	.word	0x08003dad
 8003d1c:	08003dad 	.word	0x08003dad
 8003d20:	08003dad 	.word	0x08003dad
 8003d24:	08003d9b 	.word	0x08003d9b
 8003d28:	08003dad 	.word	0x08003dad
 8003d2c:	08003dad 	.word	0x08003dad
 8003d30:	08003dad 	.word	0x08003dad
 8003d34:	08003dad 	.word	0x08003dad
 8003d38:	08003dad 	.word	0x08003dad
 8003d3c:	08003dad 	.word	0x08003dad
 8003d40:	08003dad 	.word	0x08003dad
 8003d44:	08003db3 	.word	0x08003db3
 8003d48:	08003dad 	.word	0x08003dad
 8003d4c:	08003dad 	.word	0x08003dad
 8003d50:	08003dad 	.word	0x08003dad
 8003d54:	08003dad 	.word	0x08003dad
 8003d58:	08003dad 	.word	0x08003dad
 8003d5c:	08003dad 	.word	0x08003dad
 8003d60:	08003dad 	.word	0x08003dad
 8003d64:	08003db3 	.word	0x08003db3
 8003d68:	08003dad 	.word	0x08003dad
 8003d6c:	08003dad 	.word	0x08003dad
 8003d70:	08003dad 	.word	0x08003dad
 8003d74:	08003dad 	.word	0x08003dad
 8003d78:	08003dad 	.word	0x08003dad
 8003d7c:	08003dad 	.word	0x08003dad
 8003d80:	08003dad 	.word	0x08003dad
 8003d84:	08003db3 	.word	0x08003db3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f001 fc18 	bl	80055c4 <RCCEx_PLL2_Config>
 8003d94:	4603      	mov	r3, r0
 8003d96:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003d98:	e00c      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3324      	adds	r3, #36	; 0x24
 8003d9e:	2101      	movs	r1, #1
 8003da0:	4618      	mov	r0, r3
 8003da2:	f001 fcc1 	bl	8005728 <RCCEx_PLL3_Config>
 8003da6:	4603      	mov	r3, r0
 8003da8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003daa:	e003      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	75fb      	strb	r3, [r7, #23]
      break;
 8003db0:	e000      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003db2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003db4:	7dfb      	ldrb	r3, [r7, #23]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d109      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003dba:	4b24      	ldr	r3, [pc, #144]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dbe:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dc6:	4921      	ldr	r1, [pc, #132]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	654b      	str	r3, [r1, #84]	; 0x54
 8003dcc:	e001      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dce:	7dfb      	ldrb	r3, [r7, #23]
 8003dd0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d03e      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de2:	2b05      	cmp	r3, #5
 8003de4:	d820      	bhi.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003de6:	a201      	add	r2, pc, #4	; (adr r2, 8003dec <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dec:	08003e2f 	.word	0x08003e2f
 8003df0:	08003e05 	.word	0x08003e05
 8003df4:	08003e17 	.word	0x08003e17
 8003df8:	08003e2f 	.word	0x08003e2f
 8003dfc:	08003e2f 	.word	0x08003e2f
 8003e00:	08003e2f 	.word	0x08003e2f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3304      	adds	r3, #4
 8003e08:	2101      	movs	r1, #1
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f001 fbda 	bl	80055c4 <RCCEx_PLL2_Config>
 8003e10:	4603      	mov	r3, r0
 8003e12:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e14:	e00c      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	3324      	adds	r3, #36	; 0x24
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f001 fc83 	bl	8005728 <RCCEx_PLL3_Config>
 8003e22:	4603      	mov	r3, r0
 8003e24:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e26:	e003      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e2c:	e000      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003e2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e30:	7dfb      	ldrb	r3, [r7, #23]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d110      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e36:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3a:	f023 0207 	bic.w	r2, r3, #7
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e42:	4902      	ldr	r1, [pc, #8]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	654b      	str	r3, [r1, #84]	; 0x54
 8003e48:	e008      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003e4a:	bf00      	nop
 8003e4c:	58024400 	.word	0x58024400
 8003e50:	58024800 	.word	0x58024800
 8003e54:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e58:	7dfb      	ldrb	r3, [r7, #23]
 8003e5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d039      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6e:	2b05      	cmp	r3, #5
 8003e70:	d820      	bhi.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003e72:	a201      	add	r2, pc, #4	; (adr r2, 8003e78 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e78:	08003ebb 	.word	0x08003ebb
 8003e7c:	08003e91 	.word	0x08003e91
 8003e80:	08003ea3 	.word	0x08003ea3
 8003e84:	08003ebb 	.word	0x08003ebb
 8003e88:	08003ebb 	.word	0x08003ebb
 8003e8c:	08003ebb 	.word	0x08003ebb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3304      	adds	r3, #4
 8003e94:	2101      	movs	r1, #1
 8003e96:	4618      	mov	r0, r3
 8003e98:	f001 fb94 	bl	80055c4 <RCCEx_PLL2_Config>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003ea0:	e00c      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	3324      	adds	r3, #36	; 0x24
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f001 fc3d 	bl	8005728 <RCCEx_PLL3_Config>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003eb2:	e003      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8003eb8:	e000      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003eba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ebc:	7dfb      	ldrb	r3, [r7, #23]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10a      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ec2:	4bb7      	ldr	r3, [pc, #732]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec6:	f023 0207 	bic.w	r2, r3, #7
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed0:	49b3      	ldr	r1, [pc, #716]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	658b      	str	r3, [r1, #88]	; 0x58
 8003ed6:	e001      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed8:	7dfb      	ldrb	r3, [r7, #23]
 8003eda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0320 	and.w	r3, r3, #32
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d04b      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ef2:	d02e      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003ef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ef8:	d828      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efe:	d02a      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f04:	d822      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003f06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f0a:	d026      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003f0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f10:	d81c      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003f12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f16:	d010      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f1c:	d816      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d01d      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003f22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f26:	d111      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f001 fb48 	bl	80055c4 <RCCEx_PLL2_Config>
 8003f34:	4603      	mov	r3, r0
 8003f36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003f38:	e012      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3324      	adds	r3, #36	; 0x24
 8003f3e:	2102      	movs	r1, #2
 8003f40:	4618      	mov	r0, r3
 8003f42:	f001 fbf1 	bl	8005728 <RCCEx_PLL3_Config>
 8003f46:	4603      	mov	r3, r0
 8003f48:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003f4a:	e009      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f50:	e006      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003f52:	bf00      	nop
 8003f54:	e004      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003f56:	bf00      	nop
 8003f58:	e002      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003f5a:	bf00      	nop
 8003f5c:	e000      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003f5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f60:	7dfb      	ldrb	r3, [r7, #23]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10a      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f66:	4b8e      	ldr	r3, [pc, #568]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f74:	498a      	ldr	r1, [pc, #552]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	654b      	str	r3, [r1, #84]	; 0x54
 8003f7a:	e001      	b.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7c:	7dfb      	ldrb	r3, [r7, #23]
 8003f7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d04b      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f92:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f96:	d02e      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003f98:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f9c:	d828      	bhi.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa2:	d02a      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa8:	d822      	bhi.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003faa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fae:	d026      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003fb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fb4:	d81c      	bhi.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fba:	d010      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003fbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fc0:	d816      	bhi.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d01d      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fca:	d111      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f001 faf6 	bl	80055c4 <RCCEx_PLL2_Config>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003fdc:	e012      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	3324      	adds	r3, #36	; 0x24
 8003fe2:	2102      	movs	r1, #2
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f001 fb9f 	bl	8005728 <RCCEx_PLL3_Config>
 8003fea:	4603      	mov	r3, r0
 8003fec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003fee:	e009      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ff4:	e006      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003ff6:	bf00      	nop
 8003ff8:	e004      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003ffa:	bf00      	nop
 8003ffc:	e002      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003ffe:	bf00      	nop
 8004000:	e000      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004002:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004004:	7dfb      	ldrb	r3, [r7, #23]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10a      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800400a:	4b65      	ldr	r3, [pc, #404]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800400c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004018:	4961      	ldr	r1, [pc, #388]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800401a:	4313      	orrs	r3, r2
 800401c:	658b      	str	r3, [r1, #88]	; 0x58
 800401e:	e001      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004020:	7dfb      	ldrb	r3, [r7, #23]
 8004022:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402c:	2b00      	cmp	r3, #0
 800402e:	d04b      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004036:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800403a:	d02e      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800403c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004040:	d828      	bhi.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004042:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004046:	d02a      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8004048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800404c:	d822      	bhi.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800404e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004052:	d026      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004054:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004058:	d81c      	bhi.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800405a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800405e:	d010      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8004060:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004064:	d816      	bhi.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004066:	2b00      	cmp	r3, #0
 8004068:	d01d      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800406a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800406e:	d111      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3304      	adds	r3, #4
 8004074:	2100      	movs	r1, #0
 8004076:	4618      	mov	r0, r3
 8004078:	f001 faa4 	bl	80055c4 <RCCEx_PLL2_Config>
 800407c:	4603      	mov	r3, r0
 800407e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004080:	e012      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	3324      	adds	r3, #36	; 0x24
 8004086:	2102      	movs	r1, #2
 8004088:	4618      	mov	r0, r3
 800408a:	f001 fb4d 	bl	8005728 <RCCEx_PLL3_Config>
 800408e:	4603      	mov	r3, r0
 8004090:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004092:	e009      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	75fb      	strb	r3, [r7, #23]
      break;
 8004098:	e006      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800409a:	bf00      	nop
 800409c:	e004      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800409e:	bf00      	nop
 80040a0:	e002      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80040a2:	bf00      	nop
 80040a4:	e000      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80040a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040a8:	7dfb      	ldrb	r3, [r7, #23]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10a      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040ae:	4b3c      	ldr	r3, [pc, #240]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80040b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040bc:	4938      	ldr	r1, [pc, #224]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	658b      	str	r3, [r1, #88]	; 0x58
 80040c2:	e001      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c4:	7dfb      	ldrb	r3, [r7, #23]
 80040c6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0308 	and.w	r3, r3, #8
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d01a      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040de:	d10a      	bne.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3324      	adds	r3, #36	; 0x24
 80040e4:	2102      	movs	r1, #2
 80040e6:	4618      	mov	r0, r3
 80040e8:	f001 fb1e 	bl	8005728 <RCCEx_PLL3_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80040f6:	4b2a      	ldr	r3, [pc, #168]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80040f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004104:	4926      	ldr	r1, [pc, #152]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004106:	4313      	orrs	r3, r2
 8004108:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0310 	and.w	r3, r3, #16
 8004112:	2b00      	cmp	r3, #0
 8004114:	d01a      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800411c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004120:	d10a      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	3324      	adds	r3, #36	; 0x24
 8004126:	2102      	movs	r1, #2
 8004128:	4618      	mov	r0, r3
 800412a:	f001 fafd 	bl	8005728 <RCCEx_PLL3_Config>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004138:	4b19      	ldr	r3, [pc, #100]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800413a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004146:	4916      	ldr	r1, [pc, #88]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004148:	4313      	orrs	r3, r2
 800414a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d036      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800415e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004162:	d01f      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004164:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004168:	d817      	bhi.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800416e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004172:	d009      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004174:	e011      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	3304      	adds	r3, #4
 800417a:	2100      	movs	r1, #0
 800417c:	4618      	mov	r0, r3
 800417e:	f001 fa21 	bl	80055c4 <RCCEx_PLL2_Config>
 8004182:	4603      	mov	r3, r0
 8004184:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004186:	e00e      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3324      	adds	r3, #36	; 0x24
 800418c:	2102      	movs	r1, #2
 800418e:	4618      	mov	r0, r3
 8004190:	f001 faca 	bl	8005728 <RCCEx_PLL3_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004198:	e005      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	75fb      	strb	r3, [r7, #23]
      break;
 800419e:	e002      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80041a0:	58024400 	.word	0x58024400
      break;
 80041a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041a6:	7dfb      	ldrb	r3, [r7, #23]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10a      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041ac:	4b93      	ldr	r3, [pc, #588]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041ba:	4990      	ldr	r1, [pc, #576]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	658b      	str	r3, [r1, #88]	; 0x58
 80041c0:	e001      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c2:	7dfb      	ldrb	r3, [r7, #23]
 80041c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d033      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041dc:	d01c      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80041de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041e2:	d816      	bhi.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80041e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041e8:	d003      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80041ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041ee:	d007      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80041f0:	e00f      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041f2:	4b82      	ldr	r3, [pc, #520]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f6:	4a81      	ldr	r2, [pc, #516]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80041fe:	e00c      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	3324      	adds	r3, #36	; 0x24
 8004204:	2101      	movs	r1, #1
 8004206:	4618      	mov	r0, r3
 8004208:	f001 fa8e 	bl	8005728 <RCCEx_PLL3_Config>
 800420c:	4603      	mov	r3, r0
 800420e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004210:	e003      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	75fb      	strb	r3, [r7, #23]
      break;
 8004216:	e000      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004218:	bf00      	nop
    }

    if(ret == HAL_OK)
 800421a:	7dfb      	ldrb	r3, [r7, #23]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10a      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004220:	4b76      	ldr	r3, [pc, #472]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004224:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800422e:	4973      	ldr	r1, [pc, #460]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004230:	4313      	orrs	r3, r2
 8004232:	654b      	str	r3, [r1, #84]	; 0x54
 8004234:	e001      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004236:	7dfb      	ldrb	r3, [r7, #23]
 8004238:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d029      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800424e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004252:	d007      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004254:	e00f      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004256:	4b69      	ldr	r3, [pc, #420]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425a:	4a68      	ldr	r2, [pc, #416]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800425c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004260:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004262:	e00b      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3304      	adds	r3, #4
 8004268:	2102      	movs	r1, #2
 800426a:	4618      	mov	r0, r3
 800426c:	f001 f9aa 	bl	80055c4 <RCCEx_PLL2_Config>
 8004270:	4603      	mov	r3, r0
 8004272:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004274:	e002      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	75fb      	strb	r3, [r7, #23]
      break;
 800427a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800427c:	7dfb      	ldrb	r3, [r7, #23]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d109      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004282:	4b5e      	ldr	r3, [pc, #376]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004286:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800428e:	495b      	ldr	r1, [pc, #364]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004290:	4313      	orrs	r3, r2
 8004292:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004294:	e001      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004296:	7dfb      	ldrb	r3, [r7, #23]
 8004298:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	3324      	adds	r3, #36	; 0x24
 80042aa:	2102      	movs	r1, #2
 80042ac:	4618      	mov	r0, r3
 80042ae:	f001 fa3b 	bl	8005728 <RCCEx_PLL3_Config>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d030      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042d0:	d017      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80042d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042d6:	d811      	bhi.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80042d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042dc:	d013      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80042de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042e2:	d80b      	bhi.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d010      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80042e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ec:	d106      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042ee:	4b43      	ldr	r3, [pc, #268]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f2:	4a42      	ldr	r2, [pc, #264]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80042fa:	e007      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004300:	e004      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004302:	bf00      	nop
 8004304:	e002      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004306:	bf00      	nop
 8004308:	e000      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800430a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800430c:	7dfb      	ldrb	r3, [r7, #23]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d109      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004312:	4b3a      	ldr	r3, [pc, #232]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004316:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800431e:	4937      	ldr	r1, [pc, #220]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004320:	4313      	orrs	r3, r2
 8004322:	654b      	str	r3, [r1, #84]	; 0x54
 8004324:	e001      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004326:	7dfb      	ldrb	r3, [r7, #23]
 8004328:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d008      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004336:	4b31      	ldr	r3, [pc, #196]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800433a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004342:	492e      	ldr	r1, [pc, #184]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004344:	4313      	orrs	r3, r2
 8004346:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d009      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004354:	4b29      	ldr	r3, [pc, #164]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004362:	4926      	ldr	r1, [pc, #152]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004364:	4313      	orrs	r3, r2
 8004366:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d008      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004374:	4b21      	ldr	r3, [pc, #132]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004378:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004380:	491e      	ldr	r1, [pc, #120]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004382:	4313      	orrs	r3, r2
 8004384:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00d      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004392:	4b1a      	ldr	r3, [pc, #104]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	4a19      	ldr	r2, [pc, #100]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004398:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800439c:	6113      	str	r3, [r2, #16]
 800439e:	4b17      	ldr	r3, [pc, #92]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043a0:	691a      	ldr	r2, [r3, #16]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80043a8:	4914      	ldr	r1, [pc, #80]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	da08      	bge.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80043b6:	4b11      	ldr	r3, [pc, #68]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c2:	490e      	ldr	r1, [pc, #56]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d009      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043d4:	4b09      	ldr	r3, [pc, #36]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e2:	4906      	ldr	r1, [pc, #24]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80043e8:	7dbb      	ldrb	r3, [r7, #22]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	e000      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3718      	adds	r7, #24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	58024400 	.word	0x58024400

08004400 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b090      	sub	sp, #64	; 0x40
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800440e:	f040 8095 	bne.w	800453c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004412:	4bae      	ldr	r3, [pc, #696]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004416:	f003 0307 	and.w	r3, r3, #7
 800441a:	633b      	str	r3, [r7, #48]	; 0x30
 800441c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441e:	2b04      	cmp	r3, #4
 8004420:	f200 8088 	bhi.w	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004424:	a201      	add	r2, pc, #4	; (adr r2, 800442c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8004426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442a:	bf00      	nop
 800442c:	08004441 	.word	0x08004441
 8004430:	08004469 	.word	0x08004469
 8004434:	08004491 	.word	0x08004491
 8004438:	0800452d 	.word	0x0800452d
 800443c:	080044b9 	.word	0x080044b9

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004440:	4ba2      	ldr	r3, [pc, #648]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004448:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800444c:	d108      	bne.n	8004460 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800444e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004452:	4618      	mov	r0, r3
 8004454:	f000 ff64 	bl	8005320 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800445c:	f000 bc95 	b.w	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004460:	2300      	movs	r3, #0
 8004462:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004464:	f000 bc91 	b.w	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004468:	4b98      	ldr	r3, [pc, #608]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004470:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004474:	d108      	bne.n	8004488 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004476:	f107 0318 	add.w	r3, r7, #24
 800447a:	4618      	mov	r0, r3
 800447c:	f000 fca8 	bl	8004dd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004484:	f000 bc81 	b.w	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004488:	2300      	movs	r3, #0
 800448a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800448c:	f000 bc7d 	b.w	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004490:	4b8e      	ldr	r3, [pc, #568]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004498:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800449c:	d108      	bne.n	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800449e:	f107 030c 	add.w	r3, r7, #12
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 fde8 	bl	8005078 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80044ac:	f000 bc6d 	b.w	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80044b0:	2300      	movs	r3, #0
 80044b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80044b4:	f000 bc69 	b.w	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80044b8:	4b84      	ldr	r3, [pc, #528]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80044ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80044c0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80044c2:	4b82      	ldr	r3, [pc, #520]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0304 	and.w	r3, r3, #4
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d10c      	bne.n	80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80044ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d109      	bne.n	80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044d4:	4b7d      	ldr	r3, [pc, #500]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	08db      	lsrs	r3, r3, #3
 80044da:	f003 0303 	and.w	r3, r3, #3
 80044de:	4a7c      	ldr	r2, [pc, #496]	; (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80044e0:	fa22 f303 	lsr.w	r3, r2, r3
 80044e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044e6:	e01f      	b.n	8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80044e8:	4b78      	ldr	r3, [pc, #480]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044f4:	d106      	bne.n	8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80044f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044fc:	d102      	bne.n	8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80044fe:	4b75      	ldr	r3, [pc, #468]	; (80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8004500:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004502:	e011      	b.n	8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004504:	4b71      	ldr	r3, [pc, #452]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004510:	d106      	bne.n	8004520 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8004512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004518:	d102      	bne.n	8004520 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800451a:	4b6f      	ldr	r3, [pc, #444]	; (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800451c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800451e:	e003      	b.n	8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004520:	2300      	movs	r3, #0
 8004522:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004524:	f000 bc31 	b.w	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004528:	f000 bc2f 	b.w	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800452c:	4b6b      	ldr	r3, [pc, #428]	; (80046dc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800452e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004530:	f000 bc2b 	b.w	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8004534:	2300      	movs	r3, #0
 8004536:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004538:	f000 bc27 	b.w	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004542:	f040 8095 	bne.w	8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8004546:	4b61      	ldr	r3, [pc, #388]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800454a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800454e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004556:	d04d      	beq.n	80045f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8004558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800455e:	f200 8084 	bhi.w	800466a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8004562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004564:	2bc0      	cmp	r3, #192	; 0xc0
 8004566:	d07d      	beq.n	8004664 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8004568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456a:	2bc0      	cmp	r3, #192	; 0xc0
 800456c:	d87d      	bhi.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004570:	2b80      	cmp	r3, #128	; 0x80
 8004572:	d02d      	beq.n	80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8004574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004576:	2b80      	cmp	r3, #128	; 0x80
 8004578:	d877      	bhi.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	2b00      	cmp	r3, #0
 800457e:	d003      	beq.n	8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8004580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004582:	2b40      	cmp	r3, #64	; 0x40
 8004584:	d012      	beq.n	80045ac <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8004586:	e070      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004588:	4b50      	ldr	r3, [pc, #320]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004590:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004594:	d107      	bne.n	80045a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fec0 	bl	8005320 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80045a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80045a4:	e3f1      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80045a6:	2300      	movs	r3, #0
 80045a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045aa:	e3ee      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80045ac:	4b47      	ldr	r3, [pc, #284]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045b8:	d107      	bne.n	80045ca <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80045ba:	f107 0318 	add.w	r3, r7, #24
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 fc06 	bl	8004dd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80045c8:	e3df      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80045ca:	2300      	movs	r3, #0
 80045cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045ce:	e3dc      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80045d0:	4b3e      	ldr	r3, [pc, #248]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045dc:	d107      	bne.n	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80045de:	f107 030c 	add.w	r3, r7, #12
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 fd48 	bl	8005078 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80045ec:	e3cd      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80045ee:	2300      	movs	r3, #0
 80045f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80045f2:	e3ca      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80045f4:	4b35      	ldr	r3, [pc, #212]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80045f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80045fc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80045fe:	4b33      	ldr	r3, [pc, #204]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0304 	and.w	r3, r3, #4
 8004606:	2b04      	cmp	r3, #4
 8004608:	d10c      	bne.n	8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800460a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800460c:	2b00      	cmp	r3, #0
 800460e:	d109      	bne.n	8004624 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004610:	4b2e      	ldr	r3, [pc, #184]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	08db      	lsrs	r3, r3, #3
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	4a2d      	ldr	r2, [pc, #180]	; (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800461c:	fa22 f303 	lsr.w	r3, r2, r3
 8004620:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004622:	e01e      	b.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004624:	4b29      	ldr	r3, [pc, #164]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004630:	d106      	bne.n	8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8004632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004634:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004638:	d102      	bne.n	8004640 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800463a:	4b26      	ldr	r3, [pc, #152]	; (80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800463c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800463e:	e010      	b.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004640:	4b22      	ldr	r3, [pc, #136]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004648:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800464c:	d106      	bne.n	800465c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800464e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004650:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004654:	d102      	bne.n	800465c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004656:	4b20      	ldr	r3, [pc, #128]	; (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8004658:	63fb      	str	r3, [r7, #60]	; 0x3c
 800465a:	e002      	b.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800465c:	2300      	movs	r3, #0
 800465e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004660:	e393      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004662:	e392      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004664:	4b1d      	ldr	r3, [pc, #116]	; (80046dc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8004666:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004668:	e38f      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 800466a:	2300      	movs	r3, #0
 800466c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800466e:	e38c      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004676:	f040 80a7 	bne.w	80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800467a:	4b14      	ldr	r3, [pc, #80]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800467c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004682:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004686:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800468a:	d05f      	beq.n	800474c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800468c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004692:	f200 8096 	bhi.w	80047c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8004696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004698:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800469c:	f000 808e 	beq.w	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80046a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80046a6:	f200 808c 	bhi.w	80047c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046b0:	d03a      	beq.n	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80046b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046b8:	f200 8083 	bhi.w	80047c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80046bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00e      	beq.n	80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 80046c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046c8:	d01c      	beq.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80046ca:	e07a      	b.n	80047c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80046cc:	58024400 	.word	0x58024400
 80046d0:	03d09000 	.word	0x03d09000
 80046d4:	003d0900 	.word	0x003d0900
 80046d8:	007a1200 	.word	0x007a1200
 80046dc:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80046e0:	4baa      	ldr	r3, [pc, #680]	; (800498c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046ec:	d107      	bne.n	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80046ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 fe14 	bl	8005320 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80046f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80046fc:	e345      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80046fe:	2300      	movs	r3, #0
 8004700:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004702:	e342      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004704:	4ba1      	ldr	r3, [pc, #644]	; (800498c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800470c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004710:	d107      	bne.n	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004712:	f107 0318 	add.w	r3, r7, #24
 8004716:	4618      	mov	r0, r3
 8004718:	f000 fb5a 	bl	8004dd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004720:	e333      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004722:	2300      	movs	r3, #0
 8004724:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004726:	e330      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004728:	4b98      	ldr	r3, [pc, #608]	; (800498c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004734:	d107      	bne.n	8004746 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004736:	f107 030c 	add.w	r3, r7, #12
 800473a:	4618      	mov	r0, r3
 800473c:	f000 fc9c 	bl	8005078 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004744:	e321      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004746:	2300      	movs	r3, #0
 8004748:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800474a:	e31e      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800474c:	4b8f      	ldr	r3, [pc, #572]	; (800498c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800474e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004750:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004754:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004756:	4b8d      	ldr	r3, [pc, #564]	; (800498c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0304 	and.w	r3, r3, #4
 800475e:	2b04      	cmp	r3, #4
 8004760:	d10c      	bne.n	800477c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8004762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004764:	2b00      	cmp	r3, #0
 8004766:	d109      	bne.n	800477c <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004768:	4b88      	ldr	r3, [pc, #544]	; (800498c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	08db      	lsrs	r3, r3, #3
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	4a87      	ldr	r2, [pc, #540]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004774:	fa22 f303 	lsr.w	r3, r2, r3
 8004778:	63fb      	str	r3, [r7, #60]	; 0x3c
 800477a:	e01e      	b.n	80047ba <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800477c:	4b83      	ldr	r3, [pc, #524]	; (800498c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004788:	d106      	bne.n	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 800478a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800478c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004790:	d102      	bne.n	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004792:	4b80      	ldr	r3, [pc, #512]	; (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004794:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004796:	e010      	b.n	80047ba <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004798:	4b7c      	ldr	r3, [pc, #496]	; (800498c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047a4:	d106      	bne.n	80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 80047a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047ac:	d102      	bne.n	80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80047ae:	4b7a      	ldr	r3, [pc, #488]	; (8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80047b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047b2:	e002      	b.n	80047ba <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80047b4:	2300      	movs	r3, #0
 80047b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80047b8:	e2e7      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80047ba:	e2e6      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80047bc:	4b77      	ldr	r3, [pc, #476]	; (800499c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80047be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047c0:	e2e3      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 80047c2:	2300      	movs	r3, #0
 80047c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047c6:	e2e0      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ce:	f040 809c 	bne.w	800490a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80047d2:	4b6e      	ldr	r3, [pc, #440]	; (800498c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80047d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80047da:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80047dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047e2:	d054      	beq.n	800488e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80047e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047ea:	f200 808b 	bhi.w	8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80047ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047f4:	f000 8083 	beq.w	80048fe <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80047f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047fe:	f200 8081 	bhi.w	8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8004802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004804:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004808:	d02f      	beq.n	800486a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004810:	d878      	bhi.n	8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	2b00      	cmp	r3, #0
 8004816:	d004      	beq.n	8004822 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8004818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800481e:	d012      	beq.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8004820:	e070      	b.n	8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004822:	4b5a      	ldr	r3, [pc, #360]	; (800498c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800482e:	d107      	bne.n	8004840 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004834:	4618      	mov	r0, r3
 8004836:	f000 fd73 	bl	8005320 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800483a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800483e:	e2a4      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004840:	2300      	movs	r3, #0
 8004842:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004844:	e2a1      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004846:	4b51      	ldr	r3, [pc, #324]	; (800498c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800484e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004852:	d107      	bne.n	8004864 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004854:	f107 0318 	add.w	r3, r7, #24
 8004858:	4618      	mov	r0, r3
 800485a:	f000 fab9 	bl	8004dd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8004862:	e292      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004864:	2300      	movs	r3, #0
 8004866:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004868:	e28f      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800486a:	4b48      	ldr	r3, [pc, #288]	; (800498c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004872:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004876:	d107      	bne.n	8004888 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004878:	f107 030c 	add.w	r3, r7, #12
 800487c:	4618      	mov	r0, r3
 800487e:	f000 fbfb 	bl	8005078 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004886:	e280      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004888:	2300      	movs	r3, #0
 800488a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800488c:	e27d      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800488e:	4b3f      	ldr	r3, [pc, #252]	; (800498c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004892:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004896:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004898:	4b3c      	ldr	r3, [pc, #240]	; (800498c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d10c      	bne.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80048a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d109      	bne.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80048aa:	4b38      	ldr	r3, [pc, #224]	; (800498c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	08db      	lsrs	r3, r3, #3
 80048b0:	f003 0303 	and.w	r3, r3, #3
 80048b4:	4a36      	ldr	r2, [pc, #216]	; (8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80048b6:	fa22 f303 	lsr.w	r3, r2, r3
 80048ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048bc:	e01e      	b.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80048be:	4b33      	ldr	r3, [pc, #204]	; (800498c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ca:	d106      	bne.n	80048da <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80048cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048d2:	d102      	bne.n	80048da <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80048d4:	4b2f      	ldr	r3, [pc, #188]	; (8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80048d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048d8:	e010      	b.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80048da:	4b2c      	ldr	r3, [pc, #176]	; (800498c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048e6:	d106      	bne.n	80048f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80048e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048ee:	d102      	bne.n	80048f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80048f0:	4b29      	ldr	r3, [pc, #164]	; (8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80048f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048f4:	e002      	b.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80048f6:	2300      	movs	r3, #0
 80048f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80048fa:	e246      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80048fc:	e245      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80048fe:	4b27      	ldr	r3, [pc, #156]	; (800499c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004900:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004902:	e242      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004904:	2300      	movs	r3, #0
 8004906:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004908:	e23f      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004910:	f040 80a8 	bne.w	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004914:	4b1d      	ldr	r3, [pc, #116]	; (800498c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004918:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800491c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800491e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004920:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004924:	d060      	beq.n	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8004926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004928:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800492c:	f200 8097 	bhi.w	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8004930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004932:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004936:	f000 808f 	beq.w	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800493a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004940:	f200 808d 	bhi.w	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8004944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800494a:	d03b      	beq.n	80049c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 800494c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004952:	f200 8084 	bhi.w	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8004956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004958:	2b00      	cmp	r3, #0
 800495a:	d004      	beq.n	8004966 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 800495c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004962:	d01d      	beq.n	80049a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8004964:	e07b      	b.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004966:	4b09      	ldr	r3, [pc, #36]	; (800498c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800496e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004972:	d107      	bne.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004978:	4618      	mov	r0, r3
 800497a:	f000 fcd1 	bl	8005320 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004980:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004982:	e202      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004984:	2300      	movs	r3, #0
 8004986:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004988:	e1ff      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800498a:	bf00      	nop
 800498c:	58024400 	.word	0x58024400
 8004990:	03d09000 	.word	0x03d09000
 8004994:	003d0900 	.word	0x003d0900
 8004998:	007a1200 	.word	0x007a1200
 800499c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80049a0:	4ba3      	ldr	r3, [pc, #652]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049ac:	d107      	bne.n	80049be <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049ae:	f107 0318 	add.w	r3, r7, #24
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fa0c 	bl	8004dd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80049bc:	e1e5      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049c2:	e1e2      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80049c4:	4b9a      	ldr	r3, [pc, #616]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049d0:	d107      	bne.n	80049e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049d2:	f107 030c 	add.w	r3, r7, #12
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 fb4e 	bl	8005078 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80049e0:	e1d3      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80049e2:	2300      	movs	r3, #0
 80049e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80049e6:	e1d0      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80049e8:	4b91      	ldr	r3, [pc, #580]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80049ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80049f0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80049f2:	4b8f      	ldr	r3, [pc, #572]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0304 	and.w	r3, r3, #4
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d10c      	bne.n	8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80049fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d109      	bne.n	8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a04:	4b8a      	ldr	r3, [pc, #552]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	08db      	lsrs	r3, r3, #3
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	4a89      	ldr	r2, [pc, #548]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004a10:	fa22 f303 	lsr.w	r3, r2, r3
 8004a14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a16:	e01e      	b.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004a18:	4b85      	ldr	r3, [pc, #532]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a24:	d106      	bne.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8004a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a2c:	d102      	bne.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004a2e:	4b82      	ldr	r3, [pc, #520]	; (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004a30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a32:	e010      	b.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004a34:	4b7e      	ldr	r3, [pc, #504]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a40:	d106      	bne.n	8004a50 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8004a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a48:	d102      	bne.n	8004a50 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004a4a:	4b7c      	ldr	r3, [pc, #496]	; (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a4e:	e002      	b.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004a54:	e199      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004a56:	e198      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004a58:	4b79      	ldr	r3, [pc, #484]	; (8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a5c:	e195      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a62:	e192      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004a6a:	d173      	bne.n	8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004a6c:	4b70      	ldr	r3, [pc, #448]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a74:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a7c:	d02f      	beq.n	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8004a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a84:	d863      	bhi.n	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8004a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d004      	beq.n	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a92:	d012      	beq.n	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8004a94:	e05b      	b.n	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a96:	4b66      	ldr	r3, [pc, #408]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aa2:	d107      	bne.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004aa4:	f107 0318 	add.w	r3, r7, #24
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 f991 	bl	8004dd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ab2:	e16a      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ab8:	e167      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004aba:	4b5d      	ldr	r3, [pc, #372]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ac2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ac6:	d107      	bne.n	8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ac8:	f107 030c 	add.w	r3, r7, #12
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 fad3 	bl	8005078 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ad6:	e158      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004adc:	e155      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004ade:	4b54      	ldr	r3, [pc, #336]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ae6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ae8:	4b51      	ldr	r3, [pc, #324]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d10c      	bne.n	8004b0e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8004af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d109      	bne.n	8004b0e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004afa:	4b4d      	ldr	r3, [pc, #308]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	08db      	lsrs	r3, r3, #3
 8004b00:	f003 0303 	and.w	r3, r3, #3
 8004b04:	4a4b      	ldr	r2, [pc, #300]	; (8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8004b06:	fa22 f303 	lsr.w	r3, r2, r3
 8004b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b0c:	e01e      	b.n	8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004b0e:	4b48      	ldr	r3, [pc, #288]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b1a:	d106      	bne.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8004b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b22:	d102      	bne.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004b24:	4b44      	ldr	r3, [pc, #272]	; (8004c38 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004b26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b28:	e010      	b.n	8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b2a:	4b41      	ldr	r3, [pc, #260]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b36:	d106      	bne.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8004b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b3e:	d102      	bne.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004b40:	4b3e      	ldr	r3, [pc, #248]	; (8004c3c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b44:	e002      	b.n	8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004b46:	2300      	movs	r3, #0
 8004b48:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004b4a:	e11e      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004b4c:	e11d      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b52:	e11a      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b5a:	d133      	bne.n	8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004b5c:	4b34      	ldr	r3, [pc, #208]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b64:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d004      	beq.n	8004b76 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8004b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b72:	d012      	beq.n	8004b9a <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8004b74:	e023      	b.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004b76:	4b2e      	ldr	r3, [pc, #184]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b82:	d107      	bne.n	8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 fbc9 	bl	8005320 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b90:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004b92:	e0fa      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004b94:	2300      	movs	r3, #0
 8004b96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b98:	e0f7      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b9a:	4b25      	ldr	r3, [pc, #148]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ba2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ba6:	d107      	bne.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ba8:	f107 0318 	add.w	r3, r7, #24
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 f90f 	bl	8004dd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004bb6:	e0e8      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bbc:	e0e5      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bc2:	e0e2      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bca:	f040 808f 	bne.w	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004bce:	4b18      	ldr	r3, [pc, #96]	; (8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004bd6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004bde:	d075      	beq.n	8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8004be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004be6:	d87e      	bhi.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bee:	d060      	beq.n	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8004bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf6:	d876      	bhi.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004bfe:	d045      	beq.n	8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8004c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c06:	d86e      	bhi.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c0e:	d02b      	beq.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8004c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c16:	d866      	bhi.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d004      	beq.n	8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8004c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c24:	d00e      	beq.n	8004c44 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8004c26:	e05e      	b.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004c28:	f000 f8bc 	bl	8004da4 <HAL_RCCEx_GetD3PCLK1Freq>
 8004c2c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8004c2e:	e0ac      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8004c30:	58024400 	.word	0x58024400
 8004c34:	03d09000 	.word	0x03d09000
 8004c38:	003d0900 	.word	0x003d0900
 8004c3c:	007a1200 	.word	0x007a1200
 8004c40:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c44:	4b53      	ldr	r3, [pc, #332]	; (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c50:	d107      	bne.n	8004c62 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c52:	f107 0318 	add.w	r3, r7, #24
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 f8ba 	bl	8004dd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004c60:	e093      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004c62:	2300      	movs	r3, #0
 8004c64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c66:	e090      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004c68:	4b4a      	ldr	r3, [pc, #296]	; (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c74:	d107      	bne.n	8004c86 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c76:	f107 030c 	add.w	r3, r7, #12
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 f9fc 	bl	8005078 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004c84:	e081      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004c86:	2300      	movs	r3, #0
 8004c88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c8a:	e07e      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c8c:	4b41      	ldr	r3, [pc, #260]	; (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d109      	bne.n	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c98:	4b3e      	ldr	r3, [pc, #248]	; (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	08db      	lsrs	r3, r3, #3
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	4a3d      	ldr	r2, [pc, #244]	; (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8004ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004caa:	e06e      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004cac:	2300      	movs	r3, #0
 8004cae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cb0:	e06b      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004cb2:	4b38      	ldr	r3, [pc, #224]	; (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cbe:	d102      	bne.n	8004cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8004cc0:	4b36      	ldr	r3, [pc, #216]	; (8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004cc4:	e061      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cca:	e05e      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004ccc:	4b31      	ldr	r3, [pc, #196]	; (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cd8:	d102      	bne.n	8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8004cda:	4b31      	ldr	r3, [pc, #196]	; (8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004cde:	e054      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ce4:	e051      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cea:	e04e      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cf2:	d148      	bne.n	8004d86 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8004cf4:	4b27      	ldr	r3, [pc, #156]	; (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004cfc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d04:	d02a      	beq.n	8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8004d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d0c:	d838      	bhi.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8004d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d004      	beq.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8004d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d1a:	d00d      	beq.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8004d1c:	e030      	b.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004d1e:	4b1d      	ldr	r3, [pc, #116]	; (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d2a:	d102      	bne.n	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8004d2c:	4b1c      	ldr	r3, [pc, #112]	; (8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004d30:	e02b      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004d32:	2300      	movs	r3, #0
 8004d34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d36:	e028      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004d38:	4b16      	ldr	r3, [pc, #88]	; (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d44:	d107      	bne.n	8004d56 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 fae8 	bl	8005320 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d52:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004d54:	e019      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004d56:	2300      	movs	r3, #0
 8004d58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d5a:	e016      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004d5c:	4b0d      	ldr	r3, [pc, #52]	; (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d68:	d107      	bne.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d6a:	f107 0318 	add.w	r3, r7, #24
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 f82e 	bl	8004dd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004d78:	e007      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d7e:	e004      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8004d80:	2300      	movs	r3, #0
 8004d82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d84:	e001      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8004d86:	2300      	movs	r3, #0
 8004d88:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8004d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3740      	adds	r7, #64	; 0x40
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	58024400 	.word	0x58024400
 8004d98:	03d09000 	.word	0x03d09000
 8004d9c:	003d0900 	.word	0x003d0900
 8004da0:	007a1200 	.word	0x007a1200

08004da4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004da8:	f7fe fb8e 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 8004dac:	4602      	mov	r2, r0
 8004dae:	4b06      	ldr	r3, [pc, #24]	; (8004dc8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	091b      	lsrs	r3, r3, #4
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	4904      	ldr	r1, [pc, #16]	; (8004dcc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004dba:	5ccb      	ldrb	r3, [r1, r3]
 8004dbc:	f003 031f 	and.w	r3, r3, #31
 8004dc0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	58024400 	.word	0x58024400
 8004dcc:	0800a02c 	.word	0x0800a02c

08004dd0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b089      	sub	sp, #36	; 0x24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004dd8:	4ba1      	ldr	r3, [pc, #644]	; (8005060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ddc:	f003 0303 	and.w	r3, r3, #3
 8004de0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004de2:	4b9f      	ldr	r3, [pc, #636]	; (8005060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de6:	0b1b      	lsrs	r3, r3, #12
 8004de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004dee:	4b9c      	ldr	r3, [pc, #624]	; (8005060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df2:	091b      	lsrs	r3, r3, #4
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004dfa:	4b99      	ldr	r3, [pc, #612]	; (8005060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfe:	08db      	lsrs	r3, r3, #3
 8004e00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	fb02 f303 	mul.w	r3, r2, r3
 8004e0a:	ee07 3a90 	vmov	s15, r3
 8004e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 8111 	beq.w	8005040 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	f000 8083 	beq.w	8004f2c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	f200 80a1 	bhi.w	8004f70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d056      	beq.n	8004ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004e3a:	e099      	b.n	8004f70 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e3c:	4b88      	ldr	r3, [pc, #544]	; (8005060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0320 	and.w	r3, r3, #32
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d02d      	beq.n	8004ea4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e48:	4b85      	ldr	r3, [pc, #532]	; (8005060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	08db      	lsrs	r3, r3, #3
 8004e4e:	f003 0303 	and.w	r3, r3, #3
 8004e52:	4a84      	ldr	r2, [pc, #528]	; (8005064 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004e54:	fa22 f303 	lsr.w	r3, r2, r3
 8004e58:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	ee07 3a90 	vmov	s15, r3
 8004e60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	ee07 3a90 	vmov	s15, r3
 8004e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e72:	4b7b      	ldr	r3, [pc, #492]	; (8005060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e7a:	ee07 3a90 	vmov	s15, r3
 8004e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e82:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e86:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005068 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e9e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004ea2:	e087      	b.n	8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	ee07 3a90 	vmov	s15, r3
 8004eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800506c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eb6:	4b6a      	ldr	r3, [pc, #424]	; (8005060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ebe:	ee07 3a90 	vmov	s15, r3
 8004ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ec6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005068 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ee2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ee6:	e065      	b.n	8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	ee07 3a90 	vmov	s15, r3
 8004eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005070 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004efa:	4b59      	ldr	r3, [pc, #356]	; (8005060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f02:	ee07 3a90 	vmov	s15, r3
 8004f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f0e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005068 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f2a:	e043      	b.n	8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	ee07 3a90 	vmov	s15, r3
 8004f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f36:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005074 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f3e:	4b48      	ldr	r3, [pc, #288]	; (8005060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f46:	ee07 3a90 	vmov	s15, r3
 8004f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f52:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005068 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f6e:	e021      	b.n	8004fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	ee07 3a90 	vmov	s15, r3
 8004f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f7a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005070 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f82:	4b37      	ldr	r3, [pc, #220]	; (8005060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f8a:	ee07 3a90 	vmov	s15, r3
 8004f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f96:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005068 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fb2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004fb4:	4b2a      	ldr	r3, [pc, #168]	; (8005060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb8:	0a5b      	lsrs	r3, r3, #9
 8004fba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fbe:	ee07 3a90 	vmov	s15, r3
 8004fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fce:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fda:	ee17 2a90 	vmov	r2, s15
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004fe2:	4b1f      	ldr	r3, [pc, #124]	; (8005060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe6:	0c1b      	lsrs	r3, r3, #16
 8004fe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fec:	ee07 3a90 	vmov	s15, r3
 8004ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ff8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ffc:	edd7 6a07 	vldr	s13, [r7, #28]
 8005000:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005004:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005008:	ee17 2a90 	vmov	r2, s15
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005010:	4b13      	ldr	r3, [pc, #76]	; (8005060 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005014:	0e1b      	lsrs	r3, r3, #24
 8005016:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800501a:	ee07 3a90 	vmov	s15, r3
 800501e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005022:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005026:	ee37 7a87 	vadd.f32	s14, s15, s14
 800502a:	edd7 6a07 	vldr	s13, [r7, #28]
 800502e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005032:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005036:	ee17 2a90 	vmov	r2, s15
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800503e:	e008      	b.n	8005052 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	609a      	str	r2, [r3, #8]
}
 8005052:	bf00      	nop
 8005054:	3724      	adds	r7, #36	; 0x24
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	58024400 	.word	0x58024400
 8005064:	03d09000 	.word	0x03d09000
 8005068:	46000000 	.word	0x46000000
 800506c:	4c742400 	.word	0x4c742400
 8005070:	4a742400 	.word	0x4a742400
 8005074:	4af42400 	.word	0x4af42400

08005078 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005078:	b480      	push	{r7}
 800507a:	b089      	sub	sp, #36	; 0x24
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005080:	4ba1      	ldr	r3, [pc, #644]	; (8005308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005084:	f003 0303 	and.w	r3, r3, #3
 8005088:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800508a:	4b9f      	ldr	r3, [pc, #636]	; (8005308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800508c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508e:	0d1b      	lsrs	r3, r3, #20
 8005090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005094:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005096:	4b9c      	ldr	r3, [pc, #624]	; (8005308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509a:	0a1b      	lsrs	r3, r3, #8
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80050a2:	4b99      	ldr	r3, [pc, #612]	; (8005308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a6:	08db      	lsrs	r3, r3, #3
 80050a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	fb02 f303 	mul.w	r3, r2, r3
 80050b2:	ee07 3a90 	vmov	s15, r3
 80050b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 8111 	beq.w	80052e8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	f000 8083 	beq.w	80051d4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	f200 80a1 	bhi.w	8005218 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d003      	beq.n	80050e4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d056      	beq.n	8005190 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80050e2:	e099      	b.n	8005218 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050e4:	4b88      	ldr	r3, [pc, #544]	; (8005308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0320 	and.w	r3, r3, #32
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d02d      	beq.n	800514c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80050f0:	4b85      	ldr	r3, [pc, #532]	; (8005308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	08db      	lsrs	r3, r3, #3
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	4a84      	ldr	r2, [pc, #528]	; (800530c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80050fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005100:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	ee07 3a90 	vmov	s15, r3
 8005108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	ee07 3a90 	vmov	s15, r3
 8005112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800511a:	4b7b      	ldr	r3, [pc, #492]	; (8005308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005122:	ee07 3a90 	vmov	s15, r3
 8005126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800512a:	ed97 6a03 	vldr	s12, [r7, #12]
 800512e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005310 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800513a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800513e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005146:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800514a:	e087      	b.n	800525c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	ee07 3a90 	vmov	s15, r3
 8005152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005156:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005314 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800515a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800515e:	4b6a      	ldr	r3, [pc, #424]	; (8005308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005166:	ee07 3a90 	vmov	s15, r3
 800516a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800516e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005172:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005310 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800517a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800517e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800518a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800518e:	e065      	b.n	800525c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	ee07 3a90 	vmov	s15, r3
 8005196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005318 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800519e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051a2:	4b59      	ldr	r3, [pc, #356]	; (8005308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051aa:	ee07 3a90 	vmov	s15, r3
 80051ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80051b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005310 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051d2:	e043      	b.n	800525c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	ee07 3a90 	vmov	s15, r3
 80051da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800531c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80051e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051e6:	4b48      	ldr	r3, [pc, #288]	; (8005308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ee:	ee07 3a90 	vmov	s15, r3
 80051f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80051fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005310 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800520a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800520e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005212:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005216:	e021      	b.n	800525c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	ee07 3a90 	vmov	s15, r3
 800521e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005222:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005318 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800522a:	4b37      	ldr	r3, [pc, #220]	; (8005308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005232:	ee07 3a90 	vmov	s15, r3
 8005236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800523a:	ed97 6a03 	vldr	s12, [r7, #12]
 800523e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005310 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800524a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800524e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005256:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800525a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800525c:	4b2a      	ldr	r3, [pc, #168]	; (8005308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800525e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005260:	0a5b      	lsrs	r3, r3, #9
 8005262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005266:	ee07 3a90 	vmov	s15, r3
 800526a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800526e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005272:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005276:	edd7 6a07 	vldr	s13, [r7, #28]
 800527a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800527e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005282:	ee17 2a90 	vmov	r2, s15
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800528a:	4b1f      	ldr	r3, [pc, #124]	; (8005308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	0c1b      	lsrs	r3, r3, #16
 8005290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005294:	ee07 3a90 	vmov	s15, r3
 8005298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800529c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80052a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052b0:	ee17 2a90 	vmov	r2, s15
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80052b8:	4b13      	ldr	r3, [pc, #76]	; (8005308 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052bc:	0e1b      	lsrs	r3, r3, #24
 80052be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052c2:	ee07 3a90 	vmov	s15, r3
 80052c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80052d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052de:	ee17 2a90 	vmov	r2, s15
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80052e6:	e008      	b.n	80052fa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	609a      	str	r2, [r3, #8]
}
 80052fa:	bf00      	nop
 80052fc:	3724      	adds	r7, #36	; 0x24
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	58024400 	.word	0x58024400
 800530c:	03d09000 	.word	0x03d09000
 8005310:	46000000 	.word	0x46000000
 8005314:	4c742400 	.word	0x4c742400
 8005318:	4a742400 	.word	0x4a742400
 800531c:	4af42400 	.word	0x4af42400

08005320 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005320:	b480      	push	{r7}
 8005322:	b089      	sub	sp, #36	; 0x24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005328:	4ba0      	ldr	r3, [pc, #640]	; (80055ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800532a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532c:	f003 0303 	and.w	r3, r3, #3
 8005330:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005332:	4b9e      	ldr	r3, [pc, #632]	; (80055ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005336:	091b      	lsrs	r3, r3, #4
 8005338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800533c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800533e:	4b9b      	ldr	r3, [pc, #620]	; (80055ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005348:	4b98      	ldr	r3, [pc, #608]	; (80055ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800534a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800534c:	08db      	lsrs	r3, r3, #3
 800534e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	fb02 f303 	mul.w	r3, r2, r3
 8005358:	ee07 3a90 	vmov	s15, r3
 800535c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005360:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 8111 	beq.w	800558e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	2b02      	cmp	r3, #2
 8005370:	f000 8083 	beq.w	800547a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	2b02      	cmp	r3, #2
 8005378:	f200 80a1 	bhi.w	80054be <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d056      	beq.n	8005436 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005388:	e099      	b.n	80054be <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800538a:	4b88      	ldr	r3, [pc, #544]	; (80055ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0320 	and.w	r3, r3, #32
 8005392:	2b00      	cmp	r3, #0
 8005394:	d02d      	beq.n	80053f2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005396:	4b85      	ldr	r3, [pc, #532]	; (80055ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	08db      	lsrs	r3, r3, #3
 800539c:	f003 0303 	and.w	r3, r3, #3
 80053a0:	4a83      	ldr	r2, [pc, #524]	; (80055b0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80053a2:	fa22 f303 	lsr.w	r3, r2, r3
 80053a6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	ee07 3a90 	vmov	s15, r3
 80053ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	ee07 3a90 	vmov	s15, r3
 80053b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053c0:	4b7a      	ldr	r3, [pc, #488]	; (80055ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80053c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c8:	ee07 3a90 	vmov	s15, r3
 80053cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80053d4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80055b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80053d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ec:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80053f0:	e087      	b.n	8005502 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	ee07 3a90 	vmov	s15, r3
 80053f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053fc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80055b8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005400:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005404:	4b69      	ldr	r3, [pc, #420]	; (80055ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800540c:	ee07 3a90 	vmov	s15, r3
 8005410:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005414:	ed97 6a03 	vldr	s12, [r7, #12]
 8005418:	eddf 5a66 	vldr	s11, [pc, #408]	; 80055b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800541c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005420:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005424:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005428:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800542c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005430:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005434:	e065      	b.n	8005502 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	ee07 3a90 	vmov	s15, r3
 800543c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005440:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80055bc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005444:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005448:	4b58      	ldr	r3, [pc, #352]	; (80055ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800544a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005450:	ee07 3a90 	vmov	s15, r3
 8005454:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005458:	ed97 6a03 	vldr	s12, [r7, #12]
 800545c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80055b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005460:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005464:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005468:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800546c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005474:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005478:	e043      	b.n	8005502 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	ee07 3a90 	vmov	s15, r3
 8005480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005484:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80055c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005488:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800548c:	4b47      	ldr	r3, [pc, #284]	; (80055ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800548e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005494:	ee07 3a90 	vmov	s15, r3
 8005498:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800549c:	ed97 6a03 	vldr	s12, [r7, #12]
 80054a0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80055b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80054a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054bc:	e021      	b.n	8005502 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	ee07 3a90 	vmov	s15, r3
 80054c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80055b8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80054cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054d0:	4b36      	ldr	r3, [pc, #216]	; (80055ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80054d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d8:	ee07 3a90 	vmov	s15, r3
 80054dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80054e4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80055b4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80054e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005500:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005502:	4b2a      	ldr	r3, [pc, #168]	; (80055ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005506:	0a5b      	lsrs	r3, r3, #9
 8005508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800550c:	ee07 3a90 	vmov	s15, r3
 8005510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005514:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005518:	ee37 7a87 	vadd.f32	s14, s15, s14
 800551c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005520:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005528:	ee17 2a90 	vmov	r2, s15
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005530:	4b1e      	ldr	r3, [pc, #120]	; (80055ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005534:	0c1b      	lsrs	r3, r3, #16
 8005536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800553a:	ee07 3a90 	vmov	s15, r3
 800553e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005542:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005546:	ee37 7a87 	vadd.f32	s14, s15, s14
 800554a:	edd7 6a07 	vldr	s13, [r7, #28]
 800554e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005552:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005556:	ee17 2a90 	vmov	r2, s15
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800555e:	4b13      	ldr	r3, [pc, #76]	; (80055ac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005562:	0e1b      	lsrs	r3, r3, #24
 8005564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005568:	ee07 3a90 	vmov	s15, r3
 800556c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005570:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005574:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005578:	edd7 6a07 	vldr	s13, [r7, #28]
 800557c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005584:	ee17 2a90 	vmov	r2, s15
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800558c:	e008      	b.n	80055a0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	609a      	str	r2, [r3, #8]
}
 80055a0:	bf00      	nop
 80055a2:	3724      	adds	r7, #36	; 0x24
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	58024400 	.word	0x58024400
 80055b0:	03d09000 	.word	0x03d09000
 80055b4:	46000000 	.word	0x46000000
 80055b8:	4c742400 	.word	0x4c742400
 80055bc:	4a742400 	.word	0x4a742400
 80055c0:	4af42400 	.word	0x4af42400

080055c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055ce:	2300      	movs	r3, #0
 80055d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80055d2:	4b53      	ldr	r3, [pc, #332]	; (8005720 <RCCEx_PLL2_Config+0x15c>)
 80055d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	2b03      	cmp	r3, #3
 80055dc:	d101      	bne.n	80055e2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e099      	b.n	8005716 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80055e2:	4b4f      	ldr	r3, [pc, #316]	; (8005720 <RCCEx_PLL2_Config+0x15c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a4e      	ldr	r2, [pc, #312]	; (8005720 <RCCEx_PLL2_Config+0x15c>)
 80055e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055ee:	f7fb ff69 	bl	80014c4 <HAL_GetTick>
 80055f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80055f4:	e008      	b.n	8005608 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80055f6:	f7fb ff65 	bl	80014c4 <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	2b02      	cmp	r3, #2
 8005602:	d901      	bls.n	8005608 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e086      	b.n	8005716 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005608:	4b45      	ldr	r3, [pc, #276]	; (8005720 <RCCEx_PLL2_Config+0x15c>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1f0      	bne.n	80055f6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005614:	4b42      	ldr	r3, [pc, #264]	; (8005720 <RCCEx_PLL2_Config+0x15c>)
 8005616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005618:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	031b      	lsls	r3, r3, #12
 8005622:	493f      	ldr	r1, [pc, #252]	; (8005720 <RCCEx_PLL2_Config+0x15c>)
 8005624:	4313      	orrs	r3, r2
 8005626:	628b      	str	r3, [r1, #40]	; 0x28
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	3b01      	subs	r3, #1
 800562e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	3b01      	subs	r3, #1
 8005638:	025b      	lsls	r3, r3, #9
 800563a:	b29b      	uxth	r3, r3
 800563c:	431a      	orrs	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	3b01      	subs	r3, #1
 8005644:	041b      	lsls	r3, r3, #16
 8005646:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	3b01      	subs	r3, #1
 8005652:	061b      	lsls	r3, r3, #24
 8005654:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005658:	4931      	ldr	r1, [pc, #196]	; (8005720 <RCCEx_PLL2_Config+0x15c>)
 800565a:	4313      	orrs	r3, r2
 800565c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800565e:	4b30      	ldr	r3, [pc, #192]	; (8005720 <RCCEx_PLL2_Config+0x15c>)
 8005660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005662:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	492d      	ldr	r1, [pc, #180]	; (8005720 <RCCEx_PLL2_Config+0x15c>)
 800566c:	4313      	orrs	r3, r2
 800566e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005670:	4b2b      	ldr	r3, [pc, #172]	; (8005720 <RCCEx_PLL2_Config+0x15c>)
 8005672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005674:	f023 0220 	bic.w	r2, r3, #32
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	4928      	ldr	r1, [pc, #160]	; (8005720 <RCCEx_PLL2_Config+0x15c>)
 800567e:	4313      	orrs	r3, r2
 8005680:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005682:	4b27      	ldr	r3, [pc, #156]	; (8005720 <RCCEx_PLL2_Config+0x15c>)
 8005684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005686:	4a26      	ldr	r2, [pc, #152]	; (8005720 <RCCEx_PLL2_Config+0x15c>)
 8005688:	f023 0310 	bic.w	r3, r3, #16
 800568c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800568e:	4b24      	ldr	r3, [pc, #144]	; (8005720 <RCCEx_PLL2_Config+0x15c>)
 8005690:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005692:	4b24      	ldr	r3, [pc, #144]	; (8005724 <RCCEx_PLL2_Config+0x160>)
 8005694:	4013      	ands	r3, r2
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	69d2      	ldr	r2, [r2, #28]
 800569a:	00d2      	lsls	r2, r2, #3
 800569c:	4920      	ldr	r1, [pc, #128]	; (8005720 <RCCEx_PLL2_Config+0x15c>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80056a2:	4b1f      	ldr	r3, [pc, #124]	; (8005720 <RCCEx_PLL2_Config+0x15c>)
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a6:	4a1e      	ldr	r2, [pc, #120]	; (8005720 <RCCEx_PLL2_Config+0x15c>)
 80056a8:	f043 0310 	orr.w	r3, r3, #16
 80056ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d106      	bne.n	80056c2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80056b4:	4b1a      	ldr	r3, [pc, #104]	; (8005720 <RCCEx_PLL2_Config+0x15c>)
 80056b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b8:	4a19      	ldr	r2, [pc, #100]	; (8005720 <RCCEx_PLL2_Config+0x15c>)
 80056ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80056c0:	e00f      	b.n	80056e2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d106      	bne.n	80056d6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80056c8:	4b15      	ldr	r3, [pc, #84]	; (8005720 <RCCEx_PLL2_Config+0x15c>)
 80056ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056cc:	4a14      	ldr	r2, [pc, #80]	; (8005720 <RCCEx_PLL2_Config+0x15c>)
 80056ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80056d4:	e005      	b.n	80056e2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80056d6:	4b12      	ldr	r3, [pc, #72]	; (8005720 <RCCEx_PLL2_Config+0x15c>)
 80056d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056da:	4a11      	ldr	r2, [pc, #68]	; (8005720 <RCCEx_PLL2_Config+0x15c>)
 80056dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80056e2:	4b0f      	ldr	r3, [pc, #60]	; (8005720 <RCCEx_PLL2_Config+0x15c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a0e      	ldr	r2, [pc, #56]	; (8005720 <RCCEx_PLL2_Config+0x15c>)
 80056e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056ee:	f7fb fee9 	bl	80014c4 <HAL_GetTick>
 80056f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80056f4:	e008      	b.n	8005708 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80056f6:	f7fb fee5 	bl	80014c4 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b02      	cmp	r3, #2
 8005702:	d901      	bls.n	8005708 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e006      	b.n	8005716 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005708:	4b05      	ldr	r3, [pc, #20]	; (8005720 <RCCEx_PLL2_Config+0x15c>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d0f0      	beq.n	80056f6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005714:	7bfb      	ldrb	r3, [r7, #15]
}
 8005716:	4618      	mov	r0, r3
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	58024400 	.word	0x58024400
 8005724:	ffff0007 	.word	0xffff0007

08005728 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005732:	2300      	movs	r3, #0
 8005734:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005736:	4b53      	ldr	r3, [pc, #332]	; (8005884 <RCCEx_PLL3_Config+0x15c>)
 8005738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573a:	f003 0303 	and.w	r3, r3, #3
 800573e:	2b03      	cmp	r3, #3
 8005740:	d101      	bne.n	8005746 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e099      	b.n	800587a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005746:	4b4f      	ldr	r3, [pc, #316]	; (8005884 <RCCEx_PLL3_Config+0x15c>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a4e      	ldr	r2, [pc, #312]	; (8005884 <RCCEx_PLL3_Config+0x15c>)
 800574c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005750:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005752:	f7fb feb7 	bl	80014c4 <HAL_GetTick>
 8005756:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005758:	e008      	b.n	800576c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800575a:	f7fb feb3 	bl	80014c4 <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	2b02      	cmp	r3, #2
 8005766:	d901      	bls.n	800576c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e086      	b.n	800587a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800576c:	4b45      	ldr	r3, [pc, #276]	; (8005884 <RCCEx_PLL3_Config+0x15c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1f0      	bne.n	800575a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005778:	4b42      	ldr	r3, [pc, #264]	; (8005884 <RCCEx_PLL3_Config+0x15c>)
 800577a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	051b      	lsls	r3, r3, #20
 8005786:	493f      	ldr	r1, [pc, #252]	; (8005884 <RCCEx_PLL3_Config+0x15c>)
 8005788:	4313      	orrs	r3, r2
 800578a:	628b      	str	r3, [r1, #40]	; 0x28
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	3b01      	subs	r3, #1
 8005792:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	3b01      	subs	r3, #1
 800579c:	025b      	lsls	r3, r3, #9
 800579e:	b29b      	uxth	r3, r3
 80057a0:	431a      	orrs	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	041b      	lsls	r3, r3, #16
 80057aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80057ae:	431a      	orrs	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	3b01      	subs	r3, #1
 80057b6:	061b      	lsls	r3, r3, #24
 80057b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80057bc:	4931      	ldr	r1, [pc, #196]	; (8005884 <RCCEx_PLL3_Config+0x15c>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80057c2:	4b30      	ldr	r3, [pc, #192]	; (8005884 <RCCEx_PLL3_Config+0x15c>)
 80057c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	492d      	ldr	r1, [pc, #180]	; (8005884 <RCCEx_PLL3_Config+0x15c>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80057d4:	4b2b      	ldr	r3, [pc, #172]	; (8005884 <RCCEx_PLL3_Config+0x15c>)
 80057d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	4928      	ldr	r1, [pc, #160]	; (8005884 <RCCEx_PLL3_Config+0x15c>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80057e6:	4b27      	ldr	r3, [pc, #156]	; (8005884 <RCCEx_PLL3_Config+0x15c>)
 80057e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ea:	4a26      	ldr	r2, [pc, #152]	; (8005884 <RCCEx_PLL3_Config+0x15c>)
 80057ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80057f2:	4b24      	ldr	r3, [pc, #144]	; (8005884 <RCCEx_PLL3_Config+0x15c>)
 80057f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057f6:	4b24      	ldr	r3, [pc, #144]	; (8005888 <RCCEx_PLL3_Config+0x160>)
 80057f8:	4013      	ands	r3, r2
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	69d2      	ldr	r2, [r2, #28]
 80057fe:	00d2      	lsls	r2, r2, #3
 8005800:	4920      	ldr	r1, [pc, #128]	; (8005884 <RCCEx_PLL3_Config+0x15c>)
 8005802:	4313      	orrs	r3, r2
 8005804:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005806:	4b1f      	ldr	r3, [pc, #124]	; (8005884 <RCCEx_PLL3_Config+0x15c>)
 8005808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580a:	4a1e      	ldr	r2, [pc, #120]	; (8005884 <RCCEx_PLL3_Config+0x15c>)
 800580c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005810:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d106      	bne.n	8005826 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005818:	4b1a      	ldr	r3, [pc, #104]	; (8005884 <RCCEx_PLL3_Config+0x15c>)
 800581a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581c:	4a19      	ldr	r2, [pc, #100]	; (8005884 <RCCEx_PLL3_Config+0x15c>)
 800581e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005822:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005824:	e00f      	b.n	8005846 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d106      	bne.n	800583a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800582c:	4b15      	ldr	r3, [pc, #84]	; (8005884 <RCCEx_PLL3_Config+0x15c>)
 800582e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005830:	4a14      	ldr	r2, [pc, #80]	; (8005884 <RCCEx_PLL3_Config+0x15c>)
 8005832:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005836:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005838:	e005      	b.n	8005846 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800583a:	4b12      	ldr	r3, [pc, #72]	; (8005884 <RCCEx_PLL3_Config+0x15c>)
 800583c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583e:	4a11      	ldr	r2, [pc, #68]	; (8005884 <RCCEx_PLL3_Config+0x15c>)
 8005840:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005844:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005846:	4b0f      	ldr	r3, [pc, #60]	; (8005884 <RCCEx_PLL3_Config+0x15c>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a0e      	ldr	r2, [pc, #56]	; (8005884 <RCCEx_PLL3_Config+0x15c>)
 800584c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005850:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005852:	f7fb fe37 	bl	80014c4 <HAL_GetTick>
 8005856:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005858:	e008      	b.n	800586c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800585a:	f7fb fe33 	bl	80014c4 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d901      	bls.n	800586c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e006      	b.n	800587a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800586c:	4b05      	ldr	r3, [pc, #20]	; (8005884 <RCCEx_PLL3_Config+0x15c>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d0f0      	beq.n	800585a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005878:	7bfb      	ldrb	r3, [r7, #15]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	58024400 	.word	0x58024400
 8005888:	ffff0007 	.word	0xffff0007

0800588c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b08a      	sub	sp, #40	; 0x28
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e075      	b.n	800598a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d105      	bne.n	80058b6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7fb fa6f 	bl	8000d94 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2204      	movs	r2, #4
 80058ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f868 	bl	8005994 <HAL_SD_InitCard>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e05d      	b.n	800598a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80058ce:	f107 0308 	add.w	r3, r7, #8
 80058d2:	4619      	mov	r1, r3
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 fc21 	bl	800611c <HAL_SD_GetCardStatus>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d001      	beq.n	80058e4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e052      	b.n	800598a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80058e4:	7e3b      	ldrb	r3, [r7, #24]
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80058ea:	7e7b      	ldrb	r3, [r7, #25]
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d10a      	bne.n	800590e <HAL_SD_Init+0x82>
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d102      	bne.n	8005904 <HAL_SD_Init+0x78>
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d004      	beq.n	800590e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800590a:	659a      	str	r2, [r3, #88]	; 0x58
 800590c:	e00b      	b.n	8005926 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005912:	2b01      	cmp	r3, #1
 8005914:	d104      	bne.n	8005920 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f44f 7280 	mov.w	r2, #256	; 0x100
 800591c:	659a      	str	r2, [r3, #88]	; 0x58
 800591e:	e002      	b.n	8005926 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	4619      	mov	r1, r3
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 fcb3 	bl	8006298 <HAL_SD_ConfigWideBusOperation>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d001      	beq.n	800593c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e026      	b.n	800598a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800593c:	f7fb fdc2 	bl	80014c4 <HAL_GetTick>
 8005940:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005942:	e011      	b.n	8005968 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005944:	f7fb fdbe 	bl	80014c4 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005952:	d109      	bne.n	8005968 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800595a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e010      	b.n	800598a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fda7 	bl	80064bc <HAL_SD_GetCardState>
 800596e:	4603      	mov	r3, r0
 8005970:	2b04      	cmp	r3, #4
 8005972:	d1e7      	bne.n	8005944 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3728      	adds	r7, #40	; 0x28
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
	...

08005994 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005994:	b590      	push	{r4, r7, lr}
 8005996:	b08d      	sub	sp, #52	; 0x34
 8005998:	af02      	add	r7, sp, #8
 800599a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 800599c:	2300      	movs	r3, #0
 800599e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80059a0:	2300      	movs	r3, #0
 80059a2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80059a4:	2300      	movs	r3, #0
 80059a6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80059a8:	2300      	movs	r3, #0
 80059aa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80059ac:	2300      	movs	r3, #0
 80059ae:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80059b0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80059b4:	f7fe fd24 	bl	8004400 <HAL_RCCEx_GetPeriphCLKFreq>
 80059b8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d109      	bne.n	80059d4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80059ce:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e06a      	b.n	8005aaa <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d6:	0a1b      	lsrs	r3, r3, #8
 80059d8:	4a36      	ldr	r2, [pc, #216]	; (8005ab4 <HAL_SD_InitCard+0x120>)
 80059da:	fba2 2303 	umull	r2, r3, r2, r3
 80059de:	091b      	lsrs	r3, r3, #4
 80059e0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681c      	ldr	r4, [r3, #0]
 80059e6:	466a      	mov	r2, sp
 80059e8:	f107 0318 	add.w	r3, r7, #24
 80059ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80059f0:	e882 0003 	stmia.w	r2, {r0, r1}
 80059f4:	f107 030c 	add.w	r3, r7, #12
 80059f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059fa:	4620      	mov	r0, r4
 80059fc:	f002 fb0a 	bl	8008014 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f002 fb3c 	bl	8008082 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005a16:	4a28      	ldr	r2, [pc, #160]	; (8005ab8 <HAL_SD_InitCard+0x124>)
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1e:	3301      	adds	r3, #1
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fb fd5b 	bl	80014dc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fe36 	bl	8006698 <SD_PowerON>
 8005a2c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005a2e:	6a3b      	ldr	r3, [r7, #32]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00b      	beq.n	8005a4c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	431a      	orrs	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e02e      	b.n	8005aaa <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 fd55 	bl	80064fc <SD_InitCard>
 8005a52:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00b      	beq.n	8005a72 <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	431a      	orrs	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e01b      	b.n	8005aaa <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f002 fb96 	bl	80081ac <SDMMC_CmdBlockLength>
 8005a80:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00f      	beq.n	8005aa8 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a0b      	ldr	r2, [pc, #44]	; (8005abc <HAL_SD_InitCard+0x128>)
 8005a8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	431a      	orrs	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e000      	b.n	8005aaa <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	372c      	adds	r7, #44	; 0x2c
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd90      	pop	{r4, r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	014f8b59 	.word	0x014f8b59
 8005ab8:	00012110 	.word	0x00012110
 8005abc:	1fe00fff 	.word	0x1fe00fff

08005ac0 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b092      	sub	sp, #72	; 0x48
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
 8005acc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005ace:	f7fb fcf9 	bl	80014c4 <HAL_GetTick>
 8005ad2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d107      	bne.n	8005af2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e167      	b.n	8005dc2 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	f040 815a 	bne.w	8005db4 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005b06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	441a      	add	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d907      	bls.n	8005b24 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b18:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e14e      	b.n	8005dc2 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2203      	movs	r2, #3
 8005b28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2200      	movs	r2, #0
 8005b32:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d002      	beq.n	8005b42 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3e:	025b      	lsls	r3, r3, #9
 8005b40:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005b42:	f04f 33ff 	mov.w	r3, #4294967295
 8005b46:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	025b      	lsls	r3, r3, #9
 8005b4c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005b4e:	2390      	movs	r3, #144	; 0x90
 8005b50:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005b52:	2302      	movs	r3, #2
 8005b54:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f107 0214 	add.w	r2, r7, #20
 8005b66:	4611      	mov	r1, r2
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f002 faf3 	bl	8008154 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68da      	ldr	r2, [r3, #12]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b7c:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d90a      	bls.n	8005b9a <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2202      	movs	r2, #2
 8005b88:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b90:	4618      	mov	r0, r3
 8005b92:	f002 fb51 	bl	8008238 <SDMMC_CmdReadMultiBlock>
 8005b96:	6478      	str	r0, [r7, #68]	; 0x44
 8005b98:	e009      	b.n	8005bae <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f002 fb23 	bl	80081f2 <SDMMC_CmdReadSingleBlock>
 8005bac:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d012      	beq.n	8005bda <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a84      	ldr	r2, [pc, #528]	; (8005dcc <HAL_SD_ReadBlocks+0x30c>)
 8005bba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e0f3      	b.n	8005dc2 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005bde:	e058      	b.n	8005c92 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d033      	beq.n	8005c56 <HAL_SD_ReadBlocks+0x196>
 8005bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bf0:	2b1f      	cmp	r3, #31
 8005bf2:	d930      	bls.n	8005c56 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	643b      	str	r3, [r7, #64]	; 0x40
 8005bf8:	e027      	b.n	8005c4a <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f002 fa32 	bl	8008068 <SDMMC_ReadFIFO>
 8005c04:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c0c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c10:	3301      	adds	r3, #1
 8005c12:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c16:	0a1b      	lsrs	r3, r3, #8
 8005c18:	b2da      	uxtb	r2, r3
 8005c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c1c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c20:	3301      	adds	r3, #1
 8005c22:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c26:	0c1b      	lsrs	r3, r3, #16
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c2c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c30:	3301      	adds	r3, #1
 8005c32:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c36:	0e1b      	lsrs	r3, r3, #24
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c3c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c40:	3301      	adds	r3, #1
 8005c42:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8005c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c46:	3301      	adds	r3, #1
 8005c48:	643b      	str	r3, [r7, #64]	; 0x40
 8005c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c4c:	2b07      	cmp	r3, #7
 8005c4e:	d9d4      	bls.n	8005bfa <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8005c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c52:	3b20      	subs	r3, #32
 8005c54:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8005c56:	f7fb fc35 	bl	80014c4 <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d902      	bls.n	8005c6c <HAL_SD_ReadBlocks+0x1ac>
 8005c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d112      	bne.n	8005c92 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a56      	ldr	r2, [pc, #344]	; (8005dcc <HAL_SD_ReadBlocks+0x30c>)
 8005c72:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c78:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e097      	b.n	8005dc2 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c98:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d09f      	beq.n	8005be0 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cae:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d022      	beq.n	8005d04 <HAL_SD_ReadBlocks+0x244>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d91f      	bls.n	8005d04 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc8:	2b03      	cmp	r3, #3
 8005cca:	d01b      	beq.n	8005d04 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f002 fad5 	bl	8008280 <SDMMC_CmdStopTransfer>
 8005cd6:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8005cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d012      	beq.n	8005d04 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a3a      	ldr	r2, [pc, #232]	; (8005dcc <HAL_SD_ReadBlocks+0x30c>)
 8005ce4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cec:	431a      	orrs	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e05e      	b.n	8005dc2 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d0a:	f003 0308 	and.w	r3, r3, #8
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d012      	beq.n	8005d38 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a2d      	ldr	r2, [pc, #180]	; (8005dcc <HAL_SD_ReadBlocks+0x30c>)
 8005d18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d1e:	f043 0208 	orr.w	r2, r3, #8
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e044      	b.n	8005dc2 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d012      	beq.n	8005d6c <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a20      	ldr	r2, [pc, #128]	; (8005dcc <HAL_SD_ReadBlocks+0x30c>)
 8005d4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d52:	f043 0202 	orr.w	r2, r3, #2
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e02a      	b.n	8005dc2 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d72:	f003 0320 	and.w	r3, r3, #32
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d012      	beq.n	8005da0 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a13      	ldr	r2, [pc, #76]	; (8005dcc <HAL_SD_ReadBlocks+0x30c>)
 8005d80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d86:	f043 0220 	orr.w	r2, r3, #32
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e010      	b.n	8005dc2 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a0a      	ldr	r2, [pc, #40]	; (8005dd0 <HAL_SD_ReadBlocks+0x310>)
 8005da6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8005db0:	2300      	movs	r3, #0
 8005db2:	e006      	b.n	8005dc2 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
  }
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3748      	adds	r7, #72	; 0x48
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	1fe00fff 	.word	0x1fe00fff
 8005dd0:	18000f3a 	.word	0x18000f3a

08005dd4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005de2:	0f9b      	lsrs	r3, r3, #30
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dee:	0e9b      	lsrs	r3, r3, #26
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	f003 030f 	and.w	r3, r3, #15
 8005df6:	b2da      	uxtb	r2, r3
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e00:	0e1b      	lsrs	r3, r3, #24
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	f003 0303 	and.w	r3, r3, #3
 8005e08:	b2da      	uxtb	r2, r3
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e12:	0c1b      	lsrs	r3, r3, #16
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e1e:	0a1b      	lsrs	r3, r3, #8
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e34:	0d1b      	lsrs	r3, r3, #20
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e40:	0c1b      	lsrs	r3, r3, #16
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	f003 030f 	and.w	r3, r3, #15
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e52:	0bdb      	lsrs	r3, r3, #15
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e64:	0b9b      	lsrs	r3, r3, #14
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e76:	0b5b      	lsrs	r3, r3, #13
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e88:	0b1b      	lsrs	r3, r3, #12
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	b2da      	uxtb	r2, r3
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d163      	bne.n	8005f6c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ea8:	009a      	lsls	r2, r3, #2
 8005eaa:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005eae:	4013      	ands	r3, r2
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8005eb4:	0f92      	lsrs	r2, r2, #30
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ec0:	0edb      	lsrs	r3, r3, #27
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	f003 0307 	and.w	r3, r3, #7
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ed2:	0e1b      	lsrs	r3, r3, #24
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	f003 0307 	and.w	r3, r3, #7
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ee4:	0d5b      	lsrs	r3, r3, #21
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	f003 0307 	and.w	r3, r3, #7
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ef6:	0c9b      	lsrs	r3, r3, #18
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	f003 0307 	and.w	r3, r3, #7
 8005efe:	b2da      	uxtb	r2, r3
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f08:	0bdb      	lsrs	r3, r3, #15
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	f003 0307 	and.w	r3, r3, #7
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	1c5a      	adds	r2, r3, #1
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	7e1b      	ldrb	r3, [r3, #24]
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	f003 0307 	and.w	r3, r3, #7
 8005f2a:	3302      	adds	r3, #2
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005f36:	fb02 f203 	mul.w	r2, r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	7a1b      	ldrb	r3, [r3, #8]
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	f003 030f 	and.w	r3, r3, #15
 8005f48:	2201      	movs	r2, #1
 8005f4a:	409a      	lsls	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005f58:	0a52      	lsrs	r2, r2, #9
 8005f5a:	fb02 f203 	mul.w	r2, r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f68:	655a      	str	r2, [r3, #84]	; 0x54
 8005f6a:	e031      	b.n	8005fd0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d11d      	bne.n	8005fb0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f78:	041b      	lsls	r3, r3, #16
 8005f7a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f82:	0c1b      	lsrs	r3, r3, #16
 8005f84:	431a      	orrs	r2, r3
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	029a      	lsls	r2, r3, #10
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fa4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	655a      	str	r2, [r3, #84]	; 0x54
 8005fae:	e00f      	b.n	8005fd0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a58      	ldr	r2, [pc, #352]	; (8006118 <HAL_SD_GetCardCSD+0x344>)
 8005fb6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fbc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e09d      	b.n	800610c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fd4:	0b9b      	lsrs	r3, r3, #14
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	f003 0301 	and.w	r3, r3, #1
 8005fdc:	b2da      	uxtb	r2, r3
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fe6:	09db      	lsrs	r3, r3, #7
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fee:	b2da      	uxtb	r2, r3
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006008:	0fdb      	lsrs	r3, r3, #31
 800600a:	b2da      	uxtb	r2, r3
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006014:	0f5b      	lsrs	r3, r3, #29
 8006016:	b2db      	uxtb	r3, r3
 8006018:	f003 0303 	and.w	r3, r3, #3
 800601c:	b2da      	uxtb	r2, r3
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006026:	0e9b      	lsrs	r3, r3, #26
 8006028:	b2db      	uxtb	r3, r3
 800602a:	f003 0307 	and.w	r3, r3, #7
 800602e:	b2da      	uxtb	r2, r3
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006038:	0d9b      	lsrs	r3, r3, #22
 800603a:	b2db      	uxtb	r3, r3
 800603c:	f003 030f 	and.w	r3, r3, #15
 8006040:	b2da      	uxtb	r2, r3
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800604a:	0d5b      	lsrs	r3, r3, #21
 800604c:	b2db      	uxtb	r3, r3
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	b2da      	uxtb	r2, r3
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006066:	0c1b      	lsrs	r3, r3, #16
 8006068:	b2db      	uxtb	r3, r3
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	b2da      	uxtb	r2, r3
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800607a:	0bdb      	lsrs	r3, r3, #15
 800607c:	b2db      	uxtb	r3, r3
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	b2da      	uxtb	r2, r3
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800608e:	0b9b      	lsrs	r3, r3, #14
 8006090:	b2db      	uxtb	r3, r3
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	b2da      	uxtb	r2, r3
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060a2:	0b5b      	lsrs	r3, r3, #13
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	b2da      	uxtb	r2, r3
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060b6:	0b1b      	lsrs	r3, r3, #12
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	b2da      	uxtb	r2, r3
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060ca:	0a9b      	lsrs	r3, r3, #10
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	f003 0303 	and.w	r3, r3, #3
 80060d2:	b2da      	uxtb	r2, r3
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060de:	0a1b      	lsrs	r3, r3, #8
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	f003 0303 	and.w	r3, r3, #3
 80060e6:	b2da      	uxtb	r2, r3
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060f2:	085b      	lsrs	r3, r3, #1
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060fa:	b2da      	uxtb	r2, r3
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr
 8006118:	1fe00fff 	.word	0x1fe00fff

0800611c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b094      	sub	sp, #80	; 0x50
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006126:	2300      	movs	r3, #0
 8006128:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006132:	b2db      	uxtb	r3, r3
 8006134:	2b03      	cmp	r3, #3
 8006136:	d101      	bne.n	800613c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e0a7      	b.n	800628c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800613c:	f107 0308 	add.w	r3, r7, #8
 8006140:	4619      	mov	r1, r3
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 fb36 	bl	80067b4 <SD_SendSDStatus>
 8006148:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800614a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800614c:	2b00      	cmp	r3, #0
 800614e:	d011      	beq.n	8006174 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a4f      	ldr	r2, [pc, #316]	; (8006294 <HAL_SD_GetCardStatus+0x178>)
 8006156:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800615c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800615e:	431a      	orrs	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006172:	e070      	b.n	8006256 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	099b      	lsrs	r3, r3, #6
 8006178:	b2db      	uxtb	r3, r3
 800617a:	f003 0303 	and.w	r3, r3, #3
 800617e:	b2da      	uxtb	r2, r3
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	095b      	lsrs	r3, r3, #5
 8006188:	b2db      	uxtb	r3, r3
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	b2da      	uxtb	r2, r3
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	0a1b      	lsrs	r3, r3, #8
 8006198:	b29b      	uxth	r3, r3
 800619a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800619e:	b29a      	uxth	r2, r3
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	0e1b      	lsrs	r3, r3, #24
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	4313      	orrs	r3, r2
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	061a      	lsls	r2, r3, #24
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	021b      	lsls	r3, r3, #8
 80061b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80061ba:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	0a1b      	lsrs	r3, r3, #8
 80061c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80061c4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	0e1b      	lsrs	r3, r3, #24
 80061ca:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	0a1b      	lsrs	r3, r3, #8
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	0d1b      	lsrs	r3, r3, #20
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	f003 030f 	and.w	r3, r3, #15
 80061ec:	b2da      	uxtb	r2, r3
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	0c1b      	lsrs	r3, r3, #16
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	b29b      	uxth	r3, r3
 8006202:	b2db      	uxtb	r3, r3
 8006204:	b29b      	uxth	r3, r3
 8006206:	4313      	orrs	r3, r2
 8006208:	b29a      	uxth	r2, r3
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	0a9b      	lsrs	r3, r3, #10
 8006212:	b2db      	uxtb	r3, r3
 8006214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006218:	b2da      	uxtb	r2, r3
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	0a1b      	lsrs	r3, r3, #8
 8006222:	b2db      	uxtb	r3, r3
 8006224:	f003 0303 	and.w	r3, r3, #3
 8006228:	b2da      	uxtb	r2, r3
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	091b      	lsrs	r3, r3, #4
 8006232:	b2db      	uxtb	r3, r3
 8006234:	f003 030f 	and.w	r3, r3, #15
 8006238:	b2da      	uxtb	r2, r3
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	b2db      	uxtb	r3, r3
 8006242:	f003 030f 	and.w	r3, r3, #15
 8006246:	b2da      	uxtb	r2, r3
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	0e1b      	lsrs	r3, r3, #24
 8006250:	b2da      	uxtb	r2, r3
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800625e:	4618      	mov	r0, r3
 8006260:	f001 ffa4 	bl	80081ac <SDMMC_CmdBlockLength>
 8006264:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00d      	beq.n	8006288 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a08      	ldr	r2, [pc, #32]	; (8006294 <HAL_SD_GetCardStatus+0x178>)
 8006272:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006278:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8006288:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800628c:	4618      	mov	r0, r3
 800628e:	3750      	adds	r7, #80	; 0x50
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	1fe00fff 	.word	0x1fe00fff

08006298 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006298:	b590      	push	{r4, r7, lr}
 800629a:	b08d      	sub	sp, #52	; 0x34
 800629c:	af02      	add	r7, sp, #8
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 80062a6:	2300      	movs	r3, #0
 80062a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2203      	movs	r2, #3
 80062b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b8:	2b03      	cmp	r3, #3
 80062ba:	d02e      	beq.n	800631a <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062c2:	d106      	bne.n	80062d2 <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	635a      	str	r2, [r3, #52]	; 0x34
 80062d0:	e029      	b.n	8006326 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062d8:	d10a      	bne.n	80062f0 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fb62 	bl	80069a4 <SD_WideBus_Enable>
 80062e0:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	431a      	orrs	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	635a      	str	r2, [r3, #52]	; 0x34
 80062ee:	e01a      	b.n	8006326 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10a      	bne.n	800630c <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fb9f 	bl	8006a3a <SD_WideBus_Disable>
 80062fc:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	431a      	orrs	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	635a      	str	r2, [r3, #52]	; 0x34
 800630a:	e00c      	b.n	8006326 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006310:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	635a      	str	r2, [r3, #52]	; 0x34
 8006318:	e005      	b.n	8006326 <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800631e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800632a:	2b00      	cmp	r3, #0
 800632c:	d007      	beq.n	800633e <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a5e      	ldr	r2, [pc, #376]	; (80064ac <HAL_SD_ConfigWideBusOperation+0x214>)
 8006334:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800633c:	e094      	b.n	8006468 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800633e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006342:	f7fe f85d 	bl	8004400 <HAL_RCCEx_GetPeriphCLKFreq>
 8006346:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	2b00      	cmp	r3, #0
 800634c:	f000 8083 	beq.w	8006456 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	695a      	ldr	r2, [r3, #20]
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	4950      	ldr	r1, [pc, #320]	; (80064b0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800636e:	fba1 1303 	umull	r1, r3, r1, r3
 8006372:	0e1b      	lsrs	r3, r3, #24
 8006374:	429a      	cmp	r2, r3
 8006376:	d303      	bcc.n	8006380 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	61bb      	str	r3, [r7, #24]
 800637e:	e05a      	b.n	8006436 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006388:	d103      	bne.n	8006392 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	61bb      	str	r3, [r7, #24]
 8006390:	e051      	b.n	8006436 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800639a:	d126      	bne.n	80063ea <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10e      	bne.n	80063c2 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80063a4:	6a3b      	ldr	r3, [r7, #32]
 80063a6:	4a43      	ldr	r2, [pc, #268]	; (80064b4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d906      	bls.n	80063ba <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80063ac:	6a3b      	ldr	r3, [r7, #32]
 80063ae:	4a40      	ldr	r2, [pc, #256]	; (80064b0 <HAL_SD_ConfigWideBusOperation+0x218>)
 80063b0:	fba2 2303 	umull	r2, r3, r2, r3
 80063b4:	0e5b      	lsrs	r3, r3, #25
 80063b6:	61bb      	str	r3, [r7, #24]
 80063b8:	e03d      	b.n	8006436 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	61bb      	str	r3, [r7, #24]
 80063c0:	e039      	b.n	8006436 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	005b      	lsls	r3, r3, #1
 80063c8:	6a3a      	ldr	r2, [r7, #32]
 80063ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ce:	4a39      	ldr	r2, [pc, #228]	; (80064b4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d906      	bls.n	80063e2 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80063d4:	6a3b      	ldr	r3, [r7, #32]
 80063d6:	4a36      	ldr	r2, [pc, #216]	; (80064b0 <HAL_SD_ConfigWideBusOperation+0x218>)
 80063d8:	fba2 2303 	umull	r2, r3, r2, r3
 80063dc:	0e5b      	lsrs	r3, r3, #25
 80063de:	61bb      	str	r3, [r7, #24]
 80063e0:	e029      	b.n	8006436 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	61bb      	str	r3, [r7, #24]
 80063e8:	e025      	b.n	8006436 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10e      	bne.n	8006410 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80063f2:	6a3b      	ldr	r3, [r7, #32]
 80063f4:	4a30      	ldr	r2, [pc, #192]	; (80064b8 <HAL_SD_ConfigWideBusOperation+0x220>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d906      	bls.n	8006408 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80063fa:	6a3b      	ldr	r3, [r7, #32]
 80063fc:	4a2c      	ldr	r2, [pc, #176]	; (80064b0 <HAL_SD_ConfigWideBusOperation+0x218>)
 80063fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006402:	0e1b      	lsrs	r3, r3, #24
 8006404:	61bb      	str	r3, [r7, #24]
 8006406:	e016      	b.n	8006436 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	61bb      	str	r3, [r7, #24]
 800640e:	e012      	b.n	8006436 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	005b      	lsls	r3, r3, #1
 8006416:	6a3a      	ldr	r2, [r7, #32]
 8006418:	fbb2 f3f3 	udiv	r3, r2, r3
 800641c:	4a26      	ldr	r2, [pc, #152]	; (80064b8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d906      	bls.n	8006430 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006422:	6a3b      	ldr	r3, [r7, #32]
 8006424:	4a22      	ldr	r2, [pc, #136]	; (80064b0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006426:	fba2 2303 	umull	r2, r3, r2, r3
 800642a:	0e1b      	lsrs	r3, r3, #24
 800642c:	61bb      	str	r3, [r7, #24]
 800642e:	e002      	b.n	8006436 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681c      	ldr	r4, [r3, #0]
 800643a:	466a      	mov	r2, sp
 800643c:	f107 0314 	add.w	r3, r7, #20
 8006440:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006444:	e882 0003 	stmia.w	r2, {r0, r1}
 8006448:	f107 0308 	add.w	r3, r7, #8
 800644c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800644e:	4620      	mov	r0, r4
 8006450:	f001 fde0 	bl	8008014 <SDMMC_Init>
 8006454:	e008      	b.n	8006468 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800645a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006470:	4618      	mov	r0, r3
 8006472:	f001 fe9b 	bl	80081ac <SDMMC_CmdBlockLength>
 8006476:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00c      	beq.n	8006498 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a0a      	ldr	r2, [pc, #40]	; (80064ac <HAL_SD_ConfigWideBusOperation+0x214>)
 8006484:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	431a      	orrs	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80064a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	372c      	adds	r7, #44	; 0x2c
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd90      	pop	{r4, r7, pc}
 80064ac:	1fe00fff 	.word	0x1fe00fff
 80064b0:	55e63b89 	.word	0x55e63b89
 80064b4:	02faf080 	.word	0x02faf080
 80064b8:	017d7840 	.word	0x017d7840

080064bc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80064c4:	2300      	movs	r3, #0
 80064c6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80064c8:	f107 030c 	add.w	r3, r7, #12
 80064cc:	4619      	mov	r1, r3
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fa40 	bl	8006954 <SD_SendStatus>
 80064d4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d005      	beq.n	80064e8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	431a      	orrs	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	0a5b      	lsrs	r3, r3, #9
 80064ec:	f003 030f 	and.w	r3, r3, #15
 80064f0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80064f2:	693b      	ldr	r3, [r7, #16]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b090      	sub	sp, #64	; 0x40
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8006504:	2300      	movs	r3, #0
 8006506:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8006508:	f7fa ffdc 	bl	80014c4 <HAL_GetTick>
 800650c:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4618      	mov	r0, r3
 8006514:	f001 fdc6 	bl	80080a4 <SDMMC_GetPowerState>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d102      	bne.n	8006524 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800651e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006522:	e0b5      	b.n	8006690 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006528:	2b03      	cmp	r3, #3
 800652a:	d02e      	beq.n	800658a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4618      	mov	r0, r3
 8006532:	f001 ffca 	bl	80084ca <SDMMC_CmdSendCID>
 8006536:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653a:	2b00      	cmp	r3, #0
 800653c:	d001      	beq.n	8006542 <SD_InitCard+0x46>
    {
      return errorstate;
 800653e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006540:	e0a6      	b.n	8006690 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2100      	movs	r1, #0
 8006548:	4618      	mov	r0, r3
 800654a:	f001 fdf0 	bl	800812e <SDMMC_GetResponse>
 800654e:	4602      	mov	r2, r0
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2104      	movs	r1, #4
 800655a:	4618      	mov	r0, r3
 800655c:	f001 fde7 	bl	800812e <SDMMC_GetResponse>
 8006560:	4602      	mov	r2, r0
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2108      	movs	r1, #8
 800656c:	4618      	mov	r0, r3
 800656e:	f001 fdde 	bl	800812e <SDMMC_GetResponse>
 8006572:	4602      	mov	r2, r0
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	210c      	movs	r1, #12
 800657e:	4618      	mov	r0, r3
 8006580:	f001 fdd5 	bl	800812e <SDMMC_GetResponse>
 8006584:	4602      	mov	r2, r0
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658e:	2b03      	cmp	r3, #3
 8006590:	d01d      	beq.n	80065ce <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8006592:	e019      	b.n	80065c8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f107 020a 	add.w	r2, r7, #10
 800659c:	4611      	mov	r1, r2
 800659e:	4618      	mov	r0, r3
 80065a0:	f001 ffd2 	bl	8008548 <SDMMC_CmdSetRelAdd>
 80065a4:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80065a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <SD_InitCard+0xb4>
      {
        return errorstate;
 80065ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ae:	e06f      	b.n	8006690 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80065b0:	f7fa ff88 	bl	80014c4 <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	f241 3287 	movw	r2, #4999	; 0x1387
 80065be:	4293      	cmp	r3, r2
 80065c0:	d902      	bls.n	80065c8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80065c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80065c6:	e063      	b.n	8006690 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80065c8:	897b      	ldrh	r3, [r7, #10]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d0e2      	beq.n	8006594 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d2:	2b03      	cmp	r3, #3
 80065d4:	d036      	beq.n	8006644 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80065d6:	897b      	ldrh	r3, [r7, #10]
 80065d8:	461a      	mov	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e6:	041b      	lsls	r3, r3, #16
 80065e8:	4619      	mov	r1, r3
 80065ea:	4610      	mov	r0, r2
 80065ec:	f001 ff8c 	bl	8008508 <SDMMC_CmdSendCSD>
 80065f0:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80065f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d001      	beq.n	80065fc <SD_InitCard+0x100>
    {
      return errorstate;
 80065f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fa:	e049      	b.n	8006690 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2100      	movs	r1, #0
 8006602:	4618      	mov	r0, r3
 8006604:	f001 fd93 	bl	800812e <SDMMC_GetResponse>
 8006608:	4602      	mov	r2, r0
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2104      	movs	r1, #4
 8006614:	4618      	mov	r0, r3
 8006616:	f001 fd8a 	bl	800812e <SDMMC_GetResponse>
 800661a:	4602      	mov	r2, r0
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2108      	movs	r1, #8
 8006626:	4618      	mov	r0, r3
 8006628:	f001 fd81 	bl	800812e <SDMMC_GetResponse>
 800662c:	4602      	mov	r2, r0
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	210c      	movs	r1, #12
 8006638:	4618      	mov	r0, r3
 800663a:	f001 fd78 	bl	800812e <SDMMC_GetResponse>
 800663e:	4602      	mov	r2, r0
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2104      	movs	r1, #4
 800664a:	4618      	mov	r0, r3
 800664c:	f001 fd6f 	bl	800812e <SDMMC_GetResponse>
 8006650:	4603      	mov	r3, r0
 8006652:	0d1a      	lsrs	r2, r3, #20
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006658:	f107 030c 	add.w	r3, r7, #12
 800665c:	4619      	mov	r1, r3
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f7ff fbb8 	bl	8005dd4 <HAL_SD_GetCardCSD>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d002      	beq.n	8006670 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800666a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800666e:	e00f      	b.n	8006690 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006678:	041b      	lsls	r3, r3, #16
 800667a:	4619      	mov	r1, r3
 800667c:	4610      	mov	r0, r2
 800667e:	f001 fe3b 	bl	80082f8 <SDMMC_CmdSelDesel>
 8006682:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8006684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006686:	2b00      	cmp	r3, #0
 8006688:	d001      	beq.n	800668e <SD_InitCard+0x192>
  {
    return errorstate;
 800668a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668c:	e000      	b.n	8006690 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3740      	adds	r7, #64	; 0x40
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066a0:	2300      	movs	r3, #0
 80066a2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80066a4:	2300      	movs	r3, #0
 80066a6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80066a8:	2300      	movs	r3, #0
 80066aa:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4618      	mov	r0, r3
 80066b2:	f001 fe44 	bl	800833e <SDMMC_CmdGoIdleState>
 80066b6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d001      	beq.n	80066c2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	e072      	b.n	80067a8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f001 fe57 	bl	800837a <SDMMC_CmdOperCond>
 80066cc:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066d4:	d10d      	bne.n	80066f2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f001 fe2c 	bl	800833e <SDMMC_CmdGoIdleState>
 80066e6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d004      	beq.n	80066f8 <SD_PowerON+0x60>
    {
      return errorstate;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	e05a      	b.n	80067a8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d137      	bne.n	8006770 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2100      	movs	r1, #0
 8006706:	4618      	mov	r0, r3
 8006708:	f001 fe57 	bl	80083ba <SDMMC_CmdAppCommand>
 800670c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d02d      	beq.n	8006770 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006714:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006718:	e046      	b.n	80067a8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2100      	movs	r1, #0
 8006720:	4618      	mov	r0, r3
 8006722:	f001 fe4a 	bl	80083ba <SDMMC_CmdAppCommand>
 8006726:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d001      	beq.n	8006732 <SD_PowerON+0x9a>
    {
      return errorstate;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	e03a      	b.n	80067a8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	491e      	ldr	r1, [pc, #120]	; (80067b0 <SD_PowerON+0x118>)
 8006738:	4618      	mov	r0, r3
 800673a:	f001 fe61 	bl	8008400 <SDMMC_CmdAppOperCommand>
 800673e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d002      	beq.n	800674c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006746:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800674a:	e02d      	b.n	80067a8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2100      	movs	r1, #0
 8006752:	4618      	mov	r0, r3
 8006754:	f001 fceb 	bl	800812e <SDMMC_GetResponse>
 8006758:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	0fdb      	lsrs	r3, r3, #31
 800675e:	2b01      	cmp	r3, #1
 8006760:	d101      	bne.n	8006766 <SD_PowerON+0xce>
 8006762:	2301      	movs	r3, #1
 8006764:	e000      	b.n	8006768 <SD_PowerON+0xd0>
 8006766:	2300      	movs	r3, #0
 8006768:	613b      	str	r3, [r7, #16]

    count++;
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	3301      	adds	r3, #1
 800676e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006776:	4293      	cmp	r3, r2
 8006778:	d802      	bhi.n	8006780 <SD_PowerON+0xe8>
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d0cc      	beq.n	800671a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006786:	4293      	cmp	r3, r2
 8006788:	d902      	bls.n	8006790 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800678a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800678e:	e00b      	b.n	80067a8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d002      	beq.n	80067a6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3718      	adds	r7, #24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	c1100000 	.word	0xc1100000

080067b4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b08c      	sub	sp, #48	; 0x30
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80067be:	f7fa fe81 	bl	80014c4 <HAL_GetTick>
 80067c2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2100      	movs	r1, #0
 80067ce:	4618      	mov	r0, r3
 80067d0:	f001 fcad 	bl	800812e <SDMMC_GetResponse>
 80067d4:	4603      	mov	r3, r0
 80067d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067de:	d102      	bne.n	80067e6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80067e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80067e4:	e0b0      	b.n	8006948 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2140      	movs	r1, #64	; 0x40
 80067ec:	4618      	mov	r0, r3
 80067ee:	f001 fcdd 	bl	80081ac <SDMMC_CmdBlockLength>
 80067f2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80067f4:	6a3b      	ldr	r3, [r7, #32]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d005      	beq.n	8006806 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006802:	6a3b      	ldr	r3, [r7, #32]
 8006804:	e0a0      	b.n	8006948 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800680e:	041b      	lsls	r3, r3, #16
 8006810:	4619      	mov	r1, r3
 8006812:	4610      	mov	r0, r2
 8006814:	f001 fdd1 	bl	80083ba <SDMMC_CmdAppCommand>
 8006818:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800681a:	6a3b      	ldr	r3, [r7, #32]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d005      	beq.n	800682c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006828:	6a3b      	ldr	r3, [r7, #32]
 800682a:	e08d      	b.n	8006948 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800682c:	f04f 33ff 	mov.w	r3, #4294967295
 8006830:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8006832:	2340      	movs	r3, #64	; 0x40
 8006834:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006836:	2360      	movs	r3, #96	; 0x60
 8006838:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800683a:	2302      	movs	r3, #2
 800683c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800683e:	2300      	movs	r3, #0
 8006840:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006842:	2301      	movs	r3, #1
 8006844:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f107 0208 	add.w	r2, r7, #8
 800684e:	4611      	mov	r1, r2
 8006850:	4618      	mov	r0, r3
 8006852:	f001 fc7f 	bl	8008154 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4618      	mov	r0, r3
 800685c:	f001 feb9 	bl	80085d2 <SDMMC_CmdStatusRegister>
 8006860:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006862:	6a3b      	ldr	r3, [r7, #32]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d02b      	beq.n	80068c0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	e069      	b.n	8006948 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800687a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d013      	beq.n	80068aa <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8006882:	2300      	movs	r3, #0
 8006884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006886:	e00d      	b.n	80068a4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4618      	mov	r0, r3
 800688e:	f001 fbeb 	bl	8008068 <SDMMC_ReadFIFO>
 8006892:	4602      	mov	r2, r0
 8006894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006896:	601a      	str	r2, [r3, #0]
        pData++;
 8006898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689a:	3304      	adds	r3, #4
 800689c:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800689e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a0:	3301      	adds	r3, #1
 80068a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a6:	2b07      	cmp	r3, #7
 80068a8:	d9ee      	bls.n	8006888 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80068aa:	f7fa fe0b 	bl	80014c4 <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b8:	d102      	bne.n	80068c0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80068ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80068be:	e043      	b.n	8006948 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d0d2      	beq.n	8006874 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d4:	f003 0308 	and.w	r3, r3, #8
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d001      	beq.n	80068e0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80068dc:	2308      	movs	r3, #8
 80068de:	e033      	b.n	8006948 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d001      	beq.n	80068f2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80068ee:	2302      	movs	r3, #2
 80068f0:	e02a      	b.n	8006948 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f8:	f003 0320 	and.w	r3, r3, #32
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d017      	beq.n	8006930 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8006900:	2320      	movs	r3, #32
 8006902:	e021      	b.n	8006948 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4618      	mov	r0, r3
 800690a:	f001 fbad 	bl	8008068 <SDMMC_ReadFIFO>
 800690e:	4602      	mov	r2, r0
 8006910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006912:	601a      	str	r2, [r3, #0]
    pData++;
 8006914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006916:	3304      	adds	r3, #4
 8006918:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800691a:	f7fa fdd3 	bl	80014c4 <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006928:	d102      	bne.n	8006930 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800692a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800692e:	e00b      	b.n	8006948 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006936:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1e2      	bne.n	8006904 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a03      	ldr	r2, [pc, #12]	; (8006950 <SD_SendSDStatus+0x19c>)
 8006944:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3730      	adds	r7, #48	; 0x30
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	18000f3a 	.word	0x18000f3a

08006954 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d102      	bne.n	800696a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006964:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006968:	e018      	b.n	800699c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006972:	041b      	lsls	r3, r3, #16
 8006974:	4619      	mov	r1, r3
 8006976:	4610      	mov	r0, r2
 8006978:	f001 fe08 	bl	800858c <SDMMC_CmdSendStatus>
 800697c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d001      	beq.n	8006988 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	e009      	b.n	800699c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2100      	movs	r1, #0
 800698e:	4618      	mov	r0, r3
 8006990:	f001 fbcd 	bl	800812e <SDMMC_GetResponse>
 8006994:	4602      	mov	r2, r0
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b086      	sub	sp, #24
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80069ac:	2300      	movs	r3, #0
 80069ae:	60fb      	str	r3, [r7, #12]
 80069b0:	2300      	movs	r3, #0
 80069b2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2100      	movs	r1, #0
 80069ba:	4618      	mov	r0, r3
 80069bc:	f001 fbb7 	bl	800812e <SDMMC_GetResponse>
 80069c0:	4603      	mov	r3, r0
 80069c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069ca:	d102      	bne.n	80069d2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80069cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069d0:	e02f      	b.n	8006a32 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80069d2:	f107 030c 	add.w	r3, r7, #12
 80069d6:	4619      	mov	r1, r3
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 f879 	bl	8006ad0 <SD_FindSCR>
 80069de:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d001      	beq.n	80069ea <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	e023      	b.n	8006a32 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d01c      	beq.n	8006a2e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069fc:	041b      	lsls	r3, r3, #16
 80069fe:	4619      	mov	r1, r3
 8006a00:	4610      	mov	r0, r2
 8006a02:	f001 fcda 	bl	80083ba <SDMMC_CmdAppCommand>
 8006a06:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	e00f      	b.n	8006a32 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2102      	movs	r1, #2
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f001 fd11 	bl	8008440 <SDMMC_CmdBusWidth>
 8006a1e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d001      	beq.n	8006a2a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	e003      	b.n	8006a32 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	e001      	b.n	8006a32 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006a2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3718      	adds	r7, #24
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b086      	sub	sp, #24
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006a42:	2300      	movs	r3, #0
 8006a44:	60fb      	str	r3, [r7, #12]
 8006a46:	2300      	movs	r3, #0
 8006a48:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2100      	movs	r1, #0
 8006a50:	4618      	mov	r0, r3
 8006a52:	f001 fb6c 	bl	800812e <SDMMC_GetResponse>
 8006a56:	4603      	mov	r3, r0
 8006a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a60:	d102      	bne.n	8006a68 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006a62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a66:	e02f      	b.n	8006ac8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006a68:	f107 030c 	add.w	r3, r7, #12
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 f82e 	bl	8006ad0 <SD_FindSCR>
 8006a74:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d001      	beq.n	8006a80 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	e023      	b.n	8006ac8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d01c      	beq.n	8006ac4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a92:	041b      	lsls	r3, r3, #16
 8006a94:	4619      	mov	r1, r3
 8006a96:	4610      	mov	r0, r2
 8006a98:	f001 fc8f 	bl	80083ba <SDMMC_CmdAppCommand>
 8006a9c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d001      	beq.n	8006aa8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	e00f      	b.n	8006ac8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2100      	movs	r1, #0
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f001 fcc6 	bl	8008440 <SDMMC_CmdBusWidth>
 8006ab4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d001      	beq.n	8006ac0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	e003      	b.n	8006ac8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	e001      	b.n	8006ac8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006ac4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3718      	adds	r7, #24
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b08e      	sub	sp, #56	; 0x38
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006ada:	f7fa fcf3 	bl	80014c4 <HAL_GetTick>
 8006ade:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	60bb      	str	r3, [r7, #8]
 8006ae8:	2300      	movs	r3, #0
 8006aea:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2108      	movs	r1, #8
 8006af6:	4618      	mov	r0, r3
 8006af8:	f001 fb58 	bl	80081ac <SDMMC_CmdBlockLength>
 8006afc:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d001      	beq.n	8006b08 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b06:	e0ad      	b.n	8006c64 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b10:	041b      	lsls	r3, r3, #16
 8006b12:	4619      	mov	r1, r3
 8006b14:	4610      	mov	r0, r2
 8006b16:	f001 fc50 	bl	80083ba <SDMMC_CmdAppCommand>
 8006b1a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d001      	beq.n	8006b26 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b24:	e09e      	b.n	8006c64 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006b26:	f04f 33ff 	mov.w	r3, #4294967295
 8006b2a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006b2c:	2308      	movs	r3, #8
 8006b2e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006b30:	2330      	movs	r3, #48	; 0x30
 8006b32:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006b34:	2302      	movs	r3, #2
 8006b36:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f107 0210 	add.w	r2, r7, #16
 8006b48:	4611      	mov	r1, r2
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f001 fb02 	bl	8008154 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4618      	mov	r0, r3
 8006b56:	f001 fc96 	bl	8008486 <SDMMC_CmdSendSCR>
 8006b5a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d027      	beq.n	8006bb2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8006b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b64:	e07e      	b.n	8006c64 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d113      	bne.n	8006b9c <SD_FindSCR+0xcc>
 8006b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d110      	bne.n	8006b9c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f001 fa72 	bl	8008068 <SDMMC_ReadFIFO>
 8006b84:	4603      	mov	r3, r0
 8006b86:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f001 fa6b 	bl	8008068 <SDMMC_ReadFIFO>
 8006b92:	4603      	mov	r3, r0
 8006b94:	60fb      	str	r3, [r7, #12]
      index++;
 8006b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b98:	3301      	adds	r3, #1
 8006b9a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006b9c:	f7fa fc92 	bl	80014c4 <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006baa:	d102      	bne.n	8006bb2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006bac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006bb0:	e058      	b.n	8006c64 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bb8:	f240 532a 	movw	r3, #1322	; 0x52a
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d0d1      	beq.n	8006b66 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc8:	f003 0308 	and.w	r3, r3, #8
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d005      	beq.n	8006bdc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2208      	movs	r2, #8
 8006bd6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006bd8:	2308      	movs	r3, #8
 8006bda:	e043      	b.n	8006c64 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d005      	beq.n	8006bf6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2202      	movs	r2, #2
 8006bf0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006bf2:	2302      	movs	r3, #2
 8006bf4:	e036      	b.n	8006c64 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bfc:	f003 0320 	and.w	r3, r3, #32
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d005      	beq.n	8006c10 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2220      	movs	r2, #32
 8006c0a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006c0c:	2320      	movs	r3, #32
 8006c0e:	e029      	b.n	8006c64 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a15      	ldr	r2, [pc, #84]	; (8006c6c <SD_FindSCR+0x19c>)
 8006c16:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	061a      	lsls	r2, r3, #24
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	021b      	lsls	r3, r3, #8
 8006c20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c24:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	0a1b      	lsrs	r3, r3, #8
 8006c2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006c2e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	0e1b      	lsrs	r3, r3, #24
 8006c34:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8006c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c38:	601a      	str	r2, [r3, #0]
    scr++;
 8006c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3c:	3304      	adds	r3, #4
 8006c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	061a      	lsls	r2, r3, #24
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	021b      	lsls	r3, r3, #8
 8006c48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c4c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	0a1b      	lsrs	r3, r3, #8
 8006c52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006c56:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	0e1b      	lsrs	r3, r3, #24
 8006c5c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8006c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c60:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3738      	adds	r7, #56	; 0x38
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	18000f3a 	.word	0x18000f3a

08006c70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d101      	bne.n	8006c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e042      	b.n	8006d08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d106      	bne.n	8006c9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f7fa f92f 	bl	8000ef8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2224      	movs	r2, #36	; 0x24
 8006c9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 0201 	bic.w	r2, r2, #1
 8006cb0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f996 	bl	8006fe4 <UART_SetConfig>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d101      	bne.n	8006cc2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e022      	b.n	8006d08 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d002      	beq.n	8006cd0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 feea 	bl	8007aa4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689a      	ldr	r2, [r3, #8]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f042 0201 	orr.w	r2, r2, #1
 8006cfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 ff71 	bl	8007be8 <UART_CheckIdleState>
 8006d06:	4603      	mov	r3, r0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3708      	adds	r7, #8
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b08a      	sub	sp, #40	; 0x28
 8006d14:	af02      	add	r7, sp, #8
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	603b      	str	r3, [r7, #0]
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d26:	2b20      	cmp	r3, #32
 8006d28:	f040 8083 	bne.w	8006e32 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d002      	beq.n	8006d38 <HAL_UART_Transmit+0x28>
 8006d32:	88fb      	ldrh	r3, [r7, #6]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d101      	bne.n	8006d3c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e07b      	b.n	8006e34 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d101      	bne.n	8006d4a <HAL_UART_Transmit+0x3a>
 8006d46:	2302      	movs	r3, #2
 8006d48:	e074      	b.n	8006e34 <HAL_UART_Transmit+0x124>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2221      	movs	r2, #33	; 0x21
 8006d5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d62:	f7fa fbaf 	bl	80014c4 <HAL_GetTick>
 8006d66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	88fa      	ldrh	r2, [r7, #6]
 8006d6c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	88fa      	ldrh	r2, [r7, #6]
 8006d74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d80:	d108      	bne.n	8006d94 <HAL_UART_Transmit+0x84>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d104      	bne.n	8006d94 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	61bb      	str	r3, [r7, #24]
 8006d92:	e003      	b.n	8006d9c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006da4:	e02c      	b.n	8006e00 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	2200      	movs	r2, #0
 8006dae:	2180      	movs	r1, #128	; 0x80
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f000 ff64 	bl	8007c7e <UART_WaitOnFlagUntilTimeout>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e039      	b.n	8006e34 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10b      	bne.n	8006dde <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	881b      	ldrh	r3, [r3, #0]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dd4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	3302      	adds	r3, #2
 8006dda:	61bb      	str	r3, [r7, #24]
 8006ddc:	e007      	b.n	8006dee <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	781a      	ldrb	r2, [r3, #0]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	3301      	adds	r3, #1
 8006dec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	3b01      	subs	r3, #1
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1cc      	bne.n	8006da6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	2200      	movs	r2, #0
 8006e14:	2140      	movs	r1, #64	; 0x40
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f000 ff31 	bl	8007c7e <UART_WaitOnFlagUntilTimeout>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e006      	b.n	8006e34 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2220      	movs	r2, #32
 8006e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	e000      	b.n	8006e34 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006e32:	2302      	movs	r3, #2
  }
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3720      	adds	r7, #32
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b08a      	sub	sp, #40	; 0x28
 8006e40:	af02      	add	r7, sp, #8
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	603b      	str	r3, [r7, #0]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e52:	2b20      	cmp	r3, #32
 8006e54:	f040 80c0 	bne.w	8006fd8 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d002      	beq.n	8006e64 <HAL_UART_Receive+0x28>
 8006e5e:	88fb      	ldrh	r3, [r7, #6]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d101      	bne.n	8006e68 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e0b8      	b.n	8006fda <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d101      	bne.n	8006e76 <HAL_UART_Receive+0x3a>
 8006e72:	2302      	movs	r3, #2
 8006e74:	e0b1      	b.n	8006fda <HAL_UART_Receive+0x19e>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2222      	movs	r2, #34	; 0x22
 8006e8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e94:	f7fa fb16 	bl	80014c4 <HAL_GetTick>
 8006e98:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	88fa      	ldrh	r2, [r7, #6]
 8006e9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	88fa      	ldrh	r2, [r7, #6]
 8006ea6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eb2:	d10e      	bne.n	8006ed2 <HAL_UART_Receive+0x96>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d105      	bne.n	8006ec8 <HAL_UART_Receive+0x8c>
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006ec2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ec6:	e02d      	b.n	8006f24 <HAL_UART_Receive+0xe8>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	22ff      	movs	r2, #255	; 0xff
 8006ecc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ed0:	e028      	b.n	8006f24 <HAL_UART_Receive+0xe8>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10d      	bne.n	8006ef6 <HAL_UART_Receive+0xba>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d104      	bne.n	8006eec <HAL_UART_Receive+0xb0>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	22ff      	movs	r2, #255	; 0xff
 8006ee6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006eea:	e01b      	b.n	8006f24 <HAL_UART_Receive+0xe8>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	227f      	movs	r2, #127	; 0x7f
 8006ef0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ef4:	e016      	b.n	8006f24 <HAL_UART_Receive+0xe8>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006efe:	d10d      	bne.n	8006f1c <HAL_UART_Receive+0xe0>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d104      	bne.n	8006f12 <HAL_UART_Receive+0xd6>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	227f      	movs	r2, #127	; 0x7f
 8006f0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006f10:	e008      	b.n	8006f24 <HAL_UART_Receive+0xe8>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	223f      	movs	r2, #63	; 0x3f
 8006f16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006f1a:	e003      	b.n	8006f24 <HAL_UART_Receive+0xe8>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006f2a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f34:	d108      	bne.n	8006f48 <HAL_UART_Receive+0x10c>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d104      	bne.n	8006f48 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	61bb      	str	r3, [r7, #24]
 8006f46:	e003      	b.n	8006f50 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006f58:	e032      	b.n	8006fc0 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	2200      	movs	r2, #0
 8006f62:	2120      	movs	r1, #32
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f000 fe8a 	bl	8007c7e <UART_WaitOnFlagUntilTimeout>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e032      	b.n	8006fda <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10c      	bne.n	8006f94 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	8a7b      	ldrh	r3, [r7, #18]
 8006f84:	4013      	ands	r3, r2
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	3302      	adds	r3, #2
 8006f90:	61bb      	str	r3, [r7, #24]
 8006f92:	e00c      	b.n	8006fae <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9a:	b2da      	uxtb	r2, r3
 8006f9c:	8a7b      	ldrh	r3, [r7, #18]
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	3301      	adds	r3, #1
 8006fac:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1c6      	bne.n	8006f5a <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	e000      	b.n	8006fda <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8006fd8:	2302      	movs	r3, #2
  }
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3720      	adds	r7, #32
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
	...

08006fe4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fe4:	b5b0      	push	{r4, r5, r7, lr}
 8006fe6:	b08e      	sub	sp, #56	; 0x38
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fec:	2300      	movs	r3, #0
 8006fee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	689a      	ldr	r2, [r3, #8]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	431a      	orrs	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	695b      	ldr	r3, [r3, #20]
 8007000:	431a      	orrs	r2, r3
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	69db      	ldr	r3, [r3, #28]
 8007006:	4313      	orrs	r3, r2
 8007008:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	4bbf      	ldr	r3, [pc, #764]	; (8007310 <UART_SetConfig+0x32c>)
 8007012:	4013      	ands	r3, r2
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	6812      	ldr	r2, [r2, #0]
 8007018:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800701a:	430b      	orrs	r3, r1
 800701c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	68da      	ldr	r2, [r3, #12]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	430a      	orrs	r2, r1
 8007032:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4ab5      	ldr	r2, [pc, #724]	; (8007314 <UART_SetConfig+0x330>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d004      	beq.n	800704e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a1b      	ldr	r3, [r3, #32]
 8007048:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800704a:	4313      	orrs	r3, r2
 800704c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	689a      	ldr	r2, [r3, #8]
 8007054:	4bb0      	ldr	r3, [pc, #704]	; (8007318 <UART_SetConfig+0x334>)
 8007056:	4013      	ands	r3, r2
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	6812      	ldr	r2, [r2, #0]
 800705c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800705e:	430b      	orrs	r3, r1
 8007060:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007068:	f023 010f 	bic.w	r1, r3, #15
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	430a      	orrs	r2, r1
 8007076:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4aa7      	ldr	r2, [pc, #668]	; (800731c <UART_SetConfig+0x338>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d176      	bne.n	8007170 <UART_SetConfig+0x18c>
 8007082:	4ba7      	ldr	r3, [pc, #668]	; (8007320 <UART_SetConfig+0x33c>)
 8007084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007086:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800708a:	2b28      	cmp	r3, #40	; 0x28
 800708c:	d86c      	bhi.n	8007168 <UART_SetConfig+0x184>
 800708e:	a201      	add	r2, pc, #4	; (adr r2, 8007094 <UART_SetConfig+0xb0>)
 8007090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007094:	08007139 	.word	0x08007139
 8007098:	08007169 	.word	0x08007169
 800709c:	08007169 	.word	0x08007169
 80070a0:	08007169 	.word	0x08007169
 80070a4:	08007169 	.word	0x08007169
 80070a8:	08007169 	.word	0x08007169
 80070ac:	08007169 	.word	0x08007169
 80070b0:	08007169 	.word	0x08007169
 80070b4:	08007141 	.word	0x08007141
 80070b8:	08007169 	.word	0x08007169
 80070bc:	08007169 	.word	0x08007169
 80070c0:	08007169 	.word	0x08007169
 80070c4:	08007169 	.word	0x08007169
 80070c8:	08007169 	.word	0x08007169
 80070cc:	08007169 	.word	0x08007169
 80070d0:	08007169 	.word	0x08007169
 80070d4:	08007149 	.word	0x08007149
 80070d8:	08007169 	.word	0x08007169
 80070dc:	08007169 	.word	0x08007169
 80070e0:	08007169 	.word	0x08007169
 80070e4:	08007169 	.word	0x08007169
 80070e8:	08007169 	.word	0x08007169
 80070ec:	08007169 	.word	0x08007169
 80070f0:	08007169 	.word	0x08007169
 80070f4:	08007151 	.word	0x08007151
 80070f8:	08007169 	.word	0x08007169
 80070fc:	08007169 	.word	0x08007169
 8007100:	08007169 	.word	0x08007169
 8007104:	08007169 	.word	0x08007169
 8007108:	08007169 	.word	0x08007169
 800710c:	08007169 	.word	0x08007169
 8007110:	08007169 	.word	0x08007169
 8007114:	08007159 	.word	0x08007159
 8007118:	08007169 	.word	0x08007169
 800711c:	08007169 	.word	0x08007169
 8007120:	08007169 	.word	0x08007169
 8007124:	08007169 	.word	0x08007169
 8007128:	08007169 	.word	0x08007169
 800712c:	08007169 	.word	0x08007169
 8007130:	08007169 	.word	0x08007169
 8007134:	08007161 	.word	0x08007161
 8007138:	2301      	movs	r3, #1
 800713a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800713e:	e222      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007140:	2304      	movs	r3, #4
 8007142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007146:	e21e      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007148:	2308      	movs	r3, #8
 800714a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800714e:	e21a      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007150:	2310      	movs	r3, #16
 8007152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007156:	e216      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007158:	2320      	movs	r3, #32
 800715a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800715e:	e212      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007160:	2340      	movs	r3, #64	; 0x40
 8007162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007166:	e20e      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007168:	2380      	movs	r3, #128	; 0x80
 800716a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800716e:	e20a      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a6b      	ldr	r2, [pc, #428]	; (8007324 <UART_SetConfig+0x340>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d130      	bne.n	80071dc <UART_SetConfig+0x1f8>
 800717a:	4b69      	ldr	r3, [pc, #420]	; (8007320 <UART_SetConfig+0x33c>)
 800717c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800717e:	f003 0307 	and.w	r3, r3, #7
 8007182:	2b05      	cmp	r3, #5
 8007184:	d826      	bhi.n	80071d4 <UART_SetConfig+0x1f0>
 8007186:	a201      	add	r2, pc, #4	; (adr r2, 800718c <UART_SetConfig+0x1a8>)
 8007188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800718c:	080071a5 	.word	0x080071a5
 8007190:	080071ad 	.word	0x080071ad
 8007194:	080071b5 	.word	0x080071b5
 8007198:	080071bd 	.word	0x080071bd
 800719c:	080071c5 	.word	0x080071c5
 80071a0:	080071cd 	.word	0x080071cd
 80071a4:	2300      	movs	r3, #0
 80071a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071aa:	e1ec      	b.n	8007586 <UART_SetConfig+0x5a2>
 80071ac:	2304      	movs	r3, #4
 80071ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071b2:	e1e8      	b.n	8007586 <UART_SetConfig+0x5a2>
 80071b4:	2308      	movs	r3, #8
 80071b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ba:	e1e4      	b.n	8007586 <UART_SetConfig+0x5a2>
 80071bc:	2310      	movs	r3, #16
 80071be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071c2:	e1e0      	b.n	8007586 <UART_SetConfig+0x5a2>
 80071c4:	2320      	movs	r3, #32
 80071c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071ca:	e1dc      	b.n	8007586 <UART_SetConfig+0x5a2>
 80071cc:	2340      	movs	r3, #64	; 0x40
 80071ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071d2:	e1d8      	b.n	8007586 <UART_SetConfig+0x5a2>
 80071d4:	2380      	movs	r3, #128	; 0x80
 80071d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071da:	e1d4      	b.n	8007586 <UART_SetConfig+0x5a2>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a51      	ldr	r2, [pc, #324]	; (8007328 <UART_SetConfig+0x344>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d130      	bne.n	8007248 <UART_SetConfig+0x264>
 80071e6:	4b4e      	ldr	r3, [pc, #312]	; (8007320 <UART_SetConfig+0x33c>)
 80071e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ea:	f003 0307 	and.w	r3, r3, #7
 80071ee:	2b05      	cmp	r3, #5
 80071f0:	d826      	bhi.n	8007240 <UART_SetConfig+0x25c>
 80071f2:	a201      	add	r2, pc, #4	; (adr r2, 80071f8 <UART_SetConfig+0x214>)
 80071f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f8:	08007211 	.word	0x08007211
 80071fc:	08007219 	.word	0x08007219
 8007200:	08007221 	.word	0x08007221
 8007204:	08007229 	.word	0x08007229
 8007208:	08007231 	.word	0x08007231
 800720c:	08007239 	.word	0x08007239
 8007210:	2300      	movs	r3, #0
 8007212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007216:	e1b6      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007218:	2304      	movs	r3, #4
 800721a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800721e:	e1b2      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007220:	2308      	movs	r3, #8
 8007222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007226:	e1ae      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007228:	2310      	movs	r3, #16
 800722a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800722e:	e1aa      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007230:	2320      	movs	r3, #32
 8007232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007236:	e1a6      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007238:	2340      	movs	r3, #64	; 0x40
 800723a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800723e:	e1a2      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007240:	2380      	movs	r3, #128	; 0x80
 8007242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007246:	e19e      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a37      	ldr	r2, [pc, #220]	; (800732c <UART_SetConfig+0x348>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d130      	bne.n	80072b4 <UART_SetConfig+0x2d0>
 8007252:	4b33      	ldr	r3, [pc, #204]	; (8007320 <UART_SetConfig+0x33c>)
 8007254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007256:	f003 0307 	and.w	r3, r3, #7
 800725a:	2b05      	cmp	r3, #5
 800725c:	d826      	bhi.n	80072ac <UART_SetConfig+0x2c8>
 800725e:	a201      	add	r2, pc, #4	; (adr r2, 8007264 <UART_SetConfig+0x280>)
 8007260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007264:	0800727d 	.word	0x0800727d
 8007268:	08007285 	.word	0x08007285
 800726c:	0800728d 	.word	0x0800728d
 8007270:	08007295 	.word	0x08007295
 8007274:	0800729d 	.word	0x0800729d
 8007278:	080072a5 	.word	0x080072a5
 800727c:	2300      	movs	r3, #0
 800727e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007282:	e180      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007284:	2304      	movs	r3, #4
 8007286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800728a:	e17c      	b.n	8007586 <UART_SetConfig+0x5a2>
 800728c:	2308      	movs	r3, #8
 800728e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007292:	e178      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007294:	2310      	movs	r3, #16
 8007296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800729a:	e174      	b.n	8007586 <UART_SetConfig+0x5a2>
 800729c:	2320      	movs	r3, #32
 800729e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072a2:	e170      	b.n	8007586 <UART_SetConfig+0x5a2>
 80072a4:	2340      	movs	r3, #64	; 0x40
 80072a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072aa:	e16c      	b.n	8007586 <UART_SetConfig+0x5a2>
 80072ac:	2380      	movs	r3, #128	; 0x80
 80072ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072b2:	e168      	b.n	8007586 <UART_SetConfig+0x5a2>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a1d      	ldr	r2, [pc, #116]	; (8007330 <UART_SetConfig+0x34c>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d142      	bne.n	8007344 <UART_SetConfig+0x360>
 80072be:	4b18      	ldr	r3, [pc, #96]	; (8007320 <UART_SetConfig+0x33c>)
 80072c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c2:	f003 0307 	and.w	r3, r3, #7
 80072c6:	2b05      	cmp	r3, #5
 80072c8:	d838      	bhi.n	800733c <UART_SetConfig+0x358>
 80072ca:	a201      	add	r2, pc, #4	; (adr r2, 80072d0 <UART_SetConfig+0x2ec>)
 80072cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d0:	080072e9 	.word	0x080072e9
 80072d4:	080072f1 	.word	0x080072f1
 80072d8:	080072f9 	.word	0x080072f9
 80072dc:	08007301 	.word	0x08007301
 80072e0:	08007309 	.word	0x08007309
 80072e4:	08007335 	.word	0x08007335
 80072e8:	2300      	movs	r3, #0
 80072ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072ee:	e14a      	b.n	8007586 <UART_SetConfig+0x5a2>
 80072f0:	2304      	movs	r3, #4
 80072f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072f6:	e146      	b.n	8007586 <UART_SetConfig+0x5a2>
 80072f8:	2308      	movs	r3, #8
 80072fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072fe:	e142      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007300:	2310      	movs	r3, #16
 8007302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007306:	e13e      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007308:	2320      	movs	r3, #32
 800730a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800730e:	e13a      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007310:	cfff69f3 	.word	0xcfff69f3
 8007314:	58000c00 	.word	0x58000c00
 8007318:	11fff4ff 	.word	0x11fff4ff
 800731c:	40011000 	.word	0x40011000
 8007320:	58024400 	.word	0x58024400
 8007324:	40004400 	.word	0x40004400
 8007328:	40004800 	.word	0x40004800
 800732c:	40004c00 	.word	0x40004c00
 8007330:	40005000 	.word	0x40005000
 8007334:	2340      	movs	r3, #64	; 0x40
 8007336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800733a:	e124      	b.n	8007586 <UART_SetConfig+0x5a2>
 800733c:	2380      	movs	r3, #128	; 0x80
 800733e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007342:	e120      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4acc      	ldr	r2, [pc, #816]	; (800767c <UART_SetConfig+0x698>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d176      	bne.n	800743c <UART_SetConfig+0x458>
 800734e:	4bcc      	ldr	r3, [pc, #816]	; (8007680 <UART_SetConfig+0x69c>)
 8007350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007352:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007356:	2b28      	cmp	r3, #40	; 0x28
 8007358:	d86c      	bhi.n	8007434 <UART_SetConfig+0x450>
 800735a:	a201      	add	r2, pc, #4	; (adr r2, 8007360 <UART_SetConfig+0x37c>)
 800735c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007360:	08007405 	.word	0x08007405
 8007364:	08007435 	.word	0x08007435
 8007368:	08007435 	.word	0x08007435
 800736c:	08007435 	.word	0x08007435
 8007370:	08007435 	.word	0x08007435
 8007374:	08007435 	.word	0x08007435
 8007378:	08007435 	.word	0x08007435
 800737c:	08007435 	.word	0x08007435
 8007380:	0800740d 	.word	0x0800740d
 8007384:	08007435 	.word	0x08007435
 8007388:	08007435 	.word	0x08007435
 800738c:	08007435 	.word	0x08007435
 8007390:	08007435 	.word	0x08007435
 8007394:	08007435 	.word	0x08007435
 8007398:	08007435 	.word	0x08007435
 800739c:	08007435 	.word	0x08007435
 80073a0:	08007415 	.word	0x08007415
 80073a4:	08007435 	.word	0x08007435
 80073a8:	08007435 	.word	0x08007435
 80073ac:	08007435 	.word	0x08007435
 80073b0:	08007435 	.word	0x08007435
 80073b4:	08007435 	.word	0x08007435
 80073b8:	08007435 	.word	0x08007435
 80073bc:	08007435 	.word	0x08007435
 80073c0:	0800741d 	.word	0x0800741d
 80073c4:	08007435 	.word	0x08007435
 80073c8:	08007435 	.word	0x08007435
 80073cc:	08007435 	.word	0x08007435
 80073d0:	08007435 	.word	0x08007435
 80073d4:	08007435 	.word	0x08007435
 80073d8:	08007435 	.word	0x08007435
 80073dc:	08007435 	.word	0x08007435
 80073e0:	08007425 	.word	0x08007425
 80073e4:	08007435 	.word	0x08007435
 80073e8:	08007435 	.word	0x08007435
 80073ec:	08007435 	.word	0x08007435
 80073f0:	08007435 	.word	0x08007435
 80073f4:	08007435 	.word	0x08007435
 80073f8:	08007435 	.word	0x08007435
 80073fc:	08007435 	.word	0x08007435
 8007400:	0800742d 	.word	0x0800742d
 8007404:	2301      	movs	r3, #1
 8007406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800740a:	e0bc      	b.n	8007586 <UART_SetConfig+0x5a2>
 800740c:	2304      	movs	r3, #4
 800740e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007412:	e0b8      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007414:	2308      	movs	r3, #8
 8007416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800741a:	e0b4      	b.n	8007586 <UART_SetConfig+0x5a2>
 800741c:	2310      	movs	r3, #16
 800741e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007422:	e0b0      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007424:	2320      	movs	r3, #32
 8007426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800742a:	e0ac      	b.n	8007586 <UART_SetConfig+0x5a2>
 800742c:	2340      	movs	r3, #64	; 0x40
 800742e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007432:	e0a8      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007434:	2380      	movs	r3, #128	; 0x80
 8007436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800743a:	e0a4      	b.n	8007586 <UART_SetConfig+0x5a2>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a90      	ldr	r2, [pc, #576]	; (8007684 <UART_SetConfig+0x6a0>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d130      	bne.n	80074a8 <UART_SetConfig+0x4c4>
 8007446:	4b8e      	ldr	r3, [pc, #568]	; (8007680 <UART_SetConfig+0x69c>)
 8007448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800744a:	f003 0307 	and.w	r3, r3, #7
 800744e:	2b05      	cmp	r3, #5
 8007450:	d826      	bhi.n	80074a0 <UART_SetConfig+0x4bc>
 8007452:	a201      	add	r2, pc, #4	; (adr r2, 8007458 <UART_SetConfig+0x474>)
 8007454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007458:	08007471 	.word	0x08007471
 800745c:	08007479 	.word	0x08007479
 8007460:	08007481 	.word	0x08007481
 8007464:	08007489 	.word	0x08007489
 8007468:	08007491 	.word	0x08007491
 800746c:	08007499 	.word	0x08007499
 8007470:	2300      	movs	r3, #0
 8007472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007476:	e086      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007478:	2304      	movs	r3, #4
 800747a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800747e:	e082      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007480:	2308      	movs	r3, #8
 8007482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007486:	e07e      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007488:	2310      	movs	r3, #16
 800748a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800748e:	e07a      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007490:	2320      	movs	r3, #32
 8007492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007496:	e076      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007498:	2340      	movs	r3, #64	; 0x40
 800749a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800749e:	e072      	b.n	8007586 <UART_SetConfig+0x5a2>
 80074a0:	2380      	movs	r3, #128	; 0x80
 80074a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074a6:	e06e      	b.n	8007586 <UART_SetConfig+0x5a2>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a76      	ldr	r2, [pc, #472]	; (8007688 <UART_SetConfig+0x6a4>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d130      	bne.n	8007514 <UART_SetConfig+0x530>
 80074b2:	4b73      	ldr	r3, [pc, #460]	; (8007680 <UART_SetConfig+0x69c>)
 80074b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074b6:	f003 0307 	and.w	r3, r3, #7
 80074ba:	2b05      	cmp	r3, #5
 80074bc:	d826      	bhi.n	800750c <UART_SetConfig+0x528>
 80074be:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <UART_SetConfig+0x4e0>)
 80074c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c4:	080074dd 	.word	0x080074dd
 80074c8:	080074e5 	.word	0x080074e5
 80074cc:	080074ed 	.word	0x080074ed
 80074d0:	080074f5 	.word	0x080074f5
 80074d4:	080074fd 	.word	0x080074fd
 80074d8:	08007505 	.word	0x08007505
 80074dc:	2300      	movs	r3, #0
 80074de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074e2:	e050      	b.n	8007586 <UART_SetConfig+0x5a2>
 80074e4:	2304      	movs	r3, #4
 80074e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ea:	e04c      	b.n	8007586 <UART_SetConfig+0x5a2>
 80074ec:	2308      	movs	r3, #8
 80074ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074f2:	e048      	b.n	8007586 <UART_SetConfig+0x5a2>
 80074f4:	2310      	movs	r3, #16
 80074f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074fa:	e044      	b.n	8007586 <UART_SetConfig+0x5a2>
 80074fc:	2320      	movs	r3, #32
 80074fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007502:	e040      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007504:	2340      	movs	r3, #64	; 0x40
 8007506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800750a:	e03c      	b.n	8007586 <UART_SetConfig+0x5a2>
 800750c:	2380      	movs	r3, #128	; 0x80
 800750e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007512:	e038      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a5c      	ldr	r2, [pc, #368]	; (800768c <UART_SetConfig+0x6a8>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d130      	bne.n	8007580 <UART_SetConfig+0x59c>
 800751e:	4b58      	ldr	r3, [pc, #352]	; (8007680 <UART_SetConfig+0x69c>)
 8007520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007522:	f003 0307 	and.w	r3, r3, #7
 8007526:	2b05      	cmp	r3, #5
 8007528:	d826      	bhi.n	8007578 <UART_SetConfig+0x594>
 800752a:	a201      	add	r2, pc, #4	; (adr r2, 8007530 <UART_SetConfig+0x54c>)
 800752c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007530:	08007549 	.word	0x08007549
 8007534:	08007551 	.word	0x08007551
 8007538:	08007559 	.word	0x08007559
 800753c:	08007561 	.word	0x08007561
 8007540:	08007569 	.word	0x08007569
 8007544:	08007571 	.word	0x08007571
 8007548:	2302      	movs	r3, #2
 800754a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800754e:	e01a      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007550:	2304      	movs	r3, #4
 8007552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007556:	e016      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007558:	2308      	movs	r3, #8
 800755a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800755e:	e012      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007560:	2310      	movs	r3, #16
 8007562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007566:	e00e      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007568:	2320      	movs	r3, #32
 800756a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800756e:	e00a      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007570:	2340      	movs	r3, #64	; 0x40
 8007572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007576:	e006      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007578:	2380      	movs	r3, #128	; 0x80
 800757a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800757e:	e002      	b.n	8007586 <UART_SetConfig+0x5a2>
 8007580:	2380      	movs	r3, #128	; 0x80
 8007582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a40      	ldr	r2, [pc, #256]	; (800768c <UART_SetConfig+0x6a8>)
 800758c:	4293      	cmp	r3, r2
 800758e:	f040 80ef 	bne.w	8007770 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007592:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007596:	2b20      	cmp	r3, #32
 8007598:	dc46      	bgt.n	8007628 <UART_SetConfig+0x644>
 800759a:	2b02      	cmp	r3, #2
 800759c:	f2c0 8081 	blt.w	80076a2 <UART_SetConfig+0x6be>
 80075a0:	3b02      	subs	r3, #2
 80075a2:	2b1e      	cmp	r3, #30
 80075a4:	d87d      	bhi.n	80076a2 <UART_SetConfig+0x6be>
 80075a6:	a201      	add	r2, pc, #4	; (adr r2, 80075ac <UART_SetConfig+0x5c8>)
 80075a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ac:	0800762f 	.word	0x0800762f
 80075b0:	080076a3 	.word	0x080076a3
 80075b4:	08007637 	.word	0x08007637
 80075b8:	080076a3 	.word	0x080076a3
 80075bc:	080076a3 	.word	0x080076a3
 80075c0:	080076a3 	.word	0x080076a3
 80075c4:	08007647 	.word	0x08007647
 80075c8:	080076a3 	.word	0x080076a3
 80075cc:	080076a3 	.word	0x080076a3
 80075d0:	080076a3 	.word	0x080076a3
 80075d4:	080076a3 	.word	0x080076a3
 80075d8:	080076a3 	.word	0x080076a3
 80075dc:	080076a3 	.word	0x080076a3
 80075e0:	080076a3 	.word	0x080076a3
 80075e4:	08007657 	.word	0x08007657
 80075e8:	080076a3 	.word	0x080076a3
 80075ec:	080076a3 	.word	0x080076a3
 80075f0:	080076a3 	.word	0x080076a3
 80075f4:	080076a3 	.word	0x080076a3
 80075f8:	080076a3 	.word	0x080076a3
 80075fc:	080076a3 	.word	0x080076a3
 8007600:	080076a3 	.word	0x080076a3
 8007604:	080076a3 	.word	0x080076a3
 8007608:	080076a3 	.word	0x080076a3
 800760c:	080076a3 	.word	0x080076a3
 8007610:	080076a3 	.word	0x080076a3
 8007614:	080076a3 	.word	0x080076a3
 8007618:	080076a3 	.word	0x080076a3
 800761c:	080076a3 	.word	0x080076a3
 8007620:	080076a3 	.word	0x080076a3
 8007624:	08007695 	.word	0x08007695
 8007628:	2b40      	cmp	r3, #64	; 0x40
 800762a:	d036      	beq.n	800769a <UART_SetConfig+0x6b6>
 800762c:	e039      	b.n	80076a2 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800762e:	f7fd fbb9 	bl	8004da4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007632:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007634:	e03b      	b.n	80076ae <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007636:	f107 0314 	add.w	r3, r7, #20
 800763a:	4618      	mov	r0, r3
 800763c:	f7fd fbc8 	bl	8004dd0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007644:	e033      	b.n	80076ae <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007646:	f107 0308 	add.w	r3, r7, #8
 800764a:	4618      	mov	r0, r3
 800764c:	f7fd fd14 	bl	8005078 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007654:	e02b      	b.n	80076ae <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007656:	4b0a      	ldr	r3, [pc, #40]	; (8007680 <UART_SetConfig+0x69c>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0320 	and.w	r3, r3, #32
 800765e:	2b00      	cmp	r3, #0
 8007660:	d009      	beq.n	8007676 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007662:	4b07      	ldr	r3, [pc, #28]	; (8007680 <UART_SetConfig+0x69c>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	08db      	lsrs	r3, r3, #3
 8007668:	f003 0303 	and.w	r3, r3, #3
 800766c:	4a08      	ldr	r2, [pc, #32]	; (8007690 <UART_SetConfig+0x6ac>)
 800766e:	fa22 f303 	lsr.w	r3, r2, r3
 8007672:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007674:	e01b      	b.n	80076ae <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8007676:	4b06      	ldr	r3, [pc, #24]	; (8007690 <UART_SetConfig+0x6ac>)
 8007678:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800767a:	e018      	b.n	80076ae <UART_SetConfig+0x6ca>
 800767c:	40011400 	.word	0x40011400
 8007680:	58024400 	.word	0x58024400
 8007684:	40007800 	.word	0x40007800
 8007688:	40007c00 	.word	0x40007c00
 800768c:	58000c00 	.word	0x58000c00
 8007690:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007694:	4bc4      	ldr	r3, [pc, #784]	; (80079a8 <UART_SetConfig+0x9c4>)
 8007696:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007698:	e009      	b.n	80076ae <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800769a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800769e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80076a0:	e005      	b.n	80076ae <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80076a2:	2300      	movs	r3, #0
 80076a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80076ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f000 81da 	beq.w	8007a6a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ba:	4abc      	ldr	r2, [pc, #752]	; (80079ac <UART_SetConfig+0x9c8>)
 80076bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076c0:	461a      	mov	r2, r3
 80076c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80076c8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	4613      	mov	r3, r2
 80076d0:	005b      	lsls	r3, r3, #1
 80076d2:	4413      	add	r3, r2
 80076d4:	6a3a      	ldr	r2, [r7, #32]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d305      	bcc.n	80076e6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80076e0:	6a3a      	ldr	r2, [r7, #32]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d903      	bls.n	80076ee <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80076ec:	e1bd      	b.n	8007a6a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f0:	4618      	mov	r0, r3
 80076f2:	f04f 0100 	mov.w	r1, #0
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fa:	4aac      	ldr	r2, [pc, #688]	; (80079ac <UART_SetConfig+0x9c8>)
 80076fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007700:	b29a      	uxth	r2, r3
 8007702:	f04f 0300 	mov.w	r3, #0
 8007706:	f7f8 fe3b 	bl	8000380 <__aeabi_uldivmod>
 800770a:	4602      	mov	r2, r0
 800770c:	460b      	mov	r3, r1
 800770e:	4610      	mov	r0, r2
 8007710:	4619      	mov	r1, r3
 8007712:	f04f 0200 	mov.w	r2, #0
 8007716:	f04f 0300 	mov.w	r3, #0
 800771a:	020b      	lsls	r3, r1, #8
 800771c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007720:	0202      	lsls	r2, r0, #8
 8007722:	6879      	ldr	r1, [r7, #4]
 8007724:	6849      	ldr	r1, [r1, #4]
 8007726:	0849      	lsrs	r1, r1, #1
 8007728:	4608      	mov	r0, r1
 800772a:	f04f 0100 	mov.w	r1, #0
 800772e:	1814      	adds	r4, r2, r0
 8007730:	eb43 0501 	adc.w	r5, r3, r1
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	461a      	mov	r2, r3
 800773a:	f04f 0300 	mov.w	r3, #0
 800773e:	4620      	mov	r0, r4
 8007740:	4629      	mov	r1, r5
 8007742:	f7f8 fe1d 	bl	8000380 <__aeabi_uldivmod>
 8007746:	4602      	mov	r2, r0
 8007748:	460b      	mov	r3, r1
 800774a:	4613      	mov	r3, r2
 800774c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800774e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007750:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007754:	d308      	bcc.n	8007768 <UART_SetConfig+0x784>
 8007756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007758:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800775c:	d204      	bcs.n	8007768 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007764:	60da      	str	r2, [r3, #12]
 8007766:	e180      	b.n	8007a6a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800776e:	e17c      	b.n	8007a6a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	69db      	ldr	r3, [r3, #28]
 8007774:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007778:	f040 80be 	bne.w	80078f8 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800777c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007780:	2b20      	cmp	r3, #32
 8007782:	dc49      	bgt.n	8007818 <UART_SetConfig+0x834>
 8007784:	2b00      	cmp	r3, #0
 8007786:	db7c      	blt.n	8007882 <UART_SetConfig+0x89e>
 8007788:	2b20      	cmp	r3, #32
 800778a:	d87a      	bhi.n	8007882 <UART_SetConfig+0x89e>
 800778c:	a201      	add	r2, pc, #4	; (adr r2, 8007794 <UART_SetConfig+0x7b0>)
 800778e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007792:	bf00      	nop
 8007794:	0800781f 	.word	0x0800781f
 8007798:	08007827 	.word	0x08007827
 800779c:	08007883 	.word	0x08007883
 80077a0:	08007883 	.word	0x08007883
 80077a4:	0800782f 	.word	0x0800782f
 80077a8:	08007883 	.word	0x08007883
 80077ac:	08007883 	.word	0x08007883
 80077b0:	08007883 	.word	0x08007883
 80077b4:	0800783f 	.word	0x0800783f
 80077b8:	08007883 	.word	0x08007883
 80077bc:	08007883 	.word	0x08007883
 80077c0:	08007883 	.word	0x08007883
 80077c4:	08007883 	.word	0x08007883
 80077c8:	08007883 	.word	0x08007883
 80077cc:	08007883 	.word	0x08007883
 80077d0:	08007883 	.word	0x08007883
 80077d4:	0800784f 	.word	0x0800784f
 80077d8:	08007883 	.word	0x08007883
 80077dc:	08007883 	.word	0x08007883
 80077e0:	08007883 	.word	0x08007883
 80077e4:	08007883 	.word	0x08007883
 80077e8:	08007883 	.word	0x08007883
 80077ec:	08007883 	.word	0x08007883
 80077f0:	08007883 	.word	0x08007883
 80077f4:	08007883 	.word	0x08007883
 80077f8:	08007883 	.word	0x08007883
 80077fc:	08007883 	.word	0x08007883
 8007800:	08007883 	.word	0x08007883
 8007804:	08007883 	.word	0x08007883
 8007808:	08007883 	.word	0x08007883
 800780c:	08007883 	.word	0x08007883
 8007810:	08007883 	.word	0x08007883
 8007814:	08007875 	.word	0x08007875
 8007818:	2b40      	cmp	r3, #64	; 0x40
 800781a:	d02e      	beq.n	800787a <UART_SetConfig+0x896>
 800781c:	e031      	b.n	8007882 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800781e:	f7fb fe83 	bl	8003528 <HAL_RCC_GetPCLK1Freq>
 8007822:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007824:	e033      	b.n	800788e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007826:	f7fb fe95 	bl	8003554 <HAL_RCC_GetPCLK2Freq>
 800782a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800782c:	e02f      	b.n	800788e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800782e:	f107 0314 	add.w	r3, r7, #20
 8007832:	4618      	mov	r0, r3
 8007834:	f7fd facc 	bl	8004dd0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800783c:	e027      	b.n	800788e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800783e:	f107 0308 	add.w	r3, r7, #8
 8007842:	4618      	mov	r0, r3
 8007844:	f7fd fc18 	bl	8005078 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800784c:	e01f      	b.n	800788e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800784e:	4b58      	ldr	r3, [pc, #352]	; (80079b0 <UART_SetConfig+0x9cc>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 0320 	and.w	r3, r3, #32
 8007856:	2b00      	cmp	r3, #0
 8007858:	d009      	beq.n	800786e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800785a:	4b55      	ldr	r3, [pc, #340]	; (80079b0 <UART_SetConfig+0x9cc>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	08db      	lsrs	r3, r3, #3
 8007860:	f003 0303 	and.w	r3, r3, #3
 8007864:	4a53      	ldr	r2, [pc, #332]	; (80079b4 <UART_SetConfig+0x9d0>)
 8007866:	fa22 f303 	lsr.w	r3, r2, r3
 800786a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800786c:	e00f      	b.n	800788e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800786e:	4b51      	ldr	r3, [pc, #324]	; (80079b4 <UART_SetConfig+0x9d0>)
 8007870:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007872:	e00c      	b.n	800788e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007874:	4b4c      	ldr	r3, [pc, #304]	; (80079a8 <UART_SetConfig+0x9c4>)
 8007876:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007878:	e009      	b.n	800788e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800787a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800787e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007880:	e005      	b.n	800788e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8007882:	2300      	movs	r3, #0
 8007884:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800788c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800788e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007890:	2b00      	cmp	r3, #0
 8007892:	f000 80ea 	beq.w	8007a6a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789a:	4a44      	ldr	r2, [pc, #272]	; (80079ac <UART_SetConfig+0x9c8>)
 800789c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078a0:	461a      	mov	r2, r3
 80078a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80078a8:	005a      	lsls	r2, r3, #1
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	085b      	lsrs	r3, r3, #1
 80078b0:	441a      	add	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078be:	2b0f      	cmp	r3, #15
 80078c0:	d916      	bls.n	80078f0 <UART_SetConfig+0x90c>
 80078c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078c8:	d212      	bcs.n	80078f0 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	f023 030f 	bic.w	r3, r3, #15
 80078d2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	085b      	lsrs	r3, r3, #1
 80078d8:	b29b      	uxth	r3, r3
 80078da:	f003 0307 	and.w	r3, r3, #7
 80078de:	b29a      	uxth	r2, r3
 80078e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80078e2:	4313      	orrs	r3, r2
 80078e4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80078ec:	60da      	str	r2, [r3, #12]
 80078ee:	e0bc      	b.n	8007a6a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80078f6:	e0b8      	b.n	8007a6a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80078fc:	2b20      	cmp	r3, #32
 80078fe:	dc4b      	bgt.n	8007998 <UART_SetConfig+0x9b4>
 8007900:	2b00      	cmp	r3, #0
 8007902:	f2c0 8087 	blt.w	8007a14 <UART_SetConfig+0xa30>
 8007906:	2b20      	cmp	r3, #32
 8007908:	f200 8084 	bhi.w	8007a14 <UART_SetConfig+0xa30>
 800790c:	a201      	add	r2, pc, #4	; (adr r2, 8007914 <UART_SetConfig+0x930>)
 800790e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007912:	bf00      	nop
 8007914:	0800799f 	.word	0x0800799f
 8007918:	080079b9 	.word	0x080079b9
 800791c:	08007a15 	.word	0x08007a15
 8007920:	08007a15 	.word	0x08007a15
 8007924:	080079c1 	.word	0x080079c1
 8007928:	08007a15 	.word	0x08007a15
 800792c:	08007a15 	.word	0x08007a15
 8007930:	08007a15 	.word	0x08007a15
 8007934:	080079d1 	.word	0x080079d1
 8007938:	08007a15 	.word	0x08007a15
 800793c:	08007a15 	.word	0x08007a15
 8007940:	08007a15 	.word	0x08007a15
 8007944:	08007a15 	.word	0x08007a15
 8007948:	08007a15 	.word	0x08007a15
 800794c:	08007a15 	.word	0x08007a15
 8007950:	08007a15 	.word	0x08007a15
 8007954:	080079e1 	.word	0x080079e1
 8007958:	08007a15 	.word	0x08007a15
 800795c:	08007a15 	.word	0x08007a15
 8007960:	08007a15 	.word	0x08007a15
 8007964:	08007a15 	.word	0x08007a15
 8007968:	08007a15 	.word	0x08007a15
 800796c:	08007a15 	.word	0x08007a15
 8007970:	08007a15 	.word	0x08007a15
 8007974:	08007a15 	.word	0x08007a15
 8007978:	08007a15 	.word	0x08007a15
 800797c:	08007a15 	.word	0x08007a15
 8007980:	08007a15 	.word	0x08007a15
 8007984:	08007a15 	.word	0x08007a15
 8007988:	08007a15 	.word	0x08007a15
 800798c:	08007a15 	.word	0x08007a15
 8007990:	08007a15 	.word	0x08007a15
 8007994:	08007a07 	.word	0x08007a07
 8007998:	2b40      	cmp	r3, #64	; 0x40
 800799a:	d037      	beq.n	8007a0c <UART_SetConfig+0xa28>
 800799c:	e03a      	b.n	8007a14 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800799e:	f7fb fdc3 	bl	8003528 <HAL_RCC_GetPCLK1Freq>
 80079a2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80079a4:	e03c      	b.n	8007a20 <UART_SetConfig+0xa3c>
 80079a6:	bf00      	nop
 80079a8:	003d0900 	.word	0x003d0900
 80079ac:	0800a03c 	.word	0x0800a03c
 80079b0:	58024400 	.word	0x58024400
 80079b4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079b8:	f7fb fdcc 	bl	8003554 <HAL_RCC_GetPCLK2Freq>
 80079bc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80079be:	e02f      	b.n	8007a20 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079c0:	f107 0314 	add.w	r3, r7, #20
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7fd fa03 	bl	8004dd0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079ce:	e027      	b.n	8007a20 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079d0:	f107 0308 	add.w	r3, r7, #8
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7fd fb4f 	bl	8005078 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079de:	e01f      	b.n	8007a20 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079e0:	4b2c      	ldr	r3, [pc, #176]	; (8007a94 <UART_SetConfig+0xab0>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 0320 	and.w	r3, r3, #32
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d009      	beq.n	8007a00 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80079ec:	4b29      	ldr	r3, [pc, #164]	; (8007a94 <UART_SetConfig+0xab0>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	08db      	lsrs	r3, r3, #3
 80079f2:	f003 0303 	and.w	r3, r3, #3
 80079f6:	4a28      	ldr	r2, [pc, #160]	; (8007a98 <UART_SetConfig+0xab4>)
 80079f8:	fa22 f303 	lsr.w	r3, r2, r3
 80079fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80079fe:	e00f      	b.n	8007a20 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8007a00:	4b25      	ldr	r3, [pc, #148]	; (8007a98 <UART_SetConfig+0xab4>)
 8007a02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a04:	e00c      	b.n	8007a20 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a06:	4b25      	ldr	r3, [pc, #148]	; (8007a9c <UART_SetConfig+0xab8>)
 8007a08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a0a:	e009      	b.n	8007a20 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a12:	e005      	b.n	8007a20 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8007a14:	2300      	movs	r3, #0
 8007a16:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007a1e:	bf00      	nop
    }

    if (pclk != 0U)
 8007a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d021      	beq.n	8007a6a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2a:	4a1d      	ldr	r2, [pc, #116]	; (8007aa0 <UART_SetConfig+0xabc>)
 8007a2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a30:	461a      	mov	r2, r3
 8007a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a34:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	085b      	lsrs	r3, r3, #1
 8007a3e:	441a      	add	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a48:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4c:	2b0f      	cmp	r3, #15
 8007a4e:	d909      	bls.n	8007a64 <UART_SetConfig+0xa80>
 8007a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a56:	d205      	bcs.n	8007a64 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	60da      	str	r2, [r3, #12]
 8007a62:	e002      	b.n	8007a6a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007a86:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3738      	adds	r7, #56	; 0x38
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bdb0      	pop	{r4, r5, r7, pc}
 8007a92:	bf00      	nop
 8007a94:	58024400 	.word	0x58024400
 8007a98:	03d09000 	.word	0x03d09000
 8007a9c:	003d0900 	.word	0x003d0900
 8007aa0:	0800a03c 	.word	0x0800a03c

08007aa4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab0:	f003 0301 	and.w	r3, r3, #1
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00a      	beq.n	8007ace <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	430a      	orrs	r2, r1
 8007acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad2:	f003 0302 	and.w	r3, r3, #2
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00a      	beq.n	8007af0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	430a      	orrs	r2, r1
 8007aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af4:	f003 0304 	and.w	r3, r3, #4
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00a      	beq.n	8007b12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	430a      	orrs	r2, r1
 8007b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b16:	f003 0308 	and.w	r3, r3, #8
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00a      	beq.n	8007b34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	430a      	orrs	r2, r1
 8007b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b38:	f003 0310 	and.w	r3, r3, #16
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00a      	beq.n	8007b56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	430a      	orrs	r2, r1
 8007b54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5a:	f003 0320 	and.w	r3, r3, #32
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d00a      	beq.n	8007b78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	430a      	orrs	r2, r1
 8007b76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d01a      	beq.n	8007bba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	430a      	orrs	r2, r1
 8007b98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ba2:	d10a      	bne.n	8007bba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	430a      	orrs	r2, r1
 8007bb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00a      	beq.n	8007bdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	430a      	orrs	r2, r1
 8007bda:	605a      	str	r2, [r3, #4]
  }
}
 8007bdc:	bf00      	nop
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b086      	sub	sp, #24
 8007bec:	af02      	add	r7, sp, #8
 8007bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007bf8:	f7f9 fc64 	bl	80014c4 <HAL_GetTick>
 8007bfc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 0308 	and.w	r3, r3, #8
 8007c08:	2b08      	cmp	r3, #8
 8007c0a:	d10e      	bne.n	8007c2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f82f 	bl	8007c7e <UART_WaitOnFlagUntilTimeout>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d001      	beq.n	8007c2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e025      	b.n	8007c76 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 0304 	and.w	r3, r3, #4
 8007c34:	2b04      	cmp	r3, #4
 8007c36:	d10e      	bne.n	8007c56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f819 	bl	8007c7e <UART_WaitOnFlagUntilTimeout>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d001      	beq.n	8007c56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e00f      	b.n	8007c76 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2220      	movs	r2, #32
 8007c5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2220      	movs	r2, #32
 8007c62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b09c      	sub	sp, #112	; 0x70
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	60f8      	str	r0, [r7, #12]
 8007c86:	60b9      	str	r1, [r7, #8]
 8007c88:	603b      	str	r3, [r7, #0]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c8e:	e0a9      	b.n	8007de4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c96:	f000 80a5 	beq.w	8007de4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c9a:	f7f9 fc13 	bl	80014c4 <HAL_GetTick>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d302      	bcc.n	8007cb0 <UART_WaitOnFlagUntilTimeout+0x32>
 8007caa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d140      	bne.n	8007d32 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cb8:	e853 3f00 	ldrex	r3, [r3]
 8007cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007cc4:	667b      	str	r3, [r7, #100]	; 0x64
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cd0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007cd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007cd6:	e841 2300 	strex	r3, r2, [r1]
 8007cda:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1e6      	bne.n	8007cb0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	3308      	adds	r3, #8
 8007ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cec:	e853 3f00 	ldrex	r3, [r3]
 8007cf0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf4:	f023 0301 	bic.w	r3, r3, #1
 8007cf8:	663b      	str	r3, [r7, #96]	; 0x60
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	3308      	adds	r3, #8
 8007d00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d02:	64ba      	str	r2, [r7, #72]	; 0x48
 8007d04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d0a:	e841 2300 	strex	r3, r2, [r1]
 8007d0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1e5      	bne.n	8007ce2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2220      	movs	r2, #32
 8007d1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2220      	movs	r2, #32
 8007d22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e069      	b.n	8007e06 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 0304 	and.w	r3, r3, #4
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d051      	beq.n	8007de4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	69db      	ldr	r3, [r3, #28]
 8007d46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d4e:	d149      	bne.n	8007de4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d58:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d62:	e853 3f00 	ldrex	r3, [r3]
 8007d66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	461a      	mov	r2, r3
 8007d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d78:	637b      	str	r3, [r7, #52]	; 0x34
 8007d7a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d80:	e841 2300 	strex	r3, r2, [r1]
 8007d84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1e6      	bne.n	8007d5a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	3308      	adds	r3, #8
 8007d92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	e853 3f00 	ldrex	r3, [r3]
 8007d9a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	f023 0301 	bic.w	r3, r3, #1
 8007da2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	3308      	adds	r3, #8
 8007daa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007dac:	623a      	str	r2, [r7, #32]
 8007dae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db0:	69f9      	ldr	r1, [r7, #28]
 8007db2:	6a3a      	ldr	r2, [r7, #32]
 8007db4:	e841 2300 	strex	r3, r2, [r1]
 8007db8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d1e5      	bne.n	8007d8c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2220      	movs	r2, #32
 8007dc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2220      	movs	r2, #32
 8007dcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2220      	movs	r2, #32
 8007dd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e010      	b.n	8007e06 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	69da      	ldr	r2, [r3, #28]
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	4013      	ands	r3, r2
 8007dee:	68ba      	ldr	r2, [r7, #8]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	bf0c      	ite	eq
 8007df4:	2301      	moveq	r3, #1
 8007df6:	2300      	movne	r3, #0
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	79fb      	ldrb	r3, [r7, #7]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	f43f af46 	beq.w	8007c90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3770      	adds	r7, #112	; 0x70
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007e0e:	b480      	push	{r7}
 8007e10:	b085      	sub	sp, #20
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d101      	bne.n	8007e24 <HAL_UARTEx_DisableFifoMode+0x16>
 8007e20:	2302      	movs	r3, #2
 8007e22:	e027      	b.n	8007e74 <HAL_UARTEx_DisableFifoMode+0x66>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2224      	movs	r2, #36	; 0x24
 8007e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f022 0201 	bic.w	r2, r2, #1
 8007e4a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007e52:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2220      	movs	r2, #32
 8007e66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3714      	adds	r7, #20
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d101      	bne.n	8007e98 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007e94:	2302      	movs	r3, #2
 8007e96:	e02d      	b.n	8007ef4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2224      	movs	r2, #36	; 0x24
 8007ea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f022 0201 	bic.w	r2, r2, #1
 8007ebe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	683a      	ldr	r2, [r7, #0]
 8007ed0:	430a      	orrs	r2, r1
 8007ed2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f84f 	bl	8007f78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2220      	movs	r2, #32
 8007ee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d101      	bne.n	8007f14 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007f10:	2302      	movs	r3, #2
 8007f12:	e02d      	b.n	8007f70 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2224      	movs	r2, #36	; 0x24
 8007f20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f022 0201 	bic.w	r2, r2, #1
 8007f3a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	430a      	orrs	r2, r1
 8007f4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 f811 	bl	8007f78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2220      	movs	r2, #32
 8007f62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d108      	bne.n	8007f9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007f98:	e031      	b.n	8007ffe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007f9a:	2310      	movs	r3, #16
 8007f9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007f9e:	2310      	movs	r3, #16
 8007fa0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	0e5b      	lsrs	r3, r3, #25
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	f003 0307 	and.w	r3, r3, #7
 8007fb0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	0f5b      	lsrs	r3, r3, #29
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	f003 0307 	and.w	r3, r3, #7
 8007fc0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007fc2:	7bbb      	ldrb	r3, [r7, #14]
 8007fc4:	7b3a      	ldrb	r2, [r7, #12]
 8007fc6:	4911      	ldr	r1, [pc, #68]	; (800800c <UARTEx_SetNbDataToProcess+0x94>)
 8007fc8:	5c8a      	ldrb	r2, [r1, r2]
 8007fca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007fce:	7b3a      	ldrb	r2, [r7, #12]
 8007fd0:	490f      	ldr	r1, [pc, #60]	; (8008010 <UARTEx_SetNbDataToProcess+0x98>)
 8007fd2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007fd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007fe0:	7bfb      	ldrb	r3, [r7, #15]
 8007fe2:	7b7a      	ldrb	r2, [r7, #13]
 8007fe4:	4909      	ldr	r1, [pc, #36]	; (800800c <UARTEx_SetNbDataToProcess+0x94>)
 8007fe6:	5c8a      	ldrb	r2, [r1, r2]
 8007fe8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007fec:	7b7a      	ldrb	r2, [r7, #13]
 8007fee:	4908      	ldr	r1, [pc, #32]	; (8008010 <UARTEx_SetNbDataToProcess+0x98>)
 8007ff0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ff2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007ffe:	bf00      	nop
 8008000:	3714      	adds	r7, #20
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	0800a054 	.word	0x0800a054
 8008010:	0800a05c 	.word	0x0800a05c

08008014 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008014:	b084      	sub	sp, #16
 8008016:	b480      	push	{r7}
 8008018:	b085      	sub	sp, #20
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
 800801e:	f107 001c 	add.w	r0, r7, #28
 8008022:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008026:	2300      	movs	r3, #0
 8008028:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800802a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800802c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800802e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8008030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8008032:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8008034:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8008036:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800803a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	4313      	orrs	r3, r2
 8008040:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	685a      	ldr	r2, [r3, #4]
 8008046:	4b07      	ldr	r3, [pc, #28]	; (8008064 <SDMMC_Init+0x50>)
 8008048:	4013      	ands	r3, r2
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	431a      	orrs	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3714      	adds	r7, #20
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	b004      	add	sp, #16
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	ffc02c00 	.word	0xffc02c00

08008068 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008076:	4618      	mov	r0, r3
 8008078:	370c      	adds	r7, #12
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr

08008082 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008082:	b480      	push	{r7}
 8008084:	b083      	sub	sp, #12
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f043 0203 	orr.w	r2, r3, #3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 0303 	and.w	r3, r3, #3
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80080ca:	2300      	movs	r3, #0
 80080cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80080de:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80080e4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80080ea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	68da      	ldr	r2, [r3, #12]
 80080f6:	4b06      	ldr	r3, [pc, #24]	; (8008110 <SDMMC_SendCommand+0x50>)
 80080f8:	4013      	ands	r3, r2
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	431a      	orrs	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr
 8008110:	fffee0c0 	.word	0xfffee0c0

08008114 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	b2db      	uxtb	r3, r3
}
 8008122:	4618      	mov	r0, r3
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr

0800812e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800812e:	b480      	push	{r7}
 8008130:	b085      	sub	sp, #20
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
 8008136:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	3314      	adds	r3, #20
 800813c:	461a      	mov	r2, r3
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	4413      	add	r3, r2
 8008142:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
}
 8008148:	4618      	mov	r0, r3
 800814a:	3714      	adds	r7, #20
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800815e:	2300      	movs	r3, #0
 8008160:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	685a      	ldr	r2, [r3, #4]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800817a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8008180:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8008186:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008188:	68fa      	ldr	r2, [r7, #12]
 800818a:	4313      	orrs	r3, r2
 800818c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008192:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	431a      	orrs	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800819e:	2300      	movs	r3, #0

}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3714      	adds	r7, #20
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b088      	sub	sp, #32
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80081ba:	2310      	movs	r3, #16
 80081bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80081be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80081c4:	2300      	movs	r3, #0
 80081c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80081c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80081ce:	f107 0308 	add.w	r3, r7, #8
 80081d2:	4619      	mov	r1, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f7ff ff73 	bl	80080c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80081da:	f241 3288 	movw	r2, #5000	; 0x1388
 80081de:	2110      	movs	r1, #16
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fa19 	bl	8008618 <SDMMC_GetCmdResp1>
 80081e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081e8:	69fb      	ldr	r3, [r7, #28]
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3720      	adds	r7, #32
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b088      	sub	sp, #32
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
 80081fa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008200:	2311      	movs	r3, #17
 8008202:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008204:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008208:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800820a:	2300      	movs	r3, #0
 800820c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800820e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008212:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008214:	f107 0308 	add.w	r3, r7, #8
 8008218:	4619      	mov	r1, r3
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f7ff ff50 	bl	80080c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008220:	f241 3288 	movw	r2, #5000	; 0x1388
 8008224:	2111      	movs	r1, #17
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 f9f6 	bl	8008618 <SDMMC_GetCmdResp1>
 800822c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800822e:	69fb      	ldr	r3, [r7, #28]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3720      	adds	r7, #32
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b088      	sub	sp, #32
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008246:	2312      	movs	r3, #18
 8008248:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800824a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800824e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008250:	2300      	movs	r3, #0
 8008252:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008254:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008258:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800825a:	f107 0308 	add.w	r3, r7, #8
 800825e:	4619      	mov	r1, r3
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f7ff ff2d 	bl	80080c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008266:	f241 3288 	movw	r2, #5000	; 0x1388
 800826a:	2112      	movs	r1, #18
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 f9d3 	bl	8008618 <SDMMC_GetCmdResp1>
 8008272:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008274:	69fb      	ldr	r3, [r7, #28]
}
 8008276:	4618      	mov	r0, r3
 8008278:	3720      	adds	r7, #32
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
	...

08008280 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b088      	sub	sp, #32
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008288:	2300      	movs	r3, #0
 800828a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800828c:	230c      	movs	r3, #12
 800828e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008290:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008294:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008296:	2300      	movs	r3, #0
 8008298:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800829a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800829e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082b8:	f107 0308 	add.w	r3, r7, #8
 80082bc:	4619      	mov	r1, r3
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f7ff fefe 	bl	80080c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80082c4:	4a0b      	ldr	r2, [pc, #44]	; (80082f4 <SDMMC_CmdStopTransfer+0x74>)
 80082c6:	210c      	movs	r1, #12
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f9a5 	bl	8008618 <SDMMC_GetCmdResp1>
 80082ce:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082e2:	d101      	bne.n	80082e8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80082e4:	2300      	movs	r3, #0
 80082e6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80082e8:	69fb      	ldr	r3, [r7, #28]
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3720      	adds	r7, #32
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	05f5e100 	.word	0x05f5e100

080082f8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b088      	sub	sp, #32
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008306:	2307      	movs	r3, #7
 8008308:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800830a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800830e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008310:	2300      	movs	r3, #0
 8008312:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008318:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800831a:	f107 0308 	add.w	r3, r7, #8
 800831e:	4619      	mov	r1, r3
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f7ff fecd 	bl	80080c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008326:	f241 3288 	movw	r2, #5000	; 0x1388
 800832a:	2107      	movs	r1, #7
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 f973 	bl	8008618 <SDMMC_GetCmdResp1>
 8008332:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008334:	69fb      	ldr	r3, [r7, #28]
}
 8008336:	4618      	mov	r0, r3
 8008338:	3720      	adds	r7, #32
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b088      	sub	sp, #32
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008346:	2300      	movs	r3, #0
 8008348:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800834a:	2300      	movs	r3, #0
 800834c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800834e:	2300      	movs	r3, #0
 8008350:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008352:	2300      	movs	r3, #0
 8008354:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800835a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800835c:	f107 0308 	add.w	r3, r7, #8
 8008360:	4619      	mov	r1, r3
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f7ff feac 	bl	80080c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 fb97 	bl	8008a9c <SDMMC_GetCmdError>
 800836e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008370:	69fb      	ldr	r3, [r7, #28]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3720      	adds	r7, #32
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}

0800837a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800837a:	b580      	push	{r7, lr}
 800837c:	b088      	sub	sp, #32
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008382:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008386:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008388:	2308      	movs	r3, #8
 800838a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800838c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008390:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008392:	2300      	movs	r3, #0
 8008394:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800839a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800839c:	f107 0308 	add.w	r3, r7, #8
 80083a0:	4619      	mov	r1, r3
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f7ff fe8c 	bl	80080c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 fb29 	bl	8008a00 <SDMMC_GetCmdResp7>
 80083ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083b0:	69fb      	ldr	r3, [r7, #28]
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3720      	adds	r7, #32
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b088      	sub	sp, #32
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80083c8:	2337      	movs	r3, #55	; 0x37
 80083ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80083cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80083d2:	2300      	movs	r3, #0
 80083d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80083d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80083dc:	f107 0308 	add.w	r3, r7, #8
 80083e0:	4619      	mov	r1, r3
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7ff fe6c 	bl	80080c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80083e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80083ec:	2137      	movs	r1, #55	; 0x37
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f912 	bl	8008618 <SDMMC_GetCmdResp1>
 80083f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083f6:	69fb      	ldr	r3, [r7, #28]
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3720      	adds	r7, #32
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b088      	sub	sp, #32
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800840e:	2329      	movs	r3, #41	; 0x29
 8008410:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008412:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008416:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008418:	2300      	movs	r3, #0
 800841a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800841c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008420:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008422:	f107 0308 	add.w	r3, r7, #8
 8008426:	4619      	mov	r1, r3
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f7ff fe49 	bl	80080c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f000 fa2e 	bl	8008890 <SDMMC_GetCmdResp3>
 8008434:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008436:	69fb      	ldr	r3, [r7, #28]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3720      	adds	r7, #32
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b088      	sub	sp, #32
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800844e:	2306      	movs	r3, #6
 8008450:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008452:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008456:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008458:	2300      	movs	r3, #0
 800845a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800845c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008460:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008462:	f107 0308 	add.w	r3, r7, #8
 8008466:	4619      	mov	r1, r3
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f7ff fe29 	bl	80080c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800846e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008472:	2106      	movs	r1, #6
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 f8cf 	bl	8008618 <SDMMC_GetCmdResp1>
 800847a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800847c:	69fb      	ldr	r3, [r7, #28]
}
 800847e:	4618      	mov	r0, r3
 8008480:	3720      	adds	r7, #32
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b088      	sub	sp, #32
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800848e:	2300      	movs	r3, #0
 8008490:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008492:	2333      	movs	r3, #51	; 0x33
 8008494:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008496:	f44f 7380 	mov.w	r3, #256	; 0x100
 800849a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800849c:	2300      	movs	r3, #0
 800849e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80084a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80084a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80084a6:	f107 0308 	add.w	r3, r7, #8
 80084aa:	4619      	mov	r1, r3
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f7ff fe07 	bl	80080c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80084b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80084b6:	2133      	movs	r1, #51	; 0x33
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 f8ad 	bl	8008618 <SDMMC_GetCmdResp1>
 80084be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084c0:	69fb      	ldr	r3, [r7, #28]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3720      	adds	r7, #32
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b088      	sub	sp, #32
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80084d2:	2300      	movs	r3, #0
 80084d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80084d6:	2302      	movs	r3, #2
 80084d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80084da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80084de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80084e0:	2300      	movs	r3, #0
 80084e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80084e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80084e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80084ea:	f107 0308 	add.w	r3, r7, #8
 80084ee:	4619      	mov	r1, r3
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f7ff fde5 	bl	80080c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 f980 	bl	80087fc <SDMMC_GetCmdResp2>
 80084fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084fe:	69fb      	ldr	r3, [r7, #28]
}
 8008500:	4618      	mov	r0, r3
 8008502:	3720      	adds	r7, #32
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b088      	sub	sp, #32
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008516:	2309      	movs	r3, #9
 8008518:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800851a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800851e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008520:	2300      	movs	r3, #0
 8008522:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008528:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800852a:	f107 0308 	add.w	r3, r7, #8
 800852e:	4619      	mov	r1, r3
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f7ff fdc5 	bl	80080c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f960 	bl	80087fc <SDMMC_GetCmdResp2>
 800853c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800853e:	69fb      	ldr	r3, [r7, #28]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3720      	adds	r7, #32
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b088      	sub	sp, #32
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008552:	2300      	movs	r3, #0
 8008554:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008556:	2303      	movs	r3, #3
 8008558:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800855a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800855e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008560:	2300      	movs	r3, #0
 8008562:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008568:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800856a:	f107 0308 	add.w	r3, r7, #8
 800856e:	4619      	mov	r1, r3
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f7ff fda5 	bl	80080c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008576:	683a      	ldr	r2, [r7, #0]
 8008578:	2103      	movs	r1, #3
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 f9c8 	bl	8008910 <SDMMC_GetCmdResp6>
 8008580:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008582:	69fb      	ldr	r3, [r7, #28]
}
 8008584:	4618      	mov	r0, r3
 8008586:	3720      	adds	r7, #32
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b088      	sub	sp, #32
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800859a:	230d      	movs	r3, #13
 800859c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800859e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80085a4:	2300      	movs	r3, #0
 80085a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80085a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80085ae:	f107 0308 	add.w	r3, r7, #8
 80085b2:	4619      	mov	r1, r3
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f7ff fd83 	bl	80080c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80085ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80085be:	210d      	movs	r1, #13
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 f829 	bl	8008618 <SDMMC_GetCmdResp1>
 80085c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085c8:	69fb      	ldr	r3, [r7, #28]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3720      	adds	r7, #32
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b088      	sub	sp, #32
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80085da:	2300      	movs	r3, #0
 80085dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80085de:	230d      	movs	r3, #13
 80085e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80085e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80085e8:	2300      	movs	r3, #0
 80085ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80085ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80085f2:	f107 0308 	add.w	r3, r7, #8
 80085f6:	4619      	mov	r1, r3
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f7ff fd61 	bl	80080c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80085fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008602:	210d      	movs	r1, #13
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 f807 	bl	8008618 <SDMMC_GetCmdResp1>
 800860a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800860c:	69fb      	ldr	r3, [r7, #28]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3720      	adds	r7, #32
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
	...

08008618 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b088      	sub	sp, #32
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	460b      	mov	r3, r1
 8008622:	607a      	str	r2, [r7, #4]
 8008624:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008626:	4b70      	ldr	r3, [pc, #448]	; (80087e8 <SDMMC_GetCmdResp1+0x1d0>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a70      	ldr	r2, [pc, #448]	; (80087ec <SDMMC_GetCmdResp1+0x1d4>)
 800862c:	fba2 2303 	umull	r2, r3, r2, r3
 8008630:	0a5a      	lsrs	r2, r3, #9
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	fb02 f303 	mul.w	r3, r2, r3
 8008638:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	1e5a      	subs	r2, r3, #1
 800863e:	61fa      	str	r2, [r7, #28]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d102      	bne.n	800864a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008644:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008648:	e0c9      	b.n	80087de <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800864e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8008650:	69ba      	ldr	r2, [r7, #24]
 8008652:	4b67      	ldr	r3, [pc, #412]	; (80087f0 <SDMMC_GetCmdResp1+0x1d8>)
 8008654:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008656:	2b00      	cmp	r3, #0
 8008658:	d0ef      	beq.n	800863a <SDMMC_GetCmdResp1+0x22>
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1ea      	bne.n	800863a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008668:	f003 0304 	and.w	r3, r3, #4
 800866c:	2b00      	cmp	r3, #0
 800866e:	d004      	beq.n	800867a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2204      	movs	r2, #4
 8008674:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008676:	2304      	movs	r3, #4
 8008678:	e0b1      	b.n	80087de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800867e:	f003 0301 	and.w	r3, r3, #1
 8008682:	2b00      	cmp	r3, #0
 8008684:	d004      	beq.n	8008690 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2201      	movs	r2, #1
 800868a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800868c:	2301      	movs	r3, #1
 800868e:	e0a6      	b.n	80087de <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	4a58      	ldr	r2, [pc, #352]	; (80087f4 <SDMMC_GetCmdResp1+0x1dc>)
 8008694:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f7ff fd3c 	bl	8008114 <SDMMC_GetCommandResponse>
 800869c:	4603      	mov	r3, r0
 800869e:	461a      	mov	r2, r3
 80086a0:	7afb      	ldrb	r3, [r7, #11]
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d001      	beq.n	80086aa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e099      	b.n	80087de <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80086aa:	2100      	movs	r1, #0
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f7ff fd3e 	bl	800812e <SDMMC_GetResponse>
 80086b2:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80086b4:	697a      	ldr	r2, [r7, #20]
 80086b6:	4b50      	ldr	r3, [pc, #320]	; (80087f8 <SDMMC_GetCmdResp1+0x1e0>)
 80086b8:	4013      	ands	r3, r2
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d101      	bne.n	80086c2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80086be:	2300      	movs	r3, #0
 80086c0:	e08d      	b.n	80087de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	da02      	bge.n	80086ce <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80086c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80086cc:	e087      	b.n	80087de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d001      	beq.n	80086dc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80086d8:	2340      	movs	r3, #64	; 0x40
 80086da:	e080      	b.n	80087de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d001      	beq.n	80086ea <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80086e6:	2380      	movs	r3, #128	; 0x80
 80086e8:	e079      	b.n	80087de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d002      	beq.n	80086fa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80086f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086f8:	e071      	b.n	80087de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008700:	2b00      	cmp	r3, #0
 8008702:	d002      	beq.n	800870a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008704:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008708:	e069      	b.n	80087de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008710:	2b00      	cmp	r3, #0
 8008712:	d002      	beq.n	800871a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008714:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008718:	e061      	b.n	80087de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008720:	2b00      	cmp	r3, #0
 8008722:	d002      	beq.n	800872a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008724:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008728:	e059      	b.n	80087de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d002      	beq.n	800873a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008738:	e051      	b.n	80087de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008740:	2b00      	cmp	r3, #0
 8008742:	d002      	beq.n	800874a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008744:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008748:	e049      	b.n	80087de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008750:	2b00      	cmp	r3, #0
 8008752:	d002      	beq.n	800875a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008754:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008758:	e041      	b.n	80087de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008760:	2b00      	cmp	r3, #0
 8008762:	d002      	beq.n	800876a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008764:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008768:	e039      	b.n	80087de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008770:	2b00      	cmp	r3, #0
 8008772:	d002      	beq.n	800877a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008774:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008778:	e031      	b.n	80087de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008780:	2b00      	cmp	r3, #0
 8008782:	d002      	beq.n	800878a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008784:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008788:	e029      	b.n	80087de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008790:	2b00      	cmp	r3, #0
 8008792:	d002      	beq.n	800879a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008794:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008798:	e021      	b.n	80087de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d002      	beq.n	80087aa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80087a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80087a8:	e019      	b.n	80087de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d002      	beq.n	80087ba <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80087b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80087b8:	e011      	b.n	80087de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d002      	beq.n	80087ca <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80087c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80087c8:	e009      	b.n	80087de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	f003 0308 	and.w	r3, r3, #8
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d002      	beq.n	80087da <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80087d4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80087d8:	e001      	b.n	80087de <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80087da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3720      	adds	r7, #32
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	24000000 	.word	0x24000000
 80087ec:	10624dd3 	.word	0x10624dd3
 80087f0:	00200045 	.word	0x00200045
 80087f4:	002000c5 	.word	0x002000c5
 80087f8:	fdffe008 	.word	0xfdffe008

080087fc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008804:	4b1f      	ldr	r3, [pc, #124]	; (8008884 <SDMMC_GetCmdResp2+0x88>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a1f      	ldr	r2, [pc, #124]	; (8008888 <SDMMC_GetCmdResp2+0x8c>)
 800880a:	fba2 2303 	umull	r2, r3, r2, r3
 800880e:	0a5b      	lsrs	r3, r3, #9
 8008810:	f241 3288 	movw	r2, #5000	; 0x1388
 8008814:	fb02 f303 	mul.w	r3, r2, r3
 8008818:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	1e5a      	subs	r2, r3, #1
 800881e:	60fa      	str	r2, [r7, #12]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d102      	bne.n	800882a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008824:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008828:	e026      	b.n	8008878 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800882e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008836:	2b00      	cmp	r3, #0
 8008838:	d0ef      	beq.n	800881a <SDMMC_GetCmdResp2+0x1e>
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008840:	2b00      	cmp	r3, #0
 8008842:	d1ea      	bne.n	800881a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008848:	f003 0304 	and.w	r3, r3, #4
 800884c:	2b00      	cmp	r3, #0
 800884e:	d004      	beq.n	800885a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2204      	movs	r2, #4
 8008854:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008856:	2304      	movs	r3, #4
 8008858:	e00e      	b.n	8008878 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800885e:	f003 0301 	and.w	r3, r3, #1
 8008862:	2b00      	cmp	r3, #0
 8008864:	d004      	beq.n	8008870 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2201      	movs	r2, #1
 800886a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800886c:	2301      	movs	r3, #1
 800886e:	e003      	b.n	8008878 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a06      	ldr	r2, [pc, #24]	; (800888c <SDMMC_GetCmdResp2+0x90>)
 8008874:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3714      	adds	r7, #20
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr
 8008884:	24000000 	.word	0x24000000
 8008888:	10624dd3 	.word	0x10624dd3
 800888c:	002000c5 	.word	0x002000c5

08008890 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008898:	4b1a      	ldr	r3, [pc, #104]	; (8008904 <SDMMC_GetCmdResp3+0x74>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a1a      	ldr	r2, [pc, #104]	; (8008908 <SDMMC_GetCmdResp3+0x78>)
 800889e:	fba2 2303 	umull	r2, r3, r2, r3
 80088a2:	0a5b      	lsrs	r3, r3, #9
 80088a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80088a8:	fb02 f303 	mul.w	r3, r2, r3
 80088ac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	1e5a      	subs	r2, r3, #1
 80088b2:	60fa      	str	r2, [r7, #12]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d102      	bne.n	80088be <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088bc:	e01b      	b.n	80088f6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088c2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d0ef      	beq.n	80088ae <SDMMC_GetCmdResp3+0x1e>
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1ea      	bne.n	80088ae <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088dc:	f003 0304 	and.w	r3, r3, #4
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d004      	beq.n	80088ee <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2204      	movs	r2, #4
 80088e8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80088ea:	2304      	movs	r3, #4
 80088ec:	e003      	b.n	80088f6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	4a06      	ldr	r2, [pc, #24]	; (800890c <SDMMC_GetCmdResp3+0x7c>)
 80088f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	24000000 	.word	0x24000000
 8008908:	10624dd3 	.word	0x10624dd3
 800890c:	002000c5 	.word	0x002000c5

08008910 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b088      	sub	sp, #32
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	460b      	mov	r3, r1
 800891a:	607a      	str	r2, [r7, #4]
 800891c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800891e:	4b35      	ldr	r3, [pc, #212]	; (80089f4 <SDMMC_GetCmdResp6+0xe4>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a35      	ldr	r2, [pc, #212]	; (80089f8 <SDMMC_GetCmdResp6+0xe8>)
 8008924:	fba2 2303 	umull	r2, r3, r2, r3
 8008928:	0a5b      	lsrs	r3, r3, #9
 800892a:	f241 3288 	movw	r2, #5000	; 0x1388
 800892e:	fb02 f303 	mul.w	r3, r2, r3
 8008932:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	1e5a      	subs	r2, r3, #1
 8008938:	61fa      	str	r2, [r7, #28]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d102      	bne.n	8008944 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800893e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008942:	e052      	b.n	80089ea <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008948:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008950:	2b00      	cmp	r3, #0
 8008952:	d0ef      	beq.n	8008934 <SDMMC_GetCmdResp6+0x24>
 8008954:	69bb      	ldr	r3, [r7, #24]
 8008956:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1ea      	bne.n	8008934 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008962:	f003 0304 	and.w	r3, r3, #4
 8008966:	2b00      	cmp	r3, #0
 8008968:	d004      	beq.n	8008974 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2204      	movs	r2, #4
 800896e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008970:	2304      	movs	r3, #4
 8008972:	e03a      	b.n	80089ea <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008978:	f003 0301 	and.w	r3, r3, #1
 800897c:	2b00      	cmp	r3, #0
 800897e:	d004      	beq.n	800898a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2201      	movs	r2, #1
 8008984:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008986:	2301      	movs	r3, #1
 8008988:	e02f      	b.n	80089ea <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800898a:	68f8      	ldr	r0, [r7, #12]
 800898c:	f7ff fbc2 	bl	8008114 <SDMMC_GetCommandResponse>
 8008990:	4603      	mov	r3, r0
 8008992:	461a      	mov	r2, r3
 8008994:	7afb      	ldrb	r3, [r7, #11]
 8008996:	4293      	cmp	r3, r2
 8008998:	d001      	beq.n	800899e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800899a:	2301      	movs	r3, #1
 800899c:	e025      	b.n	80089ea <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	4a16      	ldr	r2, [pc, #88]	; (80089fc <SDMMC_GetCmdResp6+0xec>)
 80089a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80089a4:	2100      	movs	r1, #0
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f7ff fbc1 	bl	800812e <SDMMC_GetResponse>
 80089ac:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d106      	bne.n	80089c6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	0c1b      	lsrs	r3, r3, #16
 80089bc:	b29a      	uxth	r2, r3
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80089c2:	2300      	movs	r3, #0
 80089c4:	e011      	b.n	80089ea <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d002      	beq.n	80089d6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80089d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80089d4:	e009      	b.n	80089ea <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d002      	beq.n	80089e6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80089e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089e4:	e001      	b.n	80089ea <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80089e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3720      	adds	r7, #32
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	24000000 	.word	0x24000000
 80089f8:	10624dd3 	.word	0x10624dd3
 80089fc:	002000c5 	.word	0x002000c5

08008a00 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008a08:	4b22      	ldr	r3, [pc, #136]	; (8008a94 <SDMMC_GetCmdResp7+0x94>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a22      	ldr	r2, [pc, #136]	; (8008a98 <SDMMC_GetCmdResp7+0x98>)
 8008a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a12:	0a5b      	lsrs	r3, r3, #9
 8008a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a18:	fb02 f303 	mul.w	r3, r2, r3
 8008a1c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	1e5a      	subs	r2, r3, #1
 8008a22:	60fa      	str	r2, [r7, #12]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d102      	bne.n	8008a2e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008a28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a2c:	e02c      	b.n	8008a88 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a32:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d0ef      	beq.n	8008a1e <SDMMC_GetCmdResp7+0x1e>
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d1ea      	bne.n	8008a1e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a4c:	f003 0304 	and.w	r3, r3, #4
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d004      	beq.n	8008a5e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2204      	movs	r2, #4
 8008a58:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008a5a:	2304      	movs	r3, #4
 8008a5c:	e014      	b.n	8008a88 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a62:	f003 0301 	and.w	r3, r3, #1
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d004      	beq.n	8008a74 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e009      	b.n	8008a88 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d002      	beq.n	8008a86 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2240      	movs	r2, #64	; 0x40
 8008a84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008a86:	2300      	movs	r3, #0

}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3714      	adds	r7, #20
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr
 8008a94:	24000000 	.word	0x24000000
 8008a98:	10624dd3 	.word	0x10624dd3

08008a9c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008aa4:	4b11      	ldr	r3, [pc, #68]	; (8008aec <SDMMC_GetCmdError+0x50>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a11      	ldr	r2, [pc, #68]	; (8008af0 <SDMMC_GetCmdError+0x54>)
 8008aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8008aae:	0a5b      	lsrs	r3, r3, #9
 8008ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ab4:	fb02 f303 	mul.w	r3, r2, r3
 8008ab8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	1e5a      	subs	r2, r3, #1
 8008abe:	60fa      	str	r2, [r7, #12]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d102      	bne.n	8008aca <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008ac4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ac8:	e009      	b.n	8008ade <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d0f1      	beq.n	8008aba <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4a06      	ldr	r2, [pc, #24]	; (8008af4 <SDMMC_GetCmdError+0x58>)
 8008ada:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3714      	adds	r7, #20
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	24000000 	.word	0x24000000
 8008af0:	10624dd3 	.word	0x10624dd3
 8008af4:	002000c5 	.word	0x002000c5

08008af8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008af8:	b084      	sub	sp, #16
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b084      	sub	sp, #16
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	f107 001c 	add.w	r0, r7, #28
 8008b06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d120      	bne.n	8008b52 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	68da      	ldr	r2, [r3, #12]
 8008b20:	4b2a      	ldr	r3, [pc, #168]	; (8008bcc <USB_CoreInit+0xd4>)
 8008b22:	4013      	ands	r3, r2
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d105      	bne.n	8008b46 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 faa8 	bl	800909c <USB_CoreReset>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	73fb      	strb	r3, [r7, #15]
 8008b50:	e01a      	b.n	8008b88 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 fa9c 	bl	800909c <USB_CoreReset>
 8008b64:	4603      	mov	r3, r0
 8008b66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d106      	bne.n	8008b7c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	639a      	str	r2, [r3, #56]	; 0x38
 8008b7a:	e005      	b.n	8008b88 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d116      	bne.n	8008bbc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b92:	b29a      	uxth	r2, r3
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008b9c:	4b0c      	ldr	r3, [pc, #48]	; (8008bd0 <USB_CoreInit+0xd8>)
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	f043 0206 	orr.w	r2, r3, #6
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	f043 0220 	orr.w	r2, r3, #32
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008bc8:	b004      	add	sp, #16
 8008bca:	4770      	bx	lr
 8008bcc:	ffbdffbf 	.word	0xffbdffbf
 8008bd0:	03ee0000 	.word	0x03ee0000

08008bd4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	f023 0201 	bic.w	r2, r3, #1
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	370c      	adds	r7, #12
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr

08008bf6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b084      	sub	sp, #16
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
 8008bfe:	460b      	mov	r3, r1
 8008c00:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008c02:	2300      	movs	r3, #0
 8008c04:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008c12:	78fb      	ldrb	r3, [r7, #3]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d115      	bne.n	8008c44 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008c24:	2001      	movs	r0, #1
 8008c26:	f7f8 fc59 	bl	80014dc <HAL_Delay>
      ms++;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 fa25 	bl	8009080 <USB_GetMode>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d01e      	beq.n	8008c7a <USB_SetCurrentMode+0x84>
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2b31      	cmp	r3, #49	; 0x31
 8008c40:	d9f0      	bls.n	8008c24 <USB_SetCurrentMode+0x2e>
 8008c42:	e01a      	b.n	8008c7a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008c44:	78fb      	ldrb	r3, [r7, #3]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d115      	bne.n	8008c76 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008c56:	2001      	movs	r0, #1
 8008c58:	f7f8 fc40 	bl	80014dc <HAL_Delay>
      ms++;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 fa0c 	bl	8009080 <USB_GetMode>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d005      	beq.n	8008c7a <USB_SetCurrentMode+0x84>
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2b31      	cmp	r3, #49	; 0x31
 8008c72:	d9f0      	bls.n	8008c56 <USB_SetCurrentMode+0x60>
 8008c74:	e001      	b.n	8008c7a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	e005      	b.n	8008c86 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2b32      	cmp	r3, #50	; 0x32
 8008c7e:	d101      	bne.n	8008c84 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008c80:	2301      	movs	r3, #1
 8008c82:	e000      	b.n	8008c86 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
	...

08008c90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c90:	b084      	sub	sp, #16
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b086      	sub	sp, #24
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
 8008c9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008c9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008caa:	2300      	movs	r3, #0
 8008cac:	613b      	str	r3, [r7, #16]
 8008cae:	e009      	b.n	8008cc4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	3340      	adds	r3, #64	; 0x40
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	4413      	add	r3, r2
 8008cba:	2200      	movs	r2, #0
 8008cbc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	613b      	str	r3, [r7, #16]
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	2b0e      	cmp	r3, #14
 8008cc8:	d9f2      	bls.n	8008cb0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d11c      	bne.n	8008d0a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	68fa      	ldr	r2, [r7, #12]
 8008cda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cde:	f043 0302 	orr.w	r3, r3, #2
 8008ce2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	601a      	str	r2, [r3, #0]
 8008d08:	e005      	b.n	8008d16 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	2300      	movs	r3, #0
 8008d20:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d28:	4619      	mov	r1, r3
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d30:	461a      	mov	r2, r3
 8008d32:	680b      	ldr	r3, [r1, #0]
 8008d34:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d10c      	bne.n	8008d56 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d104      	bne.n	8008d4c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008d42:	2100      	movs	r1, #0
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 f961 	bl	800900c <USB_SetDevSpeed>
 8008d4a:	e008      	b.n	8008d5e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008d4c:	2101      	movs	r1, #1
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 f95c 	bl	800900c <USB_SetDevSpeed>
 8008d54:	e003      	b.n	8008d5e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008d56:	2103      	movs	r1, #3
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 f957 	bl	800900c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008d5e:	2110      	movs	r1, #16
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 f8f3 	bl	8008f4c <USB_FlushTxFifo>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d001      	beq.n	8008d70 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 f91d 	bl	8008fb0 <USB_FlushRxFifo>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d001      	beq.n	8008d80 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d86:	461a      	mov	r2, r3
 8008d88:	2300      	movs	r3, #0
 8008d8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d92:	461a      	mov	r2, r3
 8008d94:	2300      	movs	r3, #0
 8008d96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d9e:	461a      	mov	r2, r3
 8008da0:	2300      	movs	r3, #0
 8008da2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008da4:	2300      	movs	r3, #0
 8008da6:	613b      	str	r3, [r7, #16]
 8008da8:	e043      	b.n	8008e32 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	015a      	lsls	r2, r3, #5
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	4413      	add	r3, r2
 8008db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008dbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008dc0:	d118      	bne.n	8008df4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10a      	bne.n	8008dde <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	015a      	lsls	r2, r3, #5
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	4413      	add	r3, r2
 8008dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008dda:	6013      	str	r3, [r2, #0]
 8008ddc:	e013      	b.n	8008e06 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	015a      	lsls	r2, r3, #5
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	4413      	add	r3, r2
 8008de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dea:	461a      	mov	r2, r3
 8008dec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008df0:	6013      	str	r3, [r2, #0]
 8008df2:	e008      	b.n	8008e06 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	015a      	lsls	r2, r3, #5
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e00:	461a      	mov	r2, r3
 8008e02:	2300      	movs	r3, #0
 8008e04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	015a      	lsls	r2, r3, #5
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e12:	461a      	mov	r2, r3
 8008e14:	2300      	movs	r3, #0
 8008e16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	015a      	lsls	r2, r3, #5
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	4413      	add	r3, r2
 8008e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e24:	461a      	mov	r2, r3
 8008e26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	613b      	str	r3, [r7, #16]
 8008e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e34:	693a      	ldr	r2, [r7, #16]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d3b7      	bcc.n	8008daa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	613b      	str	r3, [r7, #16]
 8008e3e:	e043      	b.n	8008ec8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	015a      	lsls	r2, r3, #5
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	4413      	add	r3, r2
 8008e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e56:	d118      	bne.n	8008e8a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d10a      	bne.n	8008e74 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	015a      	lsls	r2, r3, #5
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	4413      	add	r3, r2
 8008e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e70:	6013      	str	r3, [r2, #0]
 8008e72:	e013      	b.n	8008e9c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	015a      	lsls	r2, r3, #5
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e80:	461a      	mov	r2, r3
 8008e82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e86:	6013      	str	r3, [r2, #0]
 8008e88:	e008      	b.n	8008e9c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	015a      	lsls	r2, r3, #5
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	4413      	add	r3, r2
 8008e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e96:	461a      	mov	r2, r3
 8008e98:	2300      	movs	r3, #0
 8008e9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	015a      	lsls	r2, r3, #5
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	2300      	movs	r3, #0
 8008eac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	015a      	lsls	r2, r3, #5
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	4413      	add	r3, r2
 8008eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eba:	461a      	mov	r2, r3
 8008ebc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ec0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	613b      	str	r3, [r7, #16]
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eca:	693a      	ldr	r2, [r7, #16]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d3b7      	bcc.n	8008e40 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ed6:	691b      	ldr	r3, [r3, #16]
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ede:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ee2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008ef0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d105      	bne.n	8008f04 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	699b      	ldr	r3, [r3, #24]
 8008efc:	f043 0210 	orr.w	r2, r3, #16
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	699a      	ldr	r2, [r3, #24]
 8008f08:	4b0e      	ldr	r3, [pc, #56]	; (8008f44 <USB_DevInit+0x2b4>)
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d005      	beq.n	8008f22 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	699b      	ldr	r3, [r3, #24]
 8008f1a:	f043 0208 	orr.w	r2, r3, #8
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d105      	bne.n	8008f34 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	699a      	ldr	r2, [r3, #24]
 8008f2c:	4b06      	ldr	r3, [pc, #24]	; (8008f48 <USB_DevInit+0x2b8>)
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3718      	adds	r7, #24
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f40:	b004      	add	sp, #16
 8008f42:	4770      	bx	lr
 8008f44:	803c3800 	.word	0x803c3800
 8008f48:	40000004 	.word	0x40000004

08008f4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008f56:	2300      	movs	r3, #0
 8008f58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	60fb      	str	r3, [r7, #12]
 8008f60:	4a12      	ldr	r2, [pc, #72]	; (8008fac <USB_FlushTxFifo+0x60>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d901      	bls.n	8008f6a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008f66:	2303      	movs	r3, #3
 8008f68:	e01a      	b.n	8008fa0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	daf3      	bge.n	8008f5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008f72:	2300      	movs	r3, #0
 8008f74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	019b      	lsls	r3, r3, #6
 8008f7a:	f043 0220 	orr.w	r2, r3, #32
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	3301      	adds	r3, #1
 8008f86:	60fb      	str	r3, [r7, #12]
 8008f88:	4a08      	ldr	r2, [pc, #32]	; (8008fac <USB_FlushTxFifo+0x60>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d901      	bls.n	8008f92 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	e006      	b.n	8008fa0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	f003 0320 	and.w	r3, r3, #32
 8008f9a:	2b20      	cmp	r3, #32
 8008f9c:	d0f1      	beq.n	8008f82 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3714      	adds	r7, #20
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr
 8008fac:	00030d40 	.word	0x00030d40

08008fb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b085      	sub	sp, #20
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	60fb      	str	r3, [r7, #12]
 8008fc2:	4a11      	ldr	r2, [pc, #68]	; (8009008 <USB_FlushRxFifo+0x58>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d901      	bls.n	8008fcc <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8008fc8:	2303      	movs	r3, #3
 8008fca:	e017      	b.n	8008ffc <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	daf3      	bge.n	8008fbc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2210      	movs	r2, #16
 8008fdc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	60fb      	str	r3, [r7, #12]
 8008fe4:	4a08      	ldr	r2, [pc, #32]	; (8009008 <USB_FlushRxFifo+0x58>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d901      	bls.n	8008fee <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e006      	b.n	8008ffc <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	691b      	ldr	r3, [r3, #16]
 8008ff2:	f003 0310 	and.w	r3, r3, #16
 8008ff6:	2b10      	cmp	r3, #16
 8008ff8:	d0f1      	beq.n	8008fde <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3714      	adds	r7, #20
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr
 8009008:	00030d40 	.word	0x00030d40

0800900c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800900c:	b480      	push	{r7}
 800900e:	b085      	sub	sp, #20
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	460b      	mov	r3, r1
 8009016:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	78fb      	ldrb	r3, [r7, #3]
 8009026:	68f9      	ldr	r1, [r7, #12]
 8009028:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800902c:	4313      	orrs	r3, r2
 800902e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3714      	adds	r7, #20
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr

0800903e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800903e:	b480      	push	{r7}
 8009040:	b085      	sub	sp, #20
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009058:	f023 0303 	bic.w	r3, r3, #3
 800905c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800906c:	f043 0302 	orr.w	r3, r3, #2
 8009070:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3714      	adds	r7, #20
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	695b      	ldr	r3, [r3, #20]
 800908c:	f003 0301 	and.w	r3, r3, #1
}
 8009090:	4618      	mov	r0, r3
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr

0800909c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80090a4:	2300      	movs	r3, #0
 80090a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	3301      	adds	r3, #1
 80090ac:	60fb      	str	r3, [r7, #12]
 80090ae:	4a13      	ldr	r2, [pc, #76]	; (80090fc <USB_CoreReset+0x60>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d901      	bls.n	80090b8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80090b4:	2303      	movs	r3, #3
 80090b6:	e01a      	b.n	80090ee <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	daf3      	bge.n	80090a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80090c0:	2300      	movs	r3, #0
 80090c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	f043 0201 	orr.w	r2, r3, #1
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	3301      	adds	r3, #1
 80090d4:	60fb      	str	r3, [r7, #12]
 80090d6:	4a09      	ldr	r2, [pc, #36]	; (80090fc <USB_CoreReset+0x60>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d901      	bls.n	80090e0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80090dc:	2303      	movs	r3, #3
 80090de:	e006      	b.n	80090ee <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	691b      	ldr	r3, [r3, #16]
 80090e4:	f003 0301 	and.w	r3, r3, #1
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d0f1      	beq.n	80090d0 <USB_CoreReset+0x34>

  return HAL_OK;
 80090ec:	2300      	movs	r3, #0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3714      	adds	r7, #20
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	00030d40 	.word	0x00030d40

08009100 <__errno>:
 8009100:	4b01      	ldr	r3, [pc, #4]	; (8009108 <__errno+0x8>)
 8009102:	6818      	ldr	r0, [r3, #0]
 8009104:	4770      	bx	lr
 8009106:	bf00      	nop
 8009108:	24000010 	.word	0x24000010

0800910c <__libc_init_array>:
 800910c:	b570      	push	{r4, r5, r6, lr}
 800910e:	4d0d      	ldr	r5, [pc, #52]	; (8009144 <__libc_init_array+0x38>)
 8009110:	4c0d      	ldr	r4, [pc, #52]	; (8009148 <__libc_init_array+0x3c>)
 8009112:	1b64      	subs	r4, r4, r5
 8009114:	10a4      	asrs	r4, r4, #2
 8009116:	2600      	movs	r6, #0
 8009118:	42a6      	cmp	r6, r4
 800911a:	d109      	bne.n	8009130 <__libc_init_array+0x24>
 800911c:	4d0b      	ldr	r5, [pc, #44]	; (800914c <__libc_init_array+0x40>)
 800911e:	4c0c      	ldr	r4, [pc, #48]	; (8009150 <__libc_init_array+0x44>)
 8009120:	f000 ff76 	bl	800a010 <_init>
 8009124:	1b64      	subs	r4, r4, r5
 8009126:	10a4      	asrs	r4, r4, #2
 8009128:	2600      	movs	r6, #0
 800912a:	42a6      	cmp	r6, r4
 800912c:	d105      	bne.n	800913a <__libc_init_array+0x2e>
 800912e:	bd70      	pop	{r4, r5, r6, pc}
 8009130:	f855 3b04 	ldr.w	r3, [r5], #4
 8009134:	4798      	blx	r3
 8009136:	3601      	adds	r6, #1
 8009138:	e7ee      	b.n	8009118 <__libc_init_array+0xc>
 800913a:	f855 3b04 	ldr.w	r3, [r5], #4
 800913e:	4798      	blx	r3
 8009140:	3601      	adds	r6, #1
 8009142:	e7f2      	b.n	800912a <__libc_init_array+0x1e>
 8009144:	0800a104 	.word	0x0800a104
 8009148:	0800a104 	.word	0x0800a104
 800914c:	0800a104 	.word	0x0800a104
 8009150:	0800a108 	.word	0x0800a108

08009154 <memset>:
 8009154:	4402      	add	r2, r0
 8009156:	4603      	mov	r3, r0
 8009158:	4293      	cmp	r3, r2
 800915a:	d100      	bne.n	800915e <memset+0xa>
 800915c:	4770      	bx	lr
 800915e:	f803 1b01 	strb.w	r1, [r3], #1
 8009162:	e7f9      	b.n	8009158 <memset+0x4>

08009164 <iprintf>:
 8009164:	b40f      	push	{r0, r1, r2, r3}
 8009166:	4b0a      	ldr	r3, [pc, #40]	; (8009190 <iprintf+0x2c>)
 8009168:	b513      	push	{r0, r1, r4, lr}
 800916a:	681c      	ldr	r4, [r3, #0]
 800916c:	b124      	cbz	r4, 8009178 <iprintf+0x14>
 800916e:	69a3      	ldr	r3, [r4, #24]
 8009170:	b913      	cbnz	r3, 8009178 <iprintf+0x14>
 8009172:	4620      	mov	r0, r4
 8009174:	f000 f866 	bl	8009244 <__sinit>
 8009178:	ab05      	add	r3, sp, #20
 800917a:	9a04      	ldr	r2, [sp, #16]
 800917c:	68a1      	ldr	r1, [r4, #8]
 800917e:	9301      	str	r3, [sp, #4]
 8009180:	4620      	mov	r0, r4
 8009182:	f000 f983 	bl	800948c <_vfiprintf_r>
 8009186:	b002      	add	sp, #8
 8009188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800918c:	b004      	add	sp, #16
 800918e:	4770      	bx	lr
 8009190:	24000010 	.word	0x24000010

08009194 <std>:
 8009194:	2300      	movs	r3, #0
 8009196:	b510      	push	{r4, lr}
 8009198:	4604      	mov	r4, r0
 800919a:	e9c0 3300 	strd	r3, r3, [r0]
 800919e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091a2:	6083      	str	r3, [r0, #8]
 80091a4:	8181      	strh	r1, [r0, #12]
 80091a6:	6643      	str	r3, [r0, #100]	; 0x64
 80091a8:	81c2      	strh	r2, [r0, #14]
 80091aa:	6183      	str	r3, [r0, #24]
 80091ac:	4619      	mov	r1, r3
 80091ae:	2208      	movs	r2, #8
 80091b0:	305c      	adds	r0, #92	; 0x5c
 80091b2:	f7ff ffcf 	bl	8009154 <memset>
 80091b6:	4b05      	ldr	r3, [pc, #20]	; (80091cc <std+0x38>)
 80091b8:	6263      	str	r3, [r4, #36]	; 0x24
 80091ba:	4b05      	ldr	r3, [pc, #20]	; (80091d0 <std+0x3c>)
 80091bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80091be:	4b05      	ldr	r3, [pc, #20]	; (80091d4 <std+0x40>)
 80091c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80091c2:	4b05      	ldr	r3, [pc, #20]	; (80091d8 <std+0x44>)
 80091c4:	6224      	str	r4, [r4, #32]
 80091c6:	6323      	str	r3, [r4, #48]	; 0x30
 80091c8:	bd10      	pop	{r4, pc}
 80091ca:	bf00      	nop
 80091cc:	08009a35 	.word	0x08009a35
 80091d0:	08009a57 	.word	0x08009a57
 80091d4:	08009a8f 	.word	0x08009a8f
 80091d8:	08009ab3 	.word	0x08009ab3

080091dc <_cleanup_r>:
 80091dc:	4901      	ldr	r1, [pc, #4]	; (80091e4 <_cleanup_r+0x8>)
 80091de:	f000 b8af 	b.w	8009340 <_fwalk_reent>
 80091e2:	bf00      	nop
 80091e4:	08009d8d 	.word	0x08009d8d

080091e8 <__sfmoreglue>:
 80091e8:	b570      	push	{r4, r5, r6, lr}
 80091ea:	1e4a      	subs	r2, r1, #1
 80091ec:	2568      	movs	r5, #104	; 0x68
 80091ee:	4355      	muls	r5, r2
 80091f0:	460e      	mov	r6, r1
 80091f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80091f6:	f000 f8c5 	bl	8009384 <_malloc_r>
 80091fa:	4604      	mov	r4, r0
 80091fc:	b140      	cbz	r0, 8009210 <__sfmoreglue+0x28>
 80091fe:	2100      	movs	r1, #0
 8009200:	e9c0 1600 	strd	r1, r6, [r0]
 8009204:	300c      	adds	r0, #12
 8009206:	60a0      	str	r0, [r4, #8]
 8009208:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800920c:	f7ff ffa2 	bl	8009154 <memset>
 8009210:	4620      	mov	r0, r4
 8009212:	bd70      	pop	{r4, r5, r6, pc}

08009214 <__sfp_lock_acquire>:
 8009214:	4801      	ldr	r0, [pc, #4]	; (800921c <__sfp_lock_acquire+0x8>)
 8009216:	f000 b8b3 	b.w	8009380 <__retarget_lock_acquire_recursive>
 800921a:	bf00      	nop
 800921c:	24000740 	.word	0x24000740

08009220 <__sfp_lock_release>:
 8009220:	4801      	ldr	r0, [pc, #4]	; (8009228 <__sfp_lock_release+0x8>)
 8009222:	f000 b8ae 	b.w	8009382 <__retarget_lock_release_recursive>
 8009226:	bf00      	nop
 8009228:	24000740 	.word	0x24000740

0800922c <__sinit_lock_acquire>:
 800922c:	4801      	ldr	r0, [pc, #4]	; (8009234 <__sinit_lock_acquire+0x8>)
 800922e:	f000 b8a7 	b.w	8009380 <__retarget_lock_acquire_recursive>
 8009232:	bf00      	nop
 8009234:	2400073b 	.word	0x2400073b

08009238 <__sinit_lock_release>:
 8009238:	4801      	ldr	r0, [pc, #4]	; (8009240 <__sinit_lock_release+0x8>)
 800923a:	f000 b8a2 	b.w	8009382 <__retarget_lock_release_recursive>
 800923e:	bf00      	nop
 8009240:	2400073b 	.word	0x2400073b

08009244 <__sinit>:
 8009244:	b510      	push	{r4, lr}
 8009246:	4604      	mov	r4, r0
 8009248:	f7ff fff0 	bl	800922c <__sinit_lock_acquire>
 800924c:	69a3      	ldr	r3, [r4, #24]
 800924e:	b11b      	cbz	r3, 8009258 <__sinit+0x14>
 8009250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009254:	f7ff bff0 	b.w	8009238 <__sinit_lock_release>
 8009258:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800925c:	6523      	str	r3, [r4, #80]	; 0x50
 800925e:	4b13      	ldr	r3, [pc, #76]	; (80092ac <__sinit+0x68>)
 8009260:	4a13      	ldr	r2, [pc, #76]	; (80092b0 <__sinit+0x6c>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	62a2      	str	r2, [r4, #40]	; 0x28
 8009266:	42a3      	cmp	r3, r4
 8009268:	bf04      	itt	eq
 800926a:	2301      	moveq	r3, #1
 800926c:	61a3      	streq	r3, [r4, #24]
 800926e:	4620      	mov	r0, r4
 8009270:	f000 f820 	bl	80092b4 <__sfp>
 8009274:	6060      	str	r0, [r4, #4]
 8009276:	4620      	mov	r0, r4
 8009278:	f000 f81c 	bl	80092b4 <__sfp>
 800927c:	60a0      	str	r0, [r4, #8]
 800927e:	4620      	mov	r0, r4
 8009280:	f000 f818 	bl	80092b4 <__sfp>
 8009284:	2200      	movs	r2, #0
 8009286:	60e0      	str	r0, [r4, #12]
 8009288:	2104      	movs	r1, #4
 800928a:	6860      	ldr	r0, [r4, #4]
 800928c:	f7ff ff82 	bl	8009194 <std>
 8009290:	68a0      	ldr	r0, [r4, #8]
 8009292:	2201      	movs	r2, #1
 8009294:	2109      	movs	r1, #9
 8009296:	f7ff ff7d 	bl	8009194 <std>
 800929a:	68e0      	ldr	r0, [r4, #12]
 800929c:	2202      	movs	r2, #2
 800929e:	2112      	movs	r1, #18
 80092a0:	f7ff ff78 	bl	8009194 <std>
 80092a4:	2301      	movs	r3, #1
 80092a6:	61a3      	str	r3, [r4, #24]
 80092a8:	e7d2      	b.n	8009250 <__sinit+0xc>
 80092aa:	bf00      	nop
 80092ac:	0800a064 	.word	0x0800a064
 80092b0:	080091dd 	.word	0x080091dd

080092b4 <__sfp>:
 80092b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b6:	4607      	mov	r7, r0
 80092b8:	f7ff ffac 	bl	8009214 <__sfp_lock_acquire>
 80092bc:	4b1e      	ldr	r3, [pc, #120]	; (8009338 <__sfp+0x84>)
 80092be:	681e      	ldr	r6, [r3, #0]
 80092c0:	69b3      	ldr	r3, [r6, #24]
 80092c2:	b913      	cbnz	r3, 80092ca <__sfp+0x16>
 80092c4:	4630      	mov	r0, r6
 80092c6:	f7ff ffbd 	bl	8009244 <__sinit>
 80092ca:	3648      	adds	r6, #72	; 0x48
 80092cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80092d0:	3b01      	subs	r3, #1
 80092d2:	d503      	bpl.n	80092dc <__sfp+0x28>
 80092d4:	6833      	ldr	r3, [r6, #0]
 80092d6:	b30b      	cbz	r3, 800931c <__sfp+0x68>
 80092d8:	6836      	ldr	r6, [r6, #0]
 80092da:	e7f7      	b.n	80092cc <__sfp+0x18>
 80092dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80092e0:	b9d5      	cbnz	r5, 8009318 <__sfp+0x64>
 80092e2:	4b16      	ldr	r3, [pc, #88]	; (800933c <__sfp+0x88>)
 80092e4:	60e3      	str	r3, [r4, #12]
 80092e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80092ea:	6665      	str	r5, [r4, #100]	; 0x64
 80092ec:	f000 f847 	bl	800937e <__retarget_lock_init_recursive>
 80092f0:	f7ff ff96 	bl	8009220 <__sfp_lock_release>
 80092f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80092f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80092fc:	6025      	str	r5, [r4, #0]
 80092fe:	61a5      	str	r5, [r4, #24]
 8009300:	2208      	movs	r2, #8
 8009302:	4629      	mov	r1, r5
 8009304:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009308:	f7ff ff24 	bl	8009154 <memset>
 800930c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009310:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009314:	4620      	mov	r0, r4
 8009316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009318:	3468      	adds	r4, #104	; 0x68
 800931a:	e7d9      	b.n	80092d0 <__sfp+0x1c>
 800931c:	2104      	movs	r1, #4
 800931e:	4638      	mov	r0, r7
 8009320:	f7ff ff62 	bl	80091e8 <__sfmoreglue>
 8009324:	4604      	mov	r4, r0
 8009326:	6030      	str	r0, [r6, #0]
 8009328:	2800      	cmp	r0, #0
 800932a:	d1d5      	bne.n	80092d8 <__sfp+0x24>
 800932c:	f7ff ff78 	bl	8009220 <__sfp_lock_release>
 8009330:	230c      	movs	r3, #12
 8009332:	603b      	str	r3, [r7, #0]
 8009334:	e7ee      	b.n	8009314 <__sfp+0x60>
 8009336:	bf00      	nop
 8009338:	0800a064 	.word	0x0800a064
 800933c:	ffff0001 	.word	0xffff0001

08009340 <_fwalk_reent>:
 8009340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009344:	4606      	mov	r6, r0
 8009346:	4688      	mov	r8, r1
 8009348:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800934c:	2700      	movs	r7, #0
 800934e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009352:	f1b9 0901 	subs.w	r9, r9, #1
 8009356:	d505      	bpl.n	8009364 <_fwalk_reent+0x24>
 8009358:	6824      	ldr	r4, [r4, #0]
 800935a:	2c00      	cmp	r4, #0
 800935c:	d1f7      	bne.n	800934e <_fwalk_reent+0xe>
 800935e:	4638      	mov	r0, r7
 8009360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009364:	89ab      	ldrh	r3, [r5, #12]
 8009366:	2b01      	cmp	r3, #1
 8009368:	d907      	bls.n	800937a <_fwalk_reent+0x3a>
 800936a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800936e:	3301      	adds	r3, #1
 8009370:	d003      	beq.n	800937a <_fwalk_reent+0x3a>
 8009372:	4629      	mov	r1, r5
 8009374:	4630      	mov	r0, r6
 8009376:	47c0      	blx	r8
 8009378:	4307      	orrs	r7, r0
 800937a:	3568      	adds	r5, #104	; 0x68
 800937c:	e7e9      	b.n	8009352 <_fwalk_reent+0x12>

0800937e <__retarget_lock_init_recursive>:
 800937e:	4770      	bx	lr

08009380 <__retarget_lock_acquire_recursive>:
 8009380:	4770      	bx	lr

08009382 <__retarget_lock_release_recursive>:
 8009382:	4770      	bx	lr

08009384 <_malloc_r>:
 8009384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009386:	1ccd      	adds	r5, r1, #3
 8009388:	f025 0503 	bic.w	r5, r5, #3
 800938c:	3508      	adds	r5, #8
 800938e:	2d0c      	cmp	r5, #12
 8009390:	bf38      	it	cc
 8009392:	250c      	movcc	r5, #12
 8009394:	2d00      	cmp	r5, #0
 8009396:	4606      	mov	r6, r0
 8009398:	db01      	blt.n	800939e <_malloc_r+0x1a>
 800939a:	42a9      	cmp	r1, r5
 800939c:	d903      	bls.n	80093a6 <_malloc_r+0x22>
 800939e:	230c      	movs	r3, #12
 80093a0:	6033      	str	r3, [r6, #0]
 80093a2:	2000      	movs	r0, #0
 80093a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093a6:	f000 fda3 	bl	8009ef0 <__malloc_lock>
 80093aa:	4921      	ldr	r1, [pc, #132]	; (8009430 <_malloc_r+0xac>)
 80093ac:	680a      	ldr	r2, [r1, #0]
 80093ae:	4614      	mov	r4, r2
 80093b0:	b99c      	cbnz	r4, 80093da <_malloc_r+0x56>
 80093b2:	4f20      	ldr	r7, [pc, #128]	; (8009434 <_malloc_r+0xb0>)
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	b923      	cbnz	r3, 80093c2 <_malloc_r+0x3e>
 80093b8:	4621      	mov	r1, r4
 80093ba:	4630      	mov	r0, r6
 80093bc:	f000 fb2a 	bl	8009a14 <_sbrk_r>
 80093c0:	6038      	str	r0, [r7, #0]
 80093c2:	4629      	mov	r1, r5
 80093c4:	4630      	mov	r0, r6
 80093c6:	f000 fb25 	bl	8009a14 <_sbrk_r>
 80093ca:	1c43      	adds	r3, r0, #1
 80093cc:	d123      	bne.n	8009416 <_malloc_r+0x92>
 80093ce:	230c      	movs	r3, #12
 80093d0:	6033      	str	r3, [r6, #0]
 80093d2:	4630      	mov	r0, r6
 80093d4:	f000 fd92 	bl	8009efc <__malloc_unlock>
 80093d8:	e7e3      	b.n	80093a2 <_malloc_r+0x1e>
 80093da:	6823      	ldr	r3, [r4, #0]
 80093dc:	1b5b      	subs	r3, r3, r5
 80093de:	d417      	bmi.n	8009410 <_malloc_r+0x8c>
 80093e0:	2b0b      	cmp	r3, #11
 80093e2:	d903      	bls.n	80093ec <_malloc_r+0x68>
 80093e4:	6023      	str	r3, [r4, #0]
 80093e6:	441c      	add	r4, r3
 80093e8:	6025      	str	r5, [r4, #0]
 80093ea:	e004      	b.n	80093f6 <_malloc_r+0x72>
 80093ec:	6863      	ldr	r3, [r4, #4]
 80093ee:	42a2      	cmp	r2, r4
 80093f0:	bf0c      	ite	eq
 80093f2:	600b      	streq	r3, [r1, #0]
 80093f4:	6053      	strne	r3, [r2, #4]
 80093f6:	4630      	mov	r0, r6
 80093f8:	f000 fd80 	bl	8009efc <__malloc_unlock>
 80093fc:	f104 000b 	add.w	r0, r4, #11
 8009400:	1d23      	adds	r3, r4, #4
 8009402:	f020 0007 	bic.w	r0, r0, #7
 8009406:	1ac2      	subs	r2, r0, r3
 8009408:	d0cc      	beq.n	80093a4 <_malloc_r+0x20>
 800940a:	1a1b      	subs	r3, r3, r0
 800940c:	50a3      	str	r3, [r4, r2]
 800940e:	e7c9      	b.n	80093a4 <_malloc_r+0x20>
 8009410:	4622      	mov	r2, r4
 8009412:	6864      	ldr	r4, [r4, #4]
 8009414:	e7cc      	b.n	80093b0 <_malloc_r+0x2c>
 8009416:	1cc4      	adds	r4, r0, #3
 8009418:	f024 0403 	bic.w	r4, r4, #3
 800941c:	42a0      	cmp	r0, r4
 800941e:	d0e3      	beq.n	80093e8 <_malloc_r+0x64>
 8009420:	1a21      	subs	r1, r4, r0
 8009422:	4630      	mov	r0, r6
 8009424:	f000 faf6 	bl	8009a14 <_sbrk_r>
 8009428:	3001      	adds	r0, #1
 800942a:	d1dd      	bne.n	80093e8 <_malloc_r+0x64>
 800942c:	e7cf      	b.n	80093ce <_malloc_r+0x4a>
 800942e:	bf00      	nop
 8009430:	2400015c 	.word	0x2400015c
 8009434:	24000160 	.word	0x24000160

08009438 <__sfputc_r>:
 8009438:	6893      	ldr	r3, [r2, #8]
 800943a:	3b01      	subs	r3, #1
 800943c:	2b00      	cmp	r3, #0
 800943e:	b410      	push	{r4}
 8009440:	6093      	str	r3, [r2, #8]
 8009442:	da08      	bge.n	8009456 <__sfputc_r+0x1e>
 8009444:	6994      	ldr	r4, [r2, #24]
 8009446:	42a3      	cmp	r3, r4
 8009448:	db01      	blt.n	800944e <__sfputc_r+0x16>
 800944a:	290a      	cmp	r1, #10
 800944c:	d103      	bne.n	8009456 <__sfputc_r+0x1e>
 800944e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009452:	f000 bb33 	b.w	8009abc <__swbuf_r>
 8009456:	6813      	ldr	r3, [r2, #0]
 8009458:	1c58      	adds	r0, r3, #1
 800945a:	6010      	str	r0, [r2, #0]
 800945c:	7019      	strb	r1, [r3, #0]
 800945e:	4608      	mov	r0, r1
 8009460:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009464:	4770      	bx	lr

08009466 <__sfputs_r>:
 8009466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009468:	4606      	mov	r6, r0
 800946a:	460f      	mov	r7, r1
 800946c:	4614      	mov	r4, r2
 800946e:	18d5      	adds	r5, r2, r3
 8009470:	42ac      	cmp	r4, r5
 8009472:	d101      	bne.n	8009478 <__sfputs_r+0x12>
 8009474:	2000      	movs	r0, #0
 8009476:	e007      	b.n	8009488 <__sfputs_r+0x22>
 8009478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800947c:	463a      	mov	r2, r7
 800947e:	4630      	mov	r0, r6
 8009480:	f7ff ffda 	bl	8009438 <__sfputc_r>
 8009484:	1c43      	adds	r3, r0, #1
 8009486:	d1f3      	bne.n	8009470 <__sfputs_r+0xa>
 8009488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800948c <_vfiprintf_r>:
 800948c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009490:	460d      	mov	r5, r1
 8009492:	b09d      	sub	sp, #116	; 0x74
 8009494:	4614      	mov	r4, r2
 8009496:	4698      	mov	r8, r3
 8009498:	4606      	mov	r6, r0
 800949a:	b118      	cbz	r0, 80094a4 <_vfiprintf_r+0x18>
 800949c:	6983      	ldr	r3, [r0, #24]
 800949e:	b90b      	cbnz	r3, 80094a4 <_vfiprintf_r+0x18>
 80094a0:	f7ff fed0 	bl	8009244 <__sinit>
 80094a4:	4b89      	ldr	r3, [pc, #548]	; (80096cc <_vfiprintf_r+0x240>)
 80094a6:	429d      	cmp	r5, r3
 80094a8:	d11b      	bne.n	80094e2 <_vfiprintf_r+0x56>
 80094aa:	6875      	ldr	r5, [r6, #4]
 80094ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094ae:	07d9      	lsls	r1, r3, #31
 80094b0:	d405      	bmi.n	80094be <_vfiprintf_r+0x32>
 80094b2:	89ab      	ldrh	r3, [r5, #12]
 80094b4:	059a      	lsls	r2, r3, #22
 80094b6:	d402      	bmi.n	80094be <_vfiprintf_r+0x32>
 80094b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094ba:	f7ff ff61 	bl	8009380 <__retarget_lock_acquire_recursive>
 80094be:	89ab      	ldrh	r3, [r5, #12]
 80094c0:	071b      	lsls	r3, r3, #28
 80094c2:	d501      	bpl.n	80094c8 <_vfiprintf_r+0x3c>
 80094c4:	692b      	ldr	r3, [r5, #16]
 80094c6:	b9eb      	cbnz	r3, 8009504 <_vfiprintf_r+0x78>
 80094c8:	4629      	mov	r1, r5
 80094ca:	4630      	mov	r0, r6
 80094cc:	f000 fb5a 	bl	8009b84 <__swsetup_r>
 80094d0:	b1c0      	cbz	r0, 8009504 <_vfiprintf_r+0x78>
 80094d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094d4:	07dc      	lsls	r4, r3, #31
 80094d6:	d50e      	bpl.n	80094f6 <_vfiprintf_r+0x6a>
 80094d8:	f04f 30ff 	mov.w	r0, #4294967295
 80094dc:	b01d      	add	sp, #116	; 0x74
 80094de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094e2:	4b7b      	ldr	r3, [pc, #492]	; (80096d0 <_vfiprintf_r+0x244>)
 80094e4:	429d      	cmp	r5, r3
 80094e6:	d101      	bne.n	80094ec <_vfiprintf_r+0x60>
 80094e8:	68b5      	ldr	r5, [r6, #8]
 80094ea:	e7df      	b.n	80094ac <_vfiprintf_r+0x20>
 80094ec:	4b79      	ldr	r3, [pc, #484]	; (80096d4 <_vfiprintf_r+0x248>)
 80094ee:	429d      	cmp	r5, r3
 80094f0:	bf08      	it	eq
 80094f2:	68f5      	ldreq	r5, [r6, #12]
 80094f4:	e7da      	b.n	80094ac <_vfiprintf_r+0x20>
 80094f6:	89ab      	ldrh	r3, [r5, #12]
 80094f8:	0598      	lsls	r0, r3, #22
 80094fa:	d4ed      	bmi.n	80094d8 <_vfiprintf_r+0x4c>
 80094fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094fe:	f7ff ff40 	bl	8009382 <__retarget_lock_release_recursive>
 8009502:	e7e9      	b.n	80094d8 <_vfiprintf_r+0x4c>
 8009504:	2300      	movs	r3, #0
 8009506:	9309      	str	r3, [sp, #36]	; 0x24
 8009508:	2320      	movs	r3, #32
 800950a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800950e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009512:	2330      	movs	r3, #48	; 0x30
 8009514:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80096d8 <_vfiprintf_r+0x24c>
 8009518:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800951c:	f04f 0901 	mov.w	r9, #1
 8009520:	4623      	mov	r3, r4
 8009522:	469a      	mov	sl, r3
 8009524:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009528:	b10a      	cbz	r2, 800952e <_vfiprintf_r+0xa2>
 800952a:	2a25      	cmp	r2, #37	; 0x25
 800952c:	d1f9      	bne.n	8009522 <_vfiprintf_r+0x96>
 800952e:	ebba 0b04 	subs.w	fp, sl, r4
 8009532:	d00b      	beq.n	800954c <_vfiprintf_r+0xc0>
 8009534:	465b      	mov	r3, fp
 8009536:	4622      	mov	r2, r4
 8009538:	4629      	mov	r1, r5
 800953a:	4630      	mov	r0, r6
 800953c:	f7ff ff93 	bl	8009466 <__sfputs_r>
 8009540:	3001      	adds	r0, #1
 8009542:	f000 80aa 	beq.w	800969a <_vfiprintf_r+0x20e>
 8009546:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009548:	445a      	add	r2, fp
 800954a:	9209      	str	r2, [sp, #36]	; 0x24
 800954c:	f89a 3000 	ldrb.w	r3, [sl]
 8009550:	2b00      	cmp	r3, #0
 8009552:	f000 80a2 	beq.w	800969a <_vfiprintf_r+0x20e>
 8009556:	2300      	movs	r3, #0
 8009558:	f04f 32ff 	mov.w	r2, #4294967295
 800955c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009560:	f10a 0a01 	add.w	sl, sl, #1
 8009564:	9304      	str	r3, [sp, #16]
 8009566:	9307      	str	r3, [sp, #28]
 8009568:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800956c:	931a      	str	r3, [sp, #104]	; 0x68
 800956e:	4654      	mov	r4, sl
 8009570:	2205      	movs	r2, #5
 8009572:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009576:	4858      	ldr	r0, [pc, #352]	; (80096d8 <_vfiprintf_r+0x24c>)
 8009578:	f7f6 feb2 	bl	80002e0 <memchr>
 800957c:	9a04      	ldr	r2, [sp, #16]
 800957e:	b9d8      	cbnz	r0, 80095b8 <_vfiprintf_r+0x12c>
 8009580:	06d1      	lsls	r1, r2, #27
 8009582:	bf44      	itt	mi
 8009584:	2320      	movmi	r3, #32
 8009586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800958a:	0713      	lsls	r3, r2, #28
 800958c:	bf44      	itt	mi
 800958e:	232b      	movmi	r3, #43	; 0x2b
 8009590:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009594:	f89a 3000 	ldrb.w	r3, [sl]
 8009598:	2b2a      	cmp	r3, #42	; 0x2a
 800959a:	d015      	beq.n	80095c8 <_vfiprintf_r+0x13c>
 800959c:	9a07      	ldr	r2, [sp, #28]
 800959e:	4654      	mov	r4, sl
 80095a0:	2000      	movs	r0, #0
 80095a2:	f04f 0c0a 	mov.w	ip, #10
 80095a6:	4621      	mov	r1, r4
 80095a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095ac:	3b30      	subs	r3, #48	; 0x30
 80095ae:	2b09      	cmp	r3, #9
 80095b0:	d94e      	bls.n	8009650 <_vfiprintf_r+0x1c4>
 80095b2:	b1b0      	cbz	r0, 80095e2 <_vfiprintf_r+0x156>
 80095b4:	9207      	str	r2, [sp, #28]
 80095b6:	e014      	b.n	80095e2 <_vfiprintf_r+0x156>
 80095b8:	eba0 0308 	sub.w	r3, r0, r8
 80095bc:	fa09 f303 	lsl.w	r3, r9, r3
 80095c0:	4313      	orrs	r3, r2
 80095c2:	9304      	str	r3, [sp, #16]
 80095c4:	46a2      	mov	sl, r4
 80095c6:	e7d2      	b.n	800956e <_vfiprintf_r+0xe2>
 80095c8:	9b03      	ldr	r3, [sp, #12]
 80095ca:	1d19      	adds	r1, r3, #4
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	9103      	str	r1, [sp, #12]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	bfbb      	ittet	lt
 80095d4:	425b      	neglt	r3, r3
 80095d6:	f042 0202 	orrlt.w	r2, r2, #2
 80095da:	9307      	strge	r3, [sp, #28]
 80095dc:	9307      	strlt	r3, [sp, #28]
 80095de:	bfb8      	it	lt
 80095e0:	9204      	strlt	r2, [sp, #16]
 80095e2:	7823      	ldrb	r3, [r4, #0]
 80095e4:	2b2e      	cmp	r3, #46	; 0x2e
 80095e6:	d10c      	bne.n	8009602 <_vfiprintf_r+0x176>
 80095e8:	7863      	ldrb	r3, [r4, #1]
 80095ea:	2b2a      	cmp	r3, #42	; 0x2a
 80095ec:	d135      	bne.n	800965a <_vfiprintf_r+0x1ce>
 80095ee:	9b03      	ldr	r3, [sp, #12]
 80095f0:	1d1a      	adds	r2, r3, #4
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	9203      	str	r2, [sp, #12]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	bfb8      	it	lt
 80095fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80095fe:	3402      	adds	r4, #2
 8009600:	9305      	str	r3, [sp, #20]
 8009602:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80096e8 <_vfiprintf_r+0x25c>
 8009606:	7821      	ldrb	r1, [r4, #0]
 8009608:	2203      	movs	r2, #3
 800960a:	4650      	mov	r0, sl
 800960c:	f7f6 fe68 	bl	80002e0 <memchr>
 8009610:	b140      	cbz	r0, 8009624 <_vfiprintf_r+0x198>
 8009612:	2340      	movs	r3, #64	; 0x40
 8009614:	eba0 000a 	sub.w	r0, r0, sl
 8009618:	fa03 f000 	lsl.w	r0, r3, r0
 800961c:	9b04      	ldr	r3, [sp, #16]
 800961e:	4303      	orrs	r3, r0
 8009620:	3401      	adds	r4, #1
 8009622:	9304      	str	r3, [sp, #16]
 8009624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009628:	482c      	ldr	r0, [pc, #176]	; (80096dc <_vfiprintf_r+0x250>)
 800962a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800962e:	2206      	movs	r2, #6
 8009630:	f7f6 fe56 	bl	80002e0 <memchr>
 8009634:	2800      	cmp	r0, #0
 8009636:	d03f      	beq.n	80096b8 <_vfiprintf_r+0x22c>
 8009638:	4b29      	ldr	r3, [pc, #164]	; (80096e0 <_vfiprintf_r+0x254>)
 800963a:	bb1b      	cbnz	r3, 8009684 <_vfiprintf_r+0x1f8>
 800963c:	9b03      	ldr	r3, [sp, #12]
 800963e:	3307      	adds	r3, #7
 8009640:	f023 0307 	bic.w	r3, r3, #7
 8009644:	3308      	adds	r3, #8
 8009646:	9303      	str	r3, [sp, #12]
 8009648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800964a:	443b      	add	r3, r7
 800964c:	9309      	str	r3, [sp, #36]	; 0x24
 800964e:	e767      	b.n	8009520 <_vfiprintf_r+0x94>
 8009650:	fb0c 3202 	mla	r2, ip, r2, r3
 8009654:	460c      	mov	r4, r1
 8009656:	2001      	movs	r0, #1
 8009658:	e7a5      	b.n	80095a6 <_vfiprintf_r+0x11a>
 800965a:	2300      	movs	r3, #0
 800965c:	3401      	adds	r4, #1
 800965e:	9305      	str	r3, [sp, #20]
 8009660:	4619      	mov	r1, r3
 8009662:	f04f 0c0a 	mov.w	ip, #10
 8009666:	4620      	mov	r0, r4
 8009668:	f810 2b01 	ldrb.w	r2, [r0], #1
 800966c:	3a30      	subs	r2, #48	; 0x30
 800966e:	2a09      	cmp	r2, #9
 8009670:	d903      	bls.n	800967a <_vfiprintf_r+0x1ee>
 8009672:	2b00      	cmp	r3, #0
 8009674:	d0c5      	beq.n	8009602 <_vfiprintf_r+0x176>
 8009676:	9105      	str	r1, [sp, #20]
 8009678:	e7c3      	b.n	8009602 <_vfiprintf_r+0x176>
 800967a:	fb0c 2101 	mla	r1, ip, r1, r2
 800967e:	4604      	mov	r4, r0
 8009680:	2301      	movs	r3, #1
 8009682:	e7f0      	b.n	8009666 <_vfiprintf_r+0x1da>
 8009684:	ab03      	add	r3, sp, #12
 8009686:	9300      	str	r3, [sp, #0]
 8009688:	462a      	mov	r2, r5
 800968a:	4b16      	ldr	r3, [pc, #88]	; (80096e4 <_vfiprintf_r+0x258>)
 800968c:	a904      	add	r1, sp, #16
 800968e:	4630      	mov	r0, r6
 8009690:	f3af 8000 	nop.w
 8009694:	4607      	mov	r7, r0
 8009696:	1c78      	adds	r0, r7, #1
 8009698:	d1d6      	bne.n	8009648 <_vfiprintf_r+0x1bc>
 800969a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800969c:	07d9      	lsls	r1, r3, #31
 800969e:	d405      	bmi.n	80096ac <_vfiprintf_r+0x220>
 80096a0:	89ab      	ldrh	r3, [r5, #12]
 80096a2:	059a      	lsls	r2, r3, #22
 80096a4:	d402      	bmi.n	80096ac <_vfiprintf_r+0x220>
 80096a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096a8:	f7ff fe6b 	bl	8009382 <__retarget_lock_release_recursive>
 80096ac:	89ab      	ldrh	r3, [r5, #12]
 80096ae:	065b      	lsls	r3, r3, #25
 80096b0:	f53f af12 	bmi.w	80094d8 <_vfiprintf_r+0x4c>
 80096b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096b6:	e711      	b.n	80094dc <_vfiprintf_r+0x50>
 80096b8:	ab03      	add	r3, sp, #12
 80096ba:	9300      	str	r3, [sp, #0]
 80096bc:	462a      	mov	r2, r5
 80096be:	4b09      	ldr	r3, [pc, #36]	; (80096e4 <_vfiprintf_r+0x258>)
 80096c0:	a904      	add	r1, sp, #16
 80096c2:	4630      	mov	r0, r6
 80096c4:	f000 f880 	bl	80097c8 <_printf_i>
 80096c8:	e7e4      	b.n	8009694 <_vfiprintf_r+0x208>
 80096ca:	bf00      	nop
 80096cc:	0800a088 	.word	0x0800a088
 80096d0:	0800a0a8 	.word	0x0800a0a8
 80096d4:	0800a068 	.word	0x0800a068
 80096d8:	0800a0c8 	.word	0x0800a0c8
 80096dc:	0800a0d2 	.word	0x0800a0d2
 80096e0:	00000000 	.word	0x00000000
 80096e4:	08009467 	.word	0x08009467
 80096e8:	0800a0ce 	.word	0x0800a0ce

080096ec <_printf_common>:
 80096ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096f0:	4616      	mov	r6, r2
 80096f2:	4699      	mov	r9, r3
 80096f4:	688a      	ldr	r2, [r1, #8]
 80096f6:	690b      	ldr	r3, [r1, #16]
 80096f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80096fc:	4293      	cmp	r3, r2
 80096fe:	bfb8      	it	lt
 8009700:	4613      	movlt	r3, r2
 8009702:	6033      	str	r3, [r6, #0]
 8009704:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009708:	4607      	mov	r7, r0
 800970a:	460c      	mov	r4, r1
 800970c:	b10a      	cbz	r2, 8009712 <_printf_common+0x26>
 800970e:	3301      	adds	r3, #1
 8009710:	6033      	str	r3, [r6, #0]
 8009712:	6823      	ldr	r3, [r4, #0]
 8009714:	0699      	lsls	r1, r3, #26
 8009716:	bf42      	ittt	mi
 8009718:	6833      	ldrmi	r3, [r6, #0]
 800971a:	3302      	addmi	r3, #2
 800971c:	6033      	strmi	r3, [r6, #0]
 800971e:	6825      	ldr	r5, [r4, #0]
 8009720:	f015 0506 	ands.w	r5, r5, #6
 8009724:	d106      	bne.n	8009734 <_printf_common+0x48>
 8009726:	f104 0a19 	add.w	sl, r4, #25
 800972a:	68e3      	ldr	r3, [r4, #12]
 800972c:	6832      	ldr	r2, [r6, #0]
 800972e:	1a9b      	subs	r3, r3, r2
 8009730:	42ab      	cmp	r3, r5
 8009732:	dc26      	bgt.n	8009782 <_printf_common+0x96>
 8009734:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009738:	1e13      	subs	r3, r2, #0
 800973a:	6822      	ldr	r2, [r4, #0]
 800973c:	bf18      	it	ne
 800973e:	2301      	movne	r3, #1
 8009740:	0692      	lsls	r2, r2, #26
 8009742:	d42b      	bmi.n	800979c <_printf_common+0xb0>
 8009744:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009748:	4649      	mov	r1, r9
 800974a:	4638      	mov	r0, r7
 800974c:	47c0      	blx	r8
 800974e:	3001      	adds	r0, #1
 8009750:	d01e      	beq.n	8009790 <_printf_common+0xa4>
 8009752:	6823      	ldr	r3, [r4, #0]
 8009754:	68e5      	ldr	r5, [r4, #12]
 8009756:	6832      	ldr	r2, [r6, #0]
 8009758:	f003 0306 	and.w	r3, r3, #6
 800975c:	2b04      	cmp	r3, #4
 800975e:	bf08      	it	eq
 8009760:	1aad      	subeq	r5, r5, r2
 8009762:	68a3      	ldr	r3, [r4, #8]
 8009764:	6922      	ldr	r2, [r4, #16]
 8009766:	bf0c      	ite	eq
 8009768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800976c:	2500      	movne	r5, #0
 800976e:	4293      	cmp	r3, r2
 8009770:	bfc4      	itt	gt
 8009772:	1a9b      	subgt	r3, r3, r2
 8009774:	18ed      	addgt	r5, r5, r3
 8009776:	2600      	movs	r6, #0
 8009778:	341a      	adds	r4, #26
 800977a:	42b5      	cmp	r5, r6
 800977c:	d11a      	bne.n	80097b4 <_printf_common+0xc8>
 800977e:	2000      	movs	r0, #0
 8009780:	e008      	b.n	8009794 <_printf_common+0xa8>
 8009782:	2301      	movs	r3, #1
 8009784:	4652      	mov	r2, sl
 8009786:	4649      	mov	r1, r9
 8009788:	4638      	mov	r0, r7
 800978a:	47c0      	blx	r8
 800978c:	3001      	adds	r0, #1
 800978e:	d103      	bne.n	8009798 <_printf_common+0xac>
 8009790:	f04f 30ff 	mov.w	r0, #4294967295
 8009794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009798:	3501      	adds	r5, #1
 800979a:	e7c6      	b.n	800972a <_printf_common+0x3e>
 800979c:	18e1      	adds	r1, r4, r3
 800979e:	1c5a      	adds	r2, r3, #1
 80097a0:	2030      	movs	r0, #48	; 0x30
 80097a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80097a6:	4422      	add	r2, r4
 80097a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80097ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80097b0:	3302      	adds	r3, #2
 80097b2:	e7c7      	b.n	8009744 <_printf_common+0x58>
 80097b4:	2301      	movs	r3, #1
 80097b6:	4622      	mov	r2, r4
 80097b8:	4649      	mov	r1, r9
 80097ba:	4638      	mov	r0, r7
 80097bc:	47c0      	blx	r8
 80097be:	3001      	adds	r0, #1
 80097c0:	d0e6      	beq.n	8009790 <_printf_common+0xa4>
 80097c2:	3601      	adds	r6, #1
 80097c4:	e7d9      	b.n	800977a <_printf_common+0x8e>
	...

080097c8 <_printf_i>:
 80097c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097cc:	460c      	mov	r4, r1
 80097ce:	4691      	mov	r9, r2
 80097d0:	7e27      	ldrb	r7, [r4, #24]
 80097d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80097d4:	2f78      	cmp	r7, #120	; 0x78
 80097d6:	4680      	mov	r8, r0
 80097d8:	469a      	mov	sl, r3
 80097da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80097de:	d807      	bhi.n	80097f0 <_printf_i+0x28>
 80097e0:	2f62      	cmp	r7, #98	; 0x62
 80097e2:	d80a      	bhi.n	80097fa <_printf_i+0x32>
 80097e4:	2f00      	cmp	r7, #0
 80097e6:	f000 80d8 	beq.w	800999a <_printf_i+0x1d2>
 80097ea:	2f58      	cmp	r7, #88	; 0x58
 80097ec:	f000 80a3 	beq.w	8009936 <_printf_i+0x16e>
 80097f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80097f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80097f8:	e03a      	b.n	8009870 <_printf_i+0xa8>
 80097fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80097fe:	2b15      	cmp	r3, #21
 8009800:	d8f6      	bhi.n	80097f0 <_printf_i+0x28>
 8009802:	a001      	add	r0, pc, #4	; (adr r0, 8009808 <_printf_i+0x40>)
 8009804:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009808:	08009861 	.word	0x08009861
 800980c:	08009875 	.word	0x08009875
 8009810:	080097f1 	.word	0x080097f1
 8009814:	080097f1 	.word	0x080097f1
 8009818:	080097f1 	.word	0x080097f1
 800981c:	080097f1 	.word	0x080097f1
 8009820:	08009875 	.word	0x08009875
 8009824:	080097f1 	.word	0x080097f1
 8009828:	080097f1 	.word	0x080097f1
 800982c:	080097f1 	.word	0x080097f1
 8009830:	080097f1 	.word	0x080097f1
 8009834:	08009981 	.word	0x08009981
 8009838:	080098a5 	.word	0x080098a5
 800983c:	08009963 	.word	0x08009963
 8009840:	080097f1 	.word	0x080097f1
 8009844:	080097f1 	.word	0x080097f1
 8009848:	080099a3 	.word	0x080099a3
 800984c:	080097f1 	.word	0x080097f1
 8009850:	080098a5 	.word	0x080098a5
 8009854:	080097f1 	.word	0x080097f1
 8009858:	080097f1 	.word	0x080097f1
 800985c:	0800996b 	.word	0x0800996b
 8009860:	680b      	ldr	r3, [r1, #0]
 8009862:	1d1a      	adds	r2, r3, #4
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	600a      	str	r2, [r1, #0]
 8009868:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800986c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009870:	2301      	movs	r3, #1
 8009872:	e0a3      	b.n	80099bc <_printf_i+0x1f4>
 8009874:	6825      	ldr	r5, [r4, #0]
 8009876:	6808      	ldr	r0, [r1, #0]
 8009878:	062e      	lsls	r6, r5, #24
 800987a:	f100 0304 	add.w	r3, r0, #4
 800987e:	d50a      	bpl.n	8009896 <_printf_i+0xce>
 8009880:	6805      	ldr	r5, [r0, #0]
 8009882:	600b      	str	r3, [r1, #0]
 8009884:	2d00      	cmp	r5, #0
 8009886:	da03      	bge.n	8009890 <_printf_i+0xc8>
 8009888:	232d      	movs	r3, #45	; 0x2d
 800988a:	426d      	negs	r5, r5
 800988c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009890:	485e      	ldr	r0, [pc, #376]	; (8009a0c <_printf_i+0x244>)
 8009892:	230a      	movs	r3, #10
 8009894:	e019      	b.n	80098ca <_printf_i+0x102>
 8009896:	f015 0f40 	tst.w	r5, #64	; 0x40
 800989a:	6805      	ldr	r5, [r0, #0]
 800989c:	600b      	str	r3, [r1, #0]
 800989e:	bf18      	it	ne
 80098a0:	b22d      	sxthne	r5, r5
 80098a2:	e7ef      	b.n	8009884 <_printf_i+0xbc>
 80098a4:	680b      	ldr	r3, [r1, #0]
 80098a6:	6825      	ldr	r5, [r4, #0]
 80098a8:	1d18      	adds	r0, r3, #4
 80098aa:	6008      	str	r0, [r1, #0]
 80098ac:	0628      	lsls	r0, r5, #24
 80098ae:	d501      	bpl.n	80098b4 <_printf_i+0xec>
 80098b0:	681d      	ldr	r5, [r3, #0]
 80098b2:	e002      	b.n	80098ba <_printf_i+0xf2>
 80098b4:	0669      	lsls	r1, r5, #25
 80098b6:	d5fb      	bpl.n	80098b0 <_printf_i+0xe8>
 80098b8:	881d      	ldrh	r5, [r3, #0]
 80098ba:	4854      	ldr	r0, [pc, #336]	; (8009a0c <_printf_i+0x244>)
 80098bc:	2f6f      	cmp	r7, #111	; 0x6f
 80098be:	bf0c      	ite	eq
 80098c0:	2308      	moveq	r3, #8
 80098c2:	230a      	movne	r3, #10
 80098c4:	2100      	movs	r1, #0
 80098c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80098ca:	6866      	ldr	r6, [r4, #4]
 80098cc:	60a6      	str	r6, [r4, #8]
 80098ce:	2e00      	cmp	r6, #0
 80098d0:	bfa2      	ittt	ge
 80098d2:	6821      	ldrge	r1, [r4, #0]
 80098d4:	f021 0104 	bicge.w	r1, r1, #4
 80098d8:	6021      	strge	r1, [r4, #0]
 80098da:	b90d      	cbnz	r5, 80098e0 <_printf_i+0x118>
 80098dc:	2e00      	cmp	r6, #0
 80098de:	d04d      	beq.n	800997c <_printf_i+0x1b4>
 80098e0:	4616      	mov	r6, r2
 80098e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80098e6:	fb03 5711 	mls	r7, r3, r1, r5
 80098ea:	5dc7      	ldrb	r7, [r0, r7]
 80098ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80098f0:	462f      	mov	r7, r5
 80098f2:	42bb      	cmp	r3, r7
 80098f4:	460d      	mov	r5, r1
 80098f6:	d9f4      	bls.n	80098e2 <_printf_i+0x11a>
 80098f8:	2b08      	cmp	r3, #8
 80098fa:	d10b      	bne.n	8009914 <_printf_i+0x14c>
 80098fc:	6823      	ldr	r3, [r4, #0]
 80098fe:	07df      	lsls	r7, r3, #31
 8009900:	d508      	bpl.n	8009914 <_printf_i+0x14c>
 8009902:	6923      	ldr	r3, [r4, #16]
 8009904:	6861      	ldr	r1, [r4, #4]
 8009906:	4299      	cmp	r1, r3
 8009908:	bfde      	ittt	le
 800990a:	2330      	movle	r3, #48	; 0x30
 800990c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009910:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009914:	1b92      	subs	r2, r2, r6
 8009916:	6122      	str	r2, [r4, #16]
 8009918:	f8cd a000 	str.w	sl, [sp]
 800991c:	464b      	mov	r3, r9
 800991e:	aa03      	add	r2, sp, #12
 8009920:	4621      	mov	r1, r4
 8009922:	4640      	mov	r0, r8
 8009924:	f7ff fee2 	bl	80096ec <_printf_common>
 8009928:	3001      	adds	r0, #1
 800992a:	d14c      	bne.n	80099c6 <_printf_i+0x1fe>
 800992c:	f04f 30ff 	mov.w	r0, #4294967295
 8009930:	b004      	add	sp, #16
 8009932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009936:	4835      	ldr	r0, [pc, #212]	; (8009a0c <_printf_i+0x244>)
 8009938:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800993c:	6823      	ldr	r3, [r4, #0]
 800993e:	680e      	ldr	r6, [r1, #0]
 8009940:	061f      	lsls	r7, r3, #24
 8009942:	f856 5b04 	ldr.w	r5, [r6], #4
 8009946:	600e      	str	r6, [r1, #0]
 8009948:	d514      	bpl.n	8009974 <_printf_i+0x1ac>
 800994a:	07d9      	lsls	r1, r3, #31
 800994c:	bf44      	itt	mi
 800994e:	f043 0320 	orrmi.w	r3, r3, #32
 8009952:	6023      	strmi	r3, [r4, #0]
 8009954:	b91d      	cbnz	r5, 800995e <_printf_i+0x196>
 8009956:	6823      	ldr	r3, [r4, #0]
 8009958:	f023 0320 	bic.w	r3, r3, #32
 800995c:	6023      	str	r3, [r4, #0]
 800995e:	2310      	movs	r3, #16
 8009960:	e7b0      	b.n	80098c4 <_printf_i+0xfc>
 8009962:	6823      	ldr	r3, [r4, #0]
 8009964:	f043 0320 	orr.w	r3, r3, #32
 8009968:	6023      	str	r3, [r4, #0]
 800996a:	2378      	movs	r3, #120	; 0x78
 800996c:	4828      	ldr	r0, [pc, #160]	; (8009a10 <_printf_i+0x248>)
 800996e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009972:	e7e3      	b.n	800993c <_printf_i+0x174>
 8009974:	065e      	lsls	r6, r3, #25
 8009976:	bf48      	it	mi
 8009978:	b2ad      	uxthmi	r5, r5
 800997a:	e7e6      	b.n	800994a <_printf_i+0x182>
 800997c:	4616      	mov	r6, r2
 800997e:	e7bb      	b.n	80098f8 <_printf_i+0x130>
 8009980:	680b      	ldr	r3, [r1, #0]
 8009982:	6826      	ldr	r6, [r4, #0]
 8009984:	6960      	ldr	r0, [r4, #20]
 8009986:	1d1d      	adds	r5, r3, #4
 8009988:	600d      	str	r5, [r1, #0]
 800998a:	0635      	lsls	r5, r6, #24
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	d501      	bpl.n	8009994 <_printf_i+0x1cc>
 8009990:	6018      	str	r0, [r3, #0]
 8009992:	e002      	b.n	800999a <_printf_i+0x1d2>
 8009994:	0671      	lsls	r1, r6, #25
 8009996:	d5fb      	bpl.n	8009990 <_printf_i+0x1c8>
 8009998:	8018      	strh	r0, [r3, #0]
 800999a:	2300      	movs	r3, #0
 800999c:	6123      	str	r3, [r4, #16]
 800999e:	4616      	mov	r6, r2
 80099a0:	e7ba      	b.n	8009918 <_printf_i+0x150>
 80099a2:	680b      	ldr	r3, [r1, #0]
 80099a4:	1d1a      	adds	r2, r3, #4
 80099a6:	600a      	str	r2, [r1, #0]
 80099a8:	681e      	ldr	r6, [r3, #0]
 80099aa:	6862      	ldr	r2, [r4, #4]
 80099ac:	2100      	movs	r1, #0
 80099ae:	4630      	mov	r0, r6
 80099b0:	f7f6 fc96 	bl	80002e0 <memchr>
 80099b4:	b108      	cbz	r0, 80099ba <_printf_i+0x1f2>
 80099b6:	1b80      	subs	r0, r0, r6
 80099b8:	6060      	str	r0, [r4, #4]
 80099ba:	6863      	ldr	r3, [r4, #4]
 80099bc:	6123      	str	r3, [r4, #16]
 80099be:	2300      	movs	r3, #0
 80099c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099c4:	e7a8      	b.n	8009918 <_printf_i+0x150>
 80099c6:	6923      	ldr	r3, [r4, #16]
 80099c8:	4632      	mov	r2, r6
 80099ca:	4649      	mov	r1, r9
 80099cc:	4640      	mov	r0, r8
 80099ce:	47d0      	blx	sl
 80099d0:	3001      	adds	r0, #1
 80099d2:	d0ab      	beq.n	800992c <_printf_i+0x164>
 80099d4:	6823      	ldr	r3, [r4, #0]
 80099d6:	079b      	lsls	r3, r3, #30
 80099d8:	d413      	bmi.n	8009a02 <_printf_i+0x23a>
 80099da:	68e0      	ldr	r0, [r4, #12]
 80099dc:	9b03      	ldr	r3, [sp, #12]
 80099de:	4298      	cmp	r0, r3
 80099e0:	bfb8      	it	lt
 80099e2:	4618      	movlt	r0, r3
 80099e4:	e7a4      	b.n	8009930 <_printf_i+0x168>
 80099e6:	2301      	movs	r3, #1
 80099e8:	4632      	mov	r2, r6
 80099ea:	4649      	mov	r1, r9
 80099ec:	4640      	mov	r0, r8
 80099ee:	47d0      	blx	sl
 80099f0:	3001      	adds	r0, #1
 80099f2:	d09b      	beq.n	800992c <_printf_i+0x164>
 80099f4:	3501      	adds	r5, #1
 80099f6:	68e3      	ldr	r3, [r4, #12]
 80099f8:	9903      	ldr	r1, [sp, #12]
 80099fa:	1a5b      	subs	r3, r3, r1
 80099fc:	42ab      	cmp	r3, r5
 80099fe:	dcf2      	bgt.n	80099e6 <_printf_i+0x21e>
 8009a00:	e7eb      	b.n	80099da <_printf_i+0x212>
 8009a02:	2500      	movs	r5, #0
 8009a04:	f104 0619 	add.w	r6, r4, #25
 8009a08:	e7f5      	b.n	80099f6 <_printf_i+0x22e>
 8009a0a:	bf00      	nop
 8009a0c:	0800a0d9 	.word	0x0800a0d9
 8009a10:	0800a0ea 	.word	0x0800a0ea

08009a14 <_sbrk_r>:
 8009a14:	b538      	push	{r3, r4, r5, lr}
 8009a16:	4d06      	ldr	r5, [pc, #24]	; (8009a30 <_sbrk_r+0x1c>)
 8009a18:	2300      	movs	r3, #0
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	4608      	mov	r0, r1
 8009a1e:	602b      	str	r3, [r5, #0]
 8009a20:	f7f7 fbe2 	bl	80011e8 <_sbrk>
 8009a24:	1c43      	adds	r3, r0, #1
 8009a26:	d102      	bne.n	8009a2e <_sbrk_r+0x1a>
 8009a28:	682b      	ldr	r3, [r5, #0]
 8009a2a:	b103      	cbz	r3, 8009a2e <_sbrk_r+0x1a>
 8009a2c:	6023      	str	r3, [r4, #0]
 8009a2e:	bd38      	pop	{r3, r4, r5, pc}
 8009a30:	24000744 	.word	0x24000744

08009a34 <__sread>:
 8009a34:	b510      	push	{r4, lr}
 8009a36:	460c      	mov	r4, r1
 8009a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a3c:	f000 fab4 	bl	8009fa8 <_read_r>
 8009a40:	2800      	cmp	r0, #0
 8009a42:	bfab      	itete	ge
 8009a44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a46:	89a3      	ldrhlt	r3, [r4, #12]
 8009a48:	181b      	addge	r3, r3, r0
 8009a4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a4e:	bfac      	ite	ge
 8009a50:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a52:	81a3      	strhlt	r3, [r4, #12]
 8009a54:	bd10      	pop	{r4, pc}

08009a56 <__swrite>:
 8009a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a5a:	461f      	mov	r7, r3
 8009a5c:	898b      	ldrh	r3, [r1, #12]
 8009a5e:	05db      	lsls	r3, r3, #23
 8009a60:	4605      	mov	r5, r0
 8009a62:	460c      	mov	r4, r1
 8009a64:	4616      	mov	r6, r2
 8009a66:	d505      	bpl.n	8009a74 <__swrite+0x1e>
 8009a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a6c:	2302      	movs	r3, #2
 8009a6e:	2200      	movs	r2, #0
 8009a70:	f000 f9c8 	bl	8009e04 <_lseek_r>
 8009a74:	89a3      	ldrh	r3, [r4, #12]
 8009a76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a7e:	81a3      	strh	r3, [r4, #12]
 8009a80:	4632      	mov	r2, r6
 8009a82:	463b      	mov	r3, r7
 8009a84:	4628      	mov	r0, r5
 8009a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a8a:	f000 b869 	b.w	8009b60 <_write_r>

08009a8e <__sseek>:
 8009a8e:	b510      	push	{r4, lr}
 8009a90:	460c      	mov	r4, r1
 8009a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a96:	f000 f9b5 	bl	8009e04 <_lseek_r>
 8009a9a:	1c43      	adds	r3, r0, #1
 8009a9c:	89a3      	ldrh	r3, [r4, #12]
 8009a9e:	bf15      	itete	ne
 8009aa0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009aa2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009aa6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009aaa:	81a3      	strheq	r3, [r4, #12]
 8009aac:	bf18      	it	ne
 8009aae:	81a3      	strhne	r3, [r4, #12]
 8009ab0:	bd10      	pop	{r4, pc}

08009ab2 <__sclose>:
 8009ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ab6:	f000 b8d3 	b.w	8009c60 <_close_r>
	...

08009abc <__swbuf_r>:
 8009abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009abe:	460e      	mov	r6, r1
 8009ac0:	4614      	mov	r4, r2
 8009ac2:	4605      	mov	r5, r0
 8009ac4:	b118      	cbz	r0, 8009ace <__swbuf_r+0x12>
 8009ac6:	6983      	ldr	r3, [r0, #24]
 8009ac8:	b90b      	cbnz	r3, 8009ace <__swbuf_r+0x12>
 8009aca:	f7ff fbbb 	bl	8009244 <__sinit>
 8009ace:	4b21      	ldr	r3, [pc, #132]	; (8009b54 <__swbuf_r+0x98>)
 8009ad0:	429c      	cmp	r4, r3
 8009ad2:	d12b      	bne.n	8009b2c <__swbuf_r+0x70>
 8009ad4:	686c      	ldr	r4, [r5, #4]
 8009ad6:	69a3      	ldr	r3, [r4, #24]
 8009ad8:	60a3      	str	r3, [r4, #8]
 8009ada:	89a3      	ldrh	r3, [r4, #12]
 8009adc:	071a      	lsls	r2, r3, #28
 8009ade:	d52f      	bpl.n	8009b40 <__swbuf_r+0x84>
 8009ae0:	6923      	ldr	r3, [r4, #16]
 8009ae2:	b36b      	cbz	r3, 8009b40 <__swbuf_r+0x84>
 8009ae4:	6923      	ldr	r3, [r4, #16]
 8009ae6:	6820      	ldr	r0, [r4, #0]
 8009ae8:	1ac0      	subs	r0, r0, r3
 8009aea:	6963      	ldr	r3, [r4, #20]
 8009aec:	b2f6      	uxtb	r6, r6
 8009aee:	4283      	cmp	r3, r0
 8009af0:	4637      	mov	r7, r6
 8009af2:	dc04      	bgt.n	8009afe <__swbuf_r+0x42>
 8009af4:	4621      	mov	r1, r4
 8009af6:	4628      	mov	r0, r5
 8009af8:	f000 f948 	bl	8009d8c <_fflush_r>
 8009afc:	bb30      	cbnz	r0, 8009b4c <__swbuf_r+0x90>
 8009afe:	68a3      	ldr	r3, [r4, #8]
 8009b00:	3b01      	subs	r3, #1
 8009b02:	60a3      	str	r3, [r4, #8]
 8009b04:	6823      	ldr	r3, [r4, #0]
 8009b06:	1c5a      	adds	r2, r3, #1
 8009b08:	6022      	str	r2, [r4, #0]
 8009b0a:	701e      	strb	r6, [r3, #0]
 8009b0c:	6963      	ldr	r3, [r4, #20]
 8009b0e:	3001      	adds	r0, #1
 8009b10:	4283      	cmp	r3, r0
 8009b12:	d004      	beq.n	8009b1e <__swbuf_r+0x62>
 8009b14:	89a3      	ldrh	r3, [r4, #12]
 8009b16:	07db      	lsls	r3, r3, #31
 8009b18:	d506      	bpl.n	8009b28 <__swbuf_r+0x6c>
 8009b1a:	2e0a      	cmp	r6, #10
 8009b1c:	d104      	bne.n	8009b28 <__swbuf_r+0x6c>
 8009b1e:	4621      	mov	r1, r4
 8009b20:	4628      	mov	r0, r5
 8009b22:	f000 f933 	bl	8009d8c <_fflush_r>
 8009b26:	b988      	cbnz	r0, 8009b4c <__swbuf_r+0x90>
 8009b28:	4638      	mov	r0, r7
 8009b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b2c:	4b0a      	ldr	r3, [pc, #40]	; (8009b58 <__swbuf_r+0x9c>)
 8009b2e:	429c      	cmp	r4, r3
 8009b30:	d101      	bne.n	8009b36 <__swbuf_r+0x7a>
 8009b32:	68ac      	ldr	r4, [r5, #8]
 8009b34:	e7cf      	b.n	8009ad6 <__swbuf_r+0x1a>
 8009b36:	4b09      	ldr	r3, [pc, #36]	; (8009b5c <__swbuf_r+0xa0>)
 8009b38:	429c      	cmp	r4, r3
 8009b3a:	bf08      	it	eq
 8009b3c:	68ec      	ldreq	r4, [r5, #12]
 8009b3e:	e7ca      	b.n	8009ad6 <__swbuf_r+0x1a>
 8009b40:	4621      	mov	r1, r4
 8009b42:	4628      	mov	r0, r5
 8009b44:	f000 f81e 	bl	8009b84 <__swsetup_r>
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	d0cb      	beq.n	8009ae4 <__swbuf_r+0x28>
 8009b4c:	f04f 37ff 	mov.w	r7, #4294967295
 8009b50:	e7ea      	b.n	8009b28 <__swbuf_r+0x6c>
 8009b52:	bf00      	nop
 8009b54:	0800a088 	.word	0x0800a088
 8009b58:	0800a0a8 	.word	0x0800a0a8
 8009b5c:	0800a068 	.word	0x0800a068

08009b60 <_write_r>:
 8009b60:	b538      	push	{r3, r4, r5, lr}
 8009b62:	4d07      	ldr	r5, [pc, #28]	; (8009b80 <_write_r+0x20>)
 8009b64:	4604      	mov	r4, r0
 8009b66:	4608      	mov	r0, r1
 8009b68:	4611      	mov	r1, r2
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	602a      	str	r2, [r5, #0]
 8009b6e:	461a      	mov	r2, r3
 8009b70:	f7f7 fae9 	bl	8001146 <_write>
 8009b74:	1c43      	adds	r3, r0, #1
 8009b76:	d102      	bne.n	8009b7e <_write_r+0x1e>
 8009b78:	682b      	ldr	r3, [r5, #0]
 8009b7a:	b103      	cbz	r3, 8009b7e <_write_r+0x1e>
 8009b7c:	6023      	str	r3, [r4, #0]
 8009b7e:	bd38      	pop	{r3, r4, r5, pc}
 8009b80:	24000744 	.word	0x24000744

08009b84 <__swsetup_r>:
 8009b84:	4b32      	ldr	r3, [pc, #200]	; (8009c50 <__swsetup_r+0xcc>)
 8009b86:	b570      	push	{r4, r5, r6, lr}
 8009b88:	681d      	ldr	r5, [r3, #0]
 8009b8a:	4606      	mov	r6, r0
 8009b8c:	460c      	mov	r4, r1
 8009b8e:	b125      	cbz	r5, 8009b9a <__swsetup_r+0x16>
 8009b90:	69ab      	ldr	r3, [r5, #24]
 8009b92:	b913      	cbnz	r3, 8009b9a <__swsetup_r+0x16>
 8009b94:	4628      	mov	r0, r5
 8009b96:	f7ff fb55 	bl	8009244 <__sinit>
 8009b9a:	4b2e      	ldr	r3, [pc, #184]	; (8009c54 <__swsetup_r+0xd0>)
 8009b9c:	429c      	cmp	r4, r3
 8009b9e:	d10f      	bne.n	8009bc0 <__swsetup_r+0x3c>
 8009ba0:	686c      	ldr	r4, [r5, #4]
 8009ba2:	89a3      	ldrh	r3, [r4, #12]
 8009ba4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ba8:	0719      	lsls	r1, r3, #28
 8009baa:	d42c      	bmi.n	8009c06 <__swsetup_r+0x82>
 8009bac:	06dd      	lsls	r5, r3, #27
 8009bae:	d411      	bmi.n	8009bd4 <__swsetup_r+0x50>
 8009bb0:	2309      	movs	r3, #9
 8009bb2:	6033      	str	r3, [r6, #0]
 8009bb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009bb8:	81a3      	strh	r3, [r4, #12]
 8009bba:	f04f 30ff 	mov.w	r0, #4294967295
 8009bbe:	e03e      	b.n	8009c3e <__swsetup_r+0xba>
 8009bc0:	4b25      	ldr	r3, [pc, #148]	; (8009c58 <__swsetup_r+0xd4>)
 8009bc2:	429c      	cmp	r4, r3
 8009bc4:	d101      	bne.n	8009bca <__swsetup_r+0x46>
 8009bc6:	68ac      	ldr	r4, [r5, #8]
 8009bc8:	e7eb      	b.n	8009ba2 <__swsetup_r+0x1e>
 8009bca:	4b24      	ldr	r3, [pc, #144]	; (8009c5c <__swsetup_r+0xd8>)
 8009bcc:	429c      	cmp	r4, r3
 8009bce:	bf08      	it	eq
 8009bd0:	68ec      	ldreq	r4, [r5, #12]
 8009bd2:	e7e6      	b.n	8009ba2 <__swsetup_r+0x1e>
 8009bd4:	0758      	lsls	r0, r3, #29
 8009bd6:	d512      	bpl.n	8009bfe <__swsetup_r+0x7a>
 8009bd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bda:	b141      	cbz	r1, 8009bee <__swsetup_r+0x6a>
 8009bdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009be0:	4299      	cmp	r1, r3
 8009be2:	d002      	beq.n	8009bea <__swsetup_r+0x66>
 8009be4:	4630      	mov	r0, r6
 8009be6:	f000 f98f 	bl	8009f08 <_free_r>
 8009bea:	2300      	movs	r3, #0
 8009bec:	6363      	str	r3, [r4, #52]	; 0x34
 8009bee:	89a3      	ldrh	r3, [r4, #12]
 8009bf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009bf4:	81a3      	strh	r3, [r4, #12]
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	6063      	str	r3, [r4, #4]
 8009bfa:	6923      	ldr	r3, [r4, #16]
 8009bfc:	6023      	str	r3, [r4, #0]
 8009bfe:	89a3      	ldrh	r3, [r4, #12]
 8009c00:	f043 0308 	orr.w	r3, r3, #8
 8009c04:	81a3      	strh	r3, [r4, #12]
 8009c06:	6923      	ldr	r3, [r4, #16]
 8009c08:	b94b      	cbnz	r3, 8009c1e <__swsetup_r+0x9a>
 8009c0a:	89a3      	ldrh	r3, [r4, #12]
 8009c0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c14:	d003      	beq.n	8009c1e <__swsetup_r+0x9a>
 8009c16:	4621      	mov	r1, r4
 8009c18:	4630      	mov	r0, r6
 8009c1a:	f000 f929 	bl	8009e70 <__smakebuf_r>
 8009c1e:	89a0      	ldrh	r0, [r4, #12]
 8009c20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c24:	f010 0301 	ands.w	r3, r0, #1
 8009c28:	d00a      	beq.n	8009c40 <__swsetup_r+0xbc>
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	60a3      	str	r3, [r4, #8]
 8009c2e:	6963      	ldr	r3, [r4, #20]
 8009c30:	425b      	negs	r3, r3
 8009c32:	61a3      	str	r3, [r4, #24]
 8009c34:	6923      	ldr	r3, [r4, #16]
 8009c36:	b943      	cbnz	r3, 8009c4a <__swsetup_r+0xc6>
 8009c38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c3c:	d1ba      	bne.n	8009bb4 <__swsetup_r+0x30>
 8009c3e:	bd70      	pop	{r4, r5, r6, pc}
 8009c40:	0781      	lsls	r1, r0, #30
 8009c42:	bf58      	it	pl
 8009c44:	6963      	ldrpl	r3, [r4, #20]
 8009c46:	60a3      	str	r3, [r4, #8]
 8009c48:	e7f4      	b.n	8009c34 <__swsetup_r+0xb0>
 8009c4a:	2000      	movs	r0, #0
 8009c4c:	e7f7      	b.n	8009c3e <__swsetup_r+0xba>
 8009c4e:	bf00      	nop
 8009c50:	24000010 	.word	0x24000010
 8009c54:	0800a088 	.word	0x0800a088
 8009c58:	0800a0a8 	.word	0x0800a0a8
 8009c5c:	0800a068 	.word	0x0800a068

08009c60 <_close_r>:
 8009c60:	b538      	push	{r3, r4, r5, lr}
 8009c62:	4d06      	ldr	r5, [pc, #24]	; (8009c7c <_close_r+0x1c>)
 8009c64:	2300      	movs	r3, #0
 8009c66:	4604      	mov	r4, r0
 8009c68:	4608      	mov	r0, r1
 8009c6a:	602b      	str	r3, [r5, #0]
 8009c6c:	f7f7 fa87 	bl	800117e <_close>
 8009c70:	1c43      	adds	r3, r0, #1
 8009c72:	d102      	bne.n	8009c7a <_close_r+0x1a>
 8009c74:	682b      	ldr	r3, [r5, #0]
 8009c76:	b103      	cbz	r3, 8009c7a <_close_r+0x1a>
 8009c78:	6023      	str	r3, [r4, #0]
 8009c7a:	bd38      	pop	{r3, r4, r5, pc}
 8009c7c:	24000744 	.word	0x24000744

08009c80 <__sflush_r>:
 8009c80:	898a      	ldrh	r2, [r1, #12]
 8009c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c86:	4605      	mov	r5, r0
 8009c88:	0710      	lsls	r0, r2, #28
 8009c8a:	460c      	mov	r4, r1
 8009c8c:	d458      	bmi.n	8009d40 <__sflush_r+0xc0>
 8009c8e:	684b      	ldr	r3, [r1, #4]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	dc05      	bgt.n	8009ca0 <__sflush_r+0x20>
 8009c94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	dc02      	bgt.n	8009ca0 <__sflush_r+0x20>
 8009c9a:	2000      	movs	r0, #0
 8009c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ca0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ca2:	2e00      	cmp	r6, #0
 8009ca4:	d0f9      	beq.n	8009c9a <__sflush_r+0x1a>
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009cac:	682f      	ldr	r7, [r5, #0]
 8009cae:	602b      	str	r3, [r5, #0]
 8009cb0:	d032      	beq.n	8009d18 <__sflush_r+0x98>
 8009cb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009cb4:	89a3      	ldrh	r3, [r4, #12]
 8009cb6:	075a      	lsls	r2, r3, #29
 8009cb8:	d505      	bpl.n	8009cc6 <__sflush_r+0x46>
 8009cba:	6863      	ldr	r3, [r4, #4]
 8009cbc:	1ac0      	subs	r0, r0, r3
 8009cbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cc0:	b10b      	cbz	r3, 8009cc6 <__sflush_r+0x46>
 8009cc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cc4:	1ac0      	subs	r0, r0, r3
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	4602      	mov	r2, r0
 8009cca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ccc:	6a21      	ldr	r1, [r4, #32]
 8009cce:	4628      	mov	r0, r5
 8009cd0:	47b0      	blx	r6
 8009cd2:	1c43      	adds	r3, r0, #1
 8009cd4:	89a3      	ldrh	r3, [r4, #12]
 8009cd6:	d106      	bne.n	8009ce6 <__sflush_r+0x66>
 8009cd8:	6829      	ldr	r1, [r5, #0]
 8009cda:	291d      	cmp	r1, #29
 8009cdc:	d82c      	bhi.n	8009d38 <__sflush_r+0xb8>
 8009cde:	4a2a      	ldr	r2, [pc, #168]	; (8009d88 <__sflush_r+0x108>)
 8009ce0:	40ca      	lsrs	r2, r1
 8009ce2:	07d6      	lsls	r6, r2, #31
 8009ce4:	d528      	bpl.n	8009d38 <__sflush_r+0xb8>
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	6062      	str	r2, [r4, #4]
 8009cea:	04d9      	lsls	r1, r3, #19
 8009cec:	6922      	ldr	r2, [r4, #16]
 8009cee:	6022      	str	r2, [r4, #0]
 8009cf0:	d504      	bpl.n	8009cfc <__sflush_r+0x7c>
 8009cf2:	1c42      	adds	r2, r0, #1
 8009cf4:	d101      	bne.n	8009cfa <__sflush_r+0x7a>
 8009cf6:	682b      	ldr	r3, [r5, #0]
 8009cf8:	b903      	cbnz	r3, 8009cfc <__sflush_r+0x7c>
 8009cfa:	6560      	str	r0, [r4, #84]	; 0x54
 8009cfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cfe:	602f      	str	r7, [r5, #0]
 8009d00:	2900      	cmp	r1, #0
 8009d02:	d0ca      	beq.n	8009c9a <__sflush_r+0x1a>
 8009d04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d08:	4299      	cmp	r1, r3
 8009d0a:	d002      	beq.n	8009d12 <__sflush_r+0x92>
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	f000 f8fb 	bl	8009f08 <_free_r>
 8009d12:	2000      	movs	r0, #0
 8009d14:	6360      	str	r0, [r4, #52]	; 0x34
 8009d16:	e7c1      	b.n	8009c9c <__sflush_r+0x1c>
 8009d18:	6a21      	ldr	r1, [r4, #32]
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	47b0      	blx	r6
 8009d20:	1c41      	adds	r1, r0, #1
 8009d22:	d1c7      	bne.n	8009cb4 <__sflush_r+0x34>
 8009d24:	682b      	ldr	r3, [r5, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d0c4      	beq.n	8009cb4 <__sflush_r+0x34>
 8009d2a:	2b1d      	cmp	r3, #29
 8009d2c:	d001      	beq.n	8009d32 <__sflush_r+0xb2>
 8009d2e:	2b16      	cmp	r3, #22
 8009d30:	d101      	bne.n	8009d36 <__sflush_r+0xb6>
 8009d32:	602f      	str	r7, [r5, #0]
 8009d34:	e7b1      	b.n	8009c9a <__sflush_r+0x1a>
 8009d36:	89a3      	ldrh	r3, [r4, #12]
 8009d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d3c:	81a3      	strh	r3, [r4, #12]
 8009d3e:	e7ad      	b.n	8009c9c <__sflush_r+0x1c>
 8009d40:	690f      	ldr	r7, [r1, #16]
 8009d42:	2f00      	cmp	r7, #0
 8009d44:	d0a9      	beq.n	8009c9a <__sflush_r+0x1a>
 8009d46:	0793      	lsls	r3, r2, #30
 8009d48:	680e      	ldr	r6, [r1, #0]
 8009d4a:	bf08      	it	eq
 8009d4c:	694b      	ldreq	r3, [r1, #20]
 8009d4e:	600f      	str	r7, [r1, #0]
 8009d50:	bf18      	it	ne
 8009d52:	2300      	movne	r3, #0
 8009d54:	eba6 0807 	sub.w	r8, r6, r7
 8009d58:	608b      	str	r3, [r1, #8]
 8009d5a:	f1b8 0f00 	cmp.w	r8, #0
 8009d5e:	dd9c      	ble.n	8009c9a <__sflush_r+0x1a>
 8009d60:	6a21      	ldr	r1, [r4, #32]
 8009d62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d64:	4643      	mov	r3, r8
 8009d66:	463a      	mov	r2, r7
 8009d68:	4628      	mov	r0, r5
 8009d6a:	47b0      	blx	r6
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	dc06      	bgt.n	8009d7e <__sflush_r+0xfe>
 8009d70:	89a3      	ldrh	r3, [r4, #12]
 8009d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d76:	81a3      	strh	r3, [r4, #12]
 8009d78:	f04f 30ff 	mov.w	r0, #4294967295
 8009d7c:	e78e      	b.n	8009c9c <__sflush_r+0x1c>
 8009d7e:	4407      	add	r7, r0
 8009d80:	eba8 0800 	sub.w	r8, r8, r0
 8009d84:	e7e9      	b.n	8009d5a <__sflush_r+0xda>
 8009d86:	bf00      	nop
 8009d88:	20400001 	.word	0x20400001

08009d8c <_fflush_r>:
 8009d8c:	b538      	push	{r3, r4, r5, lr}
 8009d8e:	690b      	ldr	r3, [r1, #16]
 8009d90:	4605      	mov	r5, r0
 8009d92:	460c      	mov	r4, r1
 8009d94:	b913      	cbnz	r3, 8009d9c <_fflush_r+0x10>
 8009d96:	2500      	movs	r5, #0
 8009d98:	4628      	mov	r0, r5
 8009d9a:	bd38      	pop	{r3, r4, r5, pc}
 8009d9c:	b118      	cbz	r0, 8009da6 <_fflush_r+0x1a>
 8009d9e:	6983      	ldr	r3, [r0, #24]
 8009da0:	b90b      	cbnz	r3, 8009da6 <_fflush_r+0x1a>
 8009da2:	f7ff fa4f 	bl	8009244 <__sinit>
 8009da6:	4b14      	ldr	r3, [pc, #80]	; (8009df8 <_fflush_r+0x6c>)
 8009da8:	429c      	cmp	r4, r3
 8009daa:	d11b      	bne.n	8009de4 <_fflush_r+0x58>
 8009dac:	686c      	ldr	r4, [r5, #4]
 8009dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d0ef      	beq.n	8009d96 <_fflush_r+0xa>
 8009db6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009db8:	07d0      	lsls	r0, r2, #31
 8009dba:	d404      	bmi.n	8009dc6 <_fflush_r+0x3a>
 8009dbc:	0599      	lsls	r1, r3, #22
 8009dbe:	d402      	bmi.n	8009dc6 <_fflush_r+0x3a>
 8009dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dc2:	f7ff fadd 	bl	8009380 <__retarget_lock_acquire_recursive>
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	4621      	mov	r1, r4
 8009dca:	f7ff ff59 	bl	8009c80 <__sflush_r>
 8009dce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dd0:	07da      	lsls	r2, r3, #31
 8009dd2:	4605      	mov	r5, r0
 8009dd4:	d4e0      	bmi.n	8009d98 <_fflush_r+0xc>
 8009dd6:	89a3      	ldrh	r3, [r4, #12]
 8009dd8:	059b      	lsls	r3, r3, #22
 8009dda:	d4dd      	bmi.n	8009d98 <_fflush_r+0xc>
 8009ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dde:	f7ff fad0 	bl	8009382 <__retarget_lock_release_recursive>
 8009de2:	e7d9      	b.n	8009d98 <_fflush_r+0xc>
 8009de4:	4b05      	ldr	r3, [pc, #20]	; (8009dfc <_fflush_r+0x70>)
 8009de6:	429c      	cmp	r4, r3
 8009de8:	d101      	bne.n	8009dee <_fflush_r+0x62>
 8009dea:	68ac      	ldr	r4, [r5, #8]
 8009dec:	e7df      	b.n	8009dae <_fflush_r+0x22>
 8009dee:	4b04      	ldr	r3, [pc, #16]	; (8009e00 <_fflush_r+0x74>)
 8009df0:	429c      	cmp	r4, r3
 8009df2:	bf08      	it	eq
 8009df4:	68ec      	ldreq	r4, [r5, #12]
 8009df6:	e7da      	b.n	8009dae <_fflush_r+0x22>
 8009df8:	0800a088 	.word	0x0800a088
 8009dfc:	0800a0a8 	.word	0x0800a0a8
 8009e00:	0800a068 	.word	0x0800a068

08009e04 <_lseek_r>:
 8009e04:	b538      	push	{r3, r4, r5, lr}
 8009e06:	4d07      	ldr	r5, [pc, #28]	; (8009e24 <_lseek_r+0x20>)
 8009e08:	4604      	mov	r4, r0
 8009e0a:	4608      	mov	r0, r1
 8009e0c:	4611      	mov	r1, r2
 8009e0e:	2200      	movs	r2, #0
 8009e10:	602a      	str	r2, [r5, #0]
 8009e12:	461a      	mov	r2, r3
 8009e14:	f7f7 f9da 	bl	80011cc <_lseek>
 8009e18:	1c43      	adds	r3, r0, #1
 8009e1a:	d102      	bne.n	8009e22 <_lseek_r+0x1e>
 8009e1c:	682b      	ldr	r3, [r5, #0]
 8009e1e:	b103      	cbz	r3, 8009e22 <_lseek_r+0x1e>
 8009e20:	6023      	str	r3, [r4, #0]
 8009e22:	bd38      	pop	{r3, r4, r5, pc}
 8009e24:	24000744 	.word	0x24000744

08009e28 <__swhatbuf_r>:
 8009e28:	b570      	push	{r4, r5, r6, lr}
 8009e2a:	460e      	mov	r6, r1
 8009e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e30:	2900      	cmp	r1, #0
 8009e32:	b096      	sub	sp, #88	; 0x58
 8009e34:	4614      	mov	r4, r2
 8009e36:	461d      	mov	r5, r3
 8009e38:	da07      	bge.n	8009e4a <__swhatbuf_r+0x22>
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	602b      	str	r3, [r5, #0]
 8009e3e:	89b3      	ldrh	r3, [r6, #12]
 8009e40:	061a      	lsls	r2, r3, #24
 8009e42:	d410      	bmi.n	8009e66 <__swhatbuf_r+0x3e>
 8009e44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e48:	e00e      	b.n	8009e68 <__swhatbuf_r+0x40>
 8009e4a:	466a      	mov	r2, sp
 8009e4c:	f000 f8be 	bl	8009fcc <_fstat_r>
 8009e50:	2800      	cmp	r0, #0
 8009e52:	dbf2      	blt.n	8009e3a <__swhatbuf_r+0x12>
 8009e54:	9a01      	ldr	r2, [sp, #4]
 8009e56:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009e5a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009e5e:	425a      	negs	r2, r3
 8009e60:	415a      	adcs	r2, r3
 8009e62:	602a      	str	r2, [r5, #0]
 8009e64:	e7ee      	b.n	8009e44 <__swhatbuf_r+0x1c>
 8009e66:	2340      	movs	r3, #64	; 0x40
 8009e68:	2000      	movs	r0, #0
 8009e6a:	6023      	str	r3, [r4, #0]
 8009e6c:	b016      	add	sp, #88	; 0x58
 8009e6e:	bd70      	pop	{r4, r5, r6, pc}

08009e70 <__smakebuf_r>:
 8009e70:	898b      	ldrh	r3, [r1, #12]
 8009e72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e74:	079d      	lsls	r5, r3, #30
 8009e76:	4606      	mov	r6, r0
 8009e78:	460c      	mov	r4, r1
 8009e7a:	d507      	bpl.n	8009e8c <__smakebuf_r+0x1c>
 8009e7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e80:	6023      	str	r3, [r4, #0]
 8009e82:	6123      	str	r3, [r4, #16]
 8009e84:	2301      	movs	r3, #1
 8009e86:	6163      	str	r3, [r4, #20]
 8009e88:	b002      	add	sp, #8
 8009e8a:	bd70      	pop	{r4, r5, r6, pc}
 8009e8c:	ab01      	add	r3, sp, #4
 8009e8e:	466a      	mov	r2, sp
 8009e90:	f7ff ffca 	bl	8009e28 <__swhatbuf_r>
 8009e94:	9900      	ldr	r1, [sp, #0]
 8009e96:	4605      	mov	r5, r0
 8009e98:	4630      	mov	r0, r6
 8009e9a:	f7ff fa73 	bl	8009384 <_malloc_r>
 8009e9e:	b948      	cbnz	r0, 8009eb4 <__smakebuf_r+0x44>
 8009ea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ea4:	059a      	lsls	r2, r3, #22
 8009ea6:	d4ef      	bmi.n	8009e88 <__smakebuf_r+0x18>
 8009ea8:	f023 0303 	bic.w	r3, r3, #3
 8009eac:	f043 0302 	orr.w	r3, r3, #2
 8009eb0:	81a3      	strh	r3, [r4, #12]
 8009eb2:	e7e3      	b.n	8009e7c <__smakebuf_r+0xc>
 8009eb4:	4b0d      	ldr	r3, [pc, #52]	; (8009eec <__smakebuf_r+0x7c>)
 8009eb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009eb8:	89a3      	ldrh	r3, [r4, #12]
 8009eba:	6020      	str	r0, [r4, #0]
 8009ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ec0:	81a3      	strh	r3, [r4, #12]
 8009ec2:	9b00      	ldr	r3, [sp, #0]
 8009ec4:	6163      	str	r3, [r4, #20]
 8009ec6:	9b01      	ldr	r3, [sp, #4]
 8009ec8:	6120      	str	r0, [r4, #16]
 8009eca:	b15b      	cbz	r3, 8009ee4 <__smakebuf_r+0x74>
 8009ecc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ed0:	4630      	mov	r0, r6
 8009ed2:	f000 f88d 	bl	8009ff0 <_isatty_r>
 8009ed6:	b128      	cbz	r0, 8009ee4 <__smakebuf_r+0x74>
 8009ed8:	89a3      	ldrh	r3, [r4, #12]
 8009eda:	f023 0303 	bic.w	r3, r3, #3
 8009ede:	f043 0301 	orr.w	r3, r3, #1
 8009ee2:	81a3      	strh	r3, [r4, #12]
 8009ee4:	89a0      	ldrh	r0, [r4, #12]
 8009ee6:	4305      	orrs	r5, r0
 8009ee8:	81a5      	strh	r5, [r4, #12]
 8009eea:	e7cd      	b.n	8009e88 <__smakebuf_r+0x18>
 8009eec:	080091dd 	.word	0x080091dd

08009ef0 <__malloc_lock>:
 8009ef0:	4801      	ldr	r0, [pc, #4]	; (8009ef8 <__malloc_lock+0x8>)
 8009ef2:	f7ff ba45 	b.w	8009380 <__retarget_lock_acquire_recursive>
 8009ef6:	bf00      	nop
 8009ef8:	2400073c 	.word	0x2400073c

08009efc <__malloc_unlock>:
 8009efc:	4801      	ldr	r0, [pc, #4]	; (8009f04 <__malloc_unlock+0x8>)
 8009efe:	f7ff ba40 	b.w	8009382 <__retarget_lock_release_recursive>
 8009f02:	bf00      	nop
 8009f04:	2400073c 	.word	0x2400073c

08009f08 <_free_r>:
 8009f08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f0a:	2900      	cmp	r1, #0
 8009f0c:	d048      	beq.n	8009fa0 <_free_r+0x98>
 8009f0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f12:	9001      	str	r0, [sp, #4]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	f1a1 0404 	sub.w	r4, r1, #4
 8009f1a:	bfb8      	it	lt
 8009f1c:	18e4      	addlt	r4, r4, r3
 8009f1e:	f7ff ffe7 	bl	8009ef0 <__malloc_lock>
 8009f22:	4a20      	ldr	r2, [pc, #128]	; (8009fa4 <_free_r+0x9c>)
 8009f24:	9801      	ldr	r0, [sp, #4]
 8009f26:	6813      	ldr	r3, [r2, #0]
 8009f28:	4615      	mov	r5, r2
 8009f2a:	b933      	cbnz	r3, 8009f3a <_free_r+0x32>
 8009f2c:	6063      	str	r3, [r4, #4]
 8009f2e:	6014      	str	r4, [r2, #0]
 8009f30:	b003      	add	sp, #12
 8009f32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f36:	f7ff bfe1 	b.w	8009efc <__malloc_unlock>
 8009f3a:	42a3      	cmp	r3, r4
 8009f3c:	d90b      	bls.n	8009f56 <_free_r+0x4e>
 8009f3e:	6821      	ldr	r1, [r4, #0]
 8009f40:	1862      	adds	r2, r4, r1
 8009f42:	4293      	cmp	r3, r2
 8009f44:	bf04      	itt	eq
 8009f46:	681a      	ldreq	r2, [r3, #0]
 8009f48:	685b      	ldreq	r3, [r3, #4]
 8009f4a:	6063      	str	r3, [r4, #4]
 8009f4c:	bf04      	itt	eq
 8009f4e:	1852      	addeq	r2, r2, r1
 8009f50:	6022      	streq	r2, [r4, #0]
 8009f52:	602c      	str	r4, [r5, #0]
 8009f54:	e7ec      	b.n	8009f30 <_free_r+0x28>
 8009f56:	461a      	mov	r2, r3
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	b10b      	cbz	r3, 8009f60 <_free_r+0x58>
 8009f5c:	42a3      	cmp	r3, r4
 8009f5e:	d9fa      	bls.n	8009f56 <_free_r+0x4e>
 8009f60:	6811      	ldr	r1, [r2, #0]
 8009f62:	1855      	adds	r5, r2, r1
 8009f64:	42a5      	cmp	r5, r4
 8009f66:	d10b      	bne.n	8009f80 <_free_r+0x78>
 8009f68:	6824      	ldr	r4, [r4, #0]
 8009f6a:	4421      	add	r1, r4
 8009f6c:	1854      	adds	r4, r2, r1
 8009f6e:	42a3      	cmp	r3, r4
 8009f70:	6011      	str	r1, [r2, #0]
 8009f72:	d1dd      	bne.n	8009f30 <_free_r+0x28>
 8009f74:	681c      	ldr	r4, [r3, #0]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	6053      	str	r3, [r2, #4]
 8009f7a:	4421      	add	r1, r4
 8009f7c:	6011      	str	r1, [r2, #0]
 8009f7e:	e7d7      	b.n	8009f30 <_free_r+0x28>
 8009f80:	d902      	bls.n	8009f88 <_free_r+0x80>
 8009f82:	230c      	movs	r3, #12
 8009f84:	6003      	str	r3, [r0, #0]
 8009f86:	e7d3      	b.n	8009f30 <_free_r+0x28>
 8009f88:	6825      	ldr	r5, [r4, #0]
 8009f8a:	1961      	adds	r1, r4, r5
 8009f8c:	428b      	cmp	r3, r1
 8009f8e:	bf04      	itt	eq
 8009f90:	6819      	ldreq	r1, [r3, #0]
 8009f92:	685b      	ldreq	r3, [r3, #4]
 8009f94:	6063      	str	r3, [r4, #4]
 8009f96:	bf04      	itt	eq
 8009f98:	1949      	addeq	r1, r1, r5
 8009f9a:	6021      	streq	r1, [r4, #0]
 8009f9c:	6054      	str	r4, [r2, #4]
 8009f9e:	e7c7      	b.n	8009f30 <_free_r+0x28>
 8009fa0:	b003      	add	sp, #12
 8009fa2:	bd30      	pop	{r4, r5, pc}
 8009fa4:	2400015c 	.word	0x2400015c

08009fa8 <_read_r>:
 8009fa8:	b538      	push	{r3, r4, r5, lr}
 8009faa:	4d07      	ldr	r5, [pc, #28]	; (8009fc8 <_read_r+0x20>)
 8009fac:	4604      	mov	r4, r0
 8009fae:	4608      	mov	r0, r1
 8009fb0:	4611      	mov	r1, r2
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	602a      	str	r2, [r5, #0]
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	f7f7 f8a8 	bl	800110c <_read>
 8009fbc:	1c43      	adds	r3, r0, #1
 8009fbe:	d102      	bne.n	8009fc6 <_read_r+0x1e>
 8009fc0:	682b      	ldr	r3, [r5, #0]
 8009fc2:	b103      	cbz	r3, 8009fc6 <_read_r+0x1e>
 8009fc4:	6023      	str	r3, [r4, #0]
 8009fc6:	bd38      	pop	{r3, r4, r5, pc}
 8009fc8:	24000744 	.word	0x24000744

08009fcc <_fstat_r>:
 8009fcc:	b538      	push	{r3, r4, r5, lr}
 8009fce:	4d07      	ldr	r5, [pc, #28]	; (8009fec <_fstat_r+0x20>)
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	4604      	mov	r4, r0
 8009fd4:	4608      	mov	r0, r1
 8009fd6:	4611      	mov	r1, r2
 8009fd8:	602b      	str	r3, [r5, #0]
 8009fda:	f7f7 f8dc 	bl	8001196 <_fstat>
 8009fde:	1c43      	adds	r3, r0, #1
 8009fe0:	d102      	bne.n	8009fe8 <_fstat_r+0x1c>
 8009fe2:	682b      	ldr	r3, [r5, #0]
 8009fe4:	b103      	cbz	r3, 8009fe8 <_fstat_r+0x1c>
 8009fe6:	6023      	str	r3, [r4, #0]
 8009fe8:	bd38      	pop	{r3, r4, r5, pc}
 8009fea:	bf00      	nop
 8009fec:	24000744 	.word	0x24000744

08009ff0 <_isatty_r>:
 8009ff0:	b538      	push	{r3, r4, r5, lr}
 8009ff2:	4d06      	ldr	r5, [pc, #24]	; (800a00c <_isatty_r+0x1c>)
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	4604      	mov	r4, r0
 8009ff8:	4608      	mov	r0, r1
 8009ffa:	602b      	str	r3, [r5, #0]
 8009ffc:	f7f7 f8db 	bl	80011b6 <_isatty>
 800a000:	1c43      	adds	r3, r0, #1
 800a002:	d102      	bne.n	800a00a <_isatty_r+0x1a>
 800a004:	682b      	ldr	r3, [r5, #0]
 800a006:	b103      	cbz	r3, 800a00a <_isatty_r+0x1a>
 800a008:	6023      	str	r3, [r4, #0]
 800a00a:	bd38      	pop	{r3, r4, r5, pc}
 800a00c:	24000744 	.word	0x24000744

0800a010 <_init>:
 800a010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a012:	bf00      	nop
 800a014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a016:	bc08      	pop	{r3}
 800a018:	469e      	mov	lr, r3
 800a01a:	4770      	bx	lr

0800a01c <_fini>:
 800a01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a01e:	bf00      	nop
 800a020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a022:	bc08      	pop	{r3}
 800a024:	469e      	mov	lr, r3
 800a026:	4770      	bx	lr
